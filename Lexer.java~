/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\21\1\63\1\63\1\13\22\0\1\20\1\1\1\62"+
    "\1\1\1\1\1\1\1\1\1\5\1\17\1\16\1\12\1\34\1\1"+
    "\1\11\1\3\1\23\12\15\1\4\1\2\1\24\1\22\1\24\1\1"+
    "\1\1\1\25\1\36\1\52\1\27\1\37\1\46\1\40\1\47\1\42"+
    "\1\14\1\57\1\43\1\35\1\26\1\30\1\50\1\60\1\31\1\45"+
    "\1\33\1\51\1\55\1\53\1\32\1\54\1\61\1\1\1\0\1\1"+
    "\1\1\1\10\1\0\1\25\1\36\1\52\1\27\1\37\1\46\1\40"+
    "\1\47\1\42\1\14\1\57\1\43\1\35\1\26\1\30\1\50\1\60"+
    "\1\31\1\45\1\33\1\51\1\55\1\53\1\32\1\54\1\61\1\1"+
    "\1\0\1\1\7\0\1\63\33\0\1\7\35\0\1\7\2\0\1\6"+
    "\37\0\1\6\115\0\2\41\115\0\1\44\u1ea8\0\1\63\1\63\u0100\0"+
    "\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\5\1\14"+
    "\7\7\1\4\4\7\1\1\2\7\1\1\6\7\1\1"+
    "\1\15\4\0\1\16\1\0\3\7\1\17\6\7\1\20"+
    "\1\7\1\0\1\7\1\21\1\7\1\22\21\7\1\23"+
    "\1\24\1\25\1\23\1\24\1\25\1\7\1\0\1\7"+
    "\4\0\12\7\1\0\4\7\1\0\2\7\3\0\1\26"+
    "\1\27\2\0\1\7\1\30\3\7\2\31\1\0\1\7"+
    "\1\32\1\7\1\33\1\34\4\7\1\0\2\7\1\35"+
    "\2\7\1\0\3\7\1\36\3\7\1\37\1\7\1\0"+
    "\4\7\1\40\3\7\1\41\1\7\1\0\2\7\1\0"+
    "\3\7\1\42\1\0\2\7\1\0\1\7\5\0\5\7"+
    "\1\43\4\7\1\0\3\7\2\44\1\0\3\7\1\0"+
    "\2\7\1\0\1\7\1\0\2\7\1\0\1\7\1\0"+
    "\2\7\1\45\4\7\1\0\4\7\1\0\7\7\2\46"+
    "\1\7\1\47\1\50\1\51\1\7\1\0\1\7\1\0"+
    "\1\7\2\52\1\7\1\53\1\0\1\53\1\7\1\54"+
    "\1\7\1\0\1\7\1\55\1\0\1\7\5\0\6\7"+
    "\1\0\4\7\1\0\1\7\2\0\1\7\2\56\1\0"+
    "\2\7\2\57\1\60\1\0\1\7\1\61\1\62\1\63"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\64\1\65"+
    "\1\7\1\0\3\7\1\66\2\67\6\7\1\0\2\7"+
    "\2\70\1\0\1\71\1\7\2\72\1\7\2\0\2\7"+
    "\1\0\1\7\5\0\6\7\1\0\4\7\1\0\2\7"+
    "\2\73\1\0\2\7\2\74\1\61\2\0\1\7\1\0"+
    "\1\7\2\75\1\76\1\77\1\7\2\100\2\101\1\0"+
    "\2\7\1\102\1\103\1\0\2\7\1\104\1\0\2\7"+
    "\1\105\1\7\1\0\1\7\2\0\2\7\1\0\1\7"+
    "\1\106\1\107\3\0\1\106\1\107\3\7\1\0\1\7"+
    "\1\0\1\7\1\110\2\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\61\1\0\1\7\2\111\1\112\1\0"+
    "\1\7\2\113\2\114\1\115\1\0\1\7\1\116\1\0"+
    "\1\7\2\117\1\0\1\120\1\7\1\120\2\121\1\0"+
    "\1\122\1\0\1\7\1\122\1\7\1\0\1\7\2\123"+
    "\2\7\2\124\1\0\1\7\1\0\2\7\2\125\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\126"+
    "\1\0\1\126\1\7\2\127\2\7\2\130\2\131\1\7"+
    "\1\0\1\7\2\132\2\133\2\134\1\0\1\7\1\135"+
    "\1\136\1\137\2\140\1\0\1\7\1\0\1\7\2\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\64\0\150\0\234\0\64\0\64"+
    "\0\320\0\u0104\0\64\0\64\0\64\0\64\0\u0138\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\64"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\64"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\320\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u08f0\0\u0924\0\u0958\0\u098c\0\320\0\u09c0\0\320\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\64\0\64\0\u0d9c\0\320\0\320\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u05b0"+
    "\0\u12e4\0\u1318\0\64\0\64\0\u134c\0\u1380\0\u13b4\0\320"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\320"+
    "\0\u1554\0\320\0\320\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\320\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\320\0\u182c\0\u1860\0\u1894\0\320\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\320\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\320\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\320\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\64\0\320\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\320\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\64"+
    "\0\320\0\u2804\0\320\0\320\0\320\0\u2838\0\u286c\0\u28a0"+
    "\0\u28d4\0\u2908\0\64\0\320\0\u293c\0\64\0\u2970\0\320"+
    "\0\u29a4\0\320\0\u29d8\0\u2a0c\0\u2a40\0\320\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\64\0\320\0\u2f20"+
    "\0\u2f54\0\u2f88\0\64\0\320\0\320\0\u2fbc\0\u2ff0\0\u3024"+
    "\0\320\0\320\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c"+
    "\0\u3190\0\u31c4\0\320\0\320\0\u31f8\0\u322c\0\u3260\0\u3294"+
    "\0\u32c8\0\320\0\64\0\320\0\u32fc\0\u3330\0\u3364\0\u3398"+
    "\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\64\0\320\0\u34d0"+
    "\0\320\0\u3504\0\64\0\320\0\u3538\0\u356c\0\u35a0\0\u35d4"+
    "\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774"+
    "\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914"+
    "\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\64\0\320"+
    "\0\u3a80\0\u3ab4\0\u3ae8\0\64\0\320\0\u3b1c\0\u3b50\0\u3b84"+
    "\0\u3bb8\0\u3bec\0\u3c20\0\64\0\320\0\320\0\320\0\u3c54"+
    "\0\64\0\320\0\64\0\320\0\u3c88\0\u3cbc\0\u3cf0\0\320"+
    "\0\320\0\u3d24\0\u3d58\0\u3d8c\0\320\0\u3dc0\0\u3df4\0\u3e28"+
    "\0\64\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94"+
    "\0\u3fc8\0\u3ffc\0\64\0\64\0\u4030\0\u4064\0\u4098\0\320"+
    "\0\320\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204"+
    "\0\320\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370"+
    "\0\u43a4\0\u43d8\0\u440c\0\u4440\0\u4474\0\64\0\320\0\320"+
    "\0\u44a8\0\u44dc\0\64\0\320\0\64\0\320\0\320\0\u4510"+
    "\0\u4544\0\320\0\u4578\0\u45ac\0\64\0\320\0\u45e0\0\64"+
    "\0\u4614\0\320\0\64\0\320\0\u4648\0\64\0\u467c\0\u46b0"+
    "\0\320\0\u46e4\0\u4718\0\u474c\0\64\0\320\0\u4780\0\u47b4"+
    "\0\64\0\320\0\u47e8\0\u481c\0\u4850\0\u4884\0\u48b8\0\64"+
    "\0\320\0\u48ec\0\u4920\0\u4954\0\u4988\0\u49bc\0\u49f0\0\u4a24"+
    "\0\u4a58\0\64\0\u4a8c\0\320\0\u4ac0\0\64\0\320\0\u4af4"+
    "\0\u4b28\0\64\0\u13b4\0\64\0\320\0\u4b5c\0\u4b90\0\u4bc4"+
    "\0\64\0\320\0\64\0\320\0\64\0\320\0\u4bf8\0\u4c2c"+
    "\0\320\0\320\0\320\0\64\0\320\0\u4c60\0\u4c94\0\u4cc8"+
    "\0\u4cfc\0\64\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\3\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\11\1\43\1\44\1\45"+
    "\1\46\2\11\1\2\3\11\1\47\1\50\65\0\5\51"+
    "\1\52\1\0\13\51\1\53\1\54\7\51\1\0\4\51"+
    "\1\0\2\51\1\0\11\51\1\0\3\51\13\0\1\55"+
    "\62\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\17\0\1\12"+
    "\70\0\1\16\51\0\1\56\3\0\1\11\10\0\1\11"+
    "\1\57\1\60\1\11\1\61\1\11\1\62\1\0\1\11"+
    "\1\63\2\11\1\0\1\11\1\64\1\0\5\11\1\65"+
    "\3\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\3\11\1\66\3\11\1\0\2\11\1\67\1\11\1\0"+
    "\2\11\1\0\4\11\1\70\4\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\3\11\1\71\3\11\1\0"+
    "\2\11\1\72\1\11\1\73\1\74\1\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\4\11"+
    "\1\75\1\11\1\76\1\0\4\11\1\0\2\11\1\0"+
    "\1\11\1\77\2\11\1\100\3\11\1\101\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\1\102\6\11\1\0"+
    "\2\11\1\103\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\3\11\1\104"+
    "\3\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\105\6\11"+
    "\1\0\2\11\1\106\1\11\1\0\2\11\1\0\2\11"+
    "\1\107\4\11\1\110\1\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\3\11\1\111\3\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\3\11\1\112\3\11\1\0\2\11"+
    "\1\113\1\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\1\11\1\114\3\11"+
    "\1\115\1\11\1\0\4\11\1\0\1\11\1\116\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\3\11\1\117\3\11\1\0\2\11\1\120\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\30\0\1\121\15\0"+
    "\2\122\1\123\25\0\1\56\3\0\1\11\10\0\1\11"+
    "\1\124\5\11\1\0\4\11\1\0\2\11\1\122\1\125"+
    "\1\126\7\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\3\11\1\127\3\11\1\0\4\11\1\130\1\131"+
    "\1\11\1\0\11\11\1\0\3\11\35\0\1\132\3\0"+
    "\1\133\11\0\1\134\2\0\1\135\17\0\1\56\3\0"+
    "\1\11\10\0\6\11\1\136\1\0\2\11\1\137\1\11"+
    "\1\0\2\11\1\0\4\11\1\140\2\11\1\141\1\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\3\11"+
    "\1\142\3\11\1\0\4\11\1\0\2\11\1\0\4\11"+
    "\1\143\4\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\1\144\3\11\1\145\2\11\1\0\4\11\1\0"+
    "\2\11\1\0\4\11\1\146\4\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\1\11\1\147\5\11\1\0"+
    "\4\11\1\0\2\11\1\150\1\151\10\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\1\152\2\11\1\153"+
    "\3\11\1\0\4\11\1\0\2\11\1\0\2\11\1\154"+
    "\6\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\155\1\156\1\11\1\0\2\11"+
    "\1\157\6\11\1\0\3\11\3\0\5\160\1\161\1\0"+
    "\13\160\1\162\10\160\1\0\4\160\1\0\2\160\1\0"+
    "\11\160\1\0\3\160\1\163\6\0\1\164\65\0\1\51"+
    "\76\0\1\51\46\0\1\164\14\0\1\51\42\0\5\55"+
    "\1\165\1\0\3\55\1\0\5\55\1\0\1\55\1\166"+
    "\10\55\1\0\4\55\1\0\2\55\1\0\11\55\1\0"+
    "\3\55\16\0\2\167\7\0\7\167\1\0\4\167\1\0"+
    "\2\167\1\0\11\167\1\0\3\167\12\0\1\56\3\0"+
    "\1\11\10\0\2\11\1\170\4\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\1\171\6\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\4\11\1\172\2\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\3\11\1\173\3\11\1\0\4\11\1\0\2\11"+
    "\1\174\1\175\10\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\176\1\177\1\200"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\0\5\11"+
    "\1\201\3\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\6\11\1\202\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\2\11\1\0\6\11\1\203"+
    "\2\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\1\11\1\204\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\2\11\1\0\4\11\1\205\4\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\1\11\1\206\1\0\5\11\1\207"+
    "\3\11\1\0\3\11\42\0\1\210\33\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\3\11\1\211\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\0\2\11"+
    "\1\212\6\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\6\11\1\213\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\214\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\1\11\1\215\5\11\1\0\4\11\1\216\1\217\1\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\1\11\1\220\4\11\1\221\1\0\1\222\3\11"+
    "\1\0\2\11\1\0\5\11\1\223\2\11\1\224\1\0"+
    "\1\11\1\225\1\11\12\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\226\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\3\11\1\227\1\0\2\11\1\230\1\231"+
    "\10\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\232\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\233\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\2\11\1\0\3\11\1\234"+
    "\5\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\2\11\1\235\4\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\2\11\1\236\1\237\3\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\3\11\1\240\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\2\11\1\241\3\11\1\242\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\243\1\244\1\11\1\0"+
    "\5\11\1\245\3\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\246"+
    "\1\247\10\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\6\11\1\250\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\1\11\1\251\4\11\1\252\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\35\0\1\253\40\0\1\56"+
    "\3\0\1\11\10\0\6\11\1\254\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\3\11\1\255\3\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\37\0\1\256\36\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\1\257\3\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\33\0\1\260"+
    "\75\0\1\261\4\0\1\262\51\0\1\263\53\0\1\264"+
    "\45\0\1\56\3\0\1\11\10\0\4\11\1\265\2\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\1\11\1\266\1\0\3\11\1\267\5\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\1\11\1\270\2\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\11\1\271"+
    "\5\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\4\11\1\272"+
    "\2\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\11\1\273"+
    "\5\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\5\11\1\274\3\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\275\2\11"+
    "\1\276\3\11\1\0\4\11\1\277\1\300\1\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\6\11\1\301\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\302\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\41\0\1\303\34\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\304\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\2\11\1\305\1\306\10\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\1\11"+
    "\1\307\5\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\1\310"+
    "\6\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\35\0\1\311\40\0\1\56\3\0\1\11\10\0"+
    "\6\11\1\312\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\2\11\1\313\1\11\1\314\1\315\1\11\1\0"+
    "\11\11\1\0\3\11\11\0\1\160\76\0\1\160\50\0"+
    "\1\55\76\0\1\55\51\0\1\56\3\0\2\167\7\0"+
    "\7\167\1\0\4\167\1\0\2\167\1\0\11\167\1\0"+
    "\3\167\5\0\1\316\4\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\317\6\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\4\11\1\320\2\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\35\0\1\321\40\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\322\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\27\0\1\323\46\0\1\56\3\0\1\11\10\0"+
    "\1\324\6\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\2\11\1\325\1\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\1\11\1\326\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\1\11\1\327\2\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\330\5\11"+
    "\1\331\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\1\11\1\332\1\0\11\11\1\0\3\11"+
    "\43\0\2\333\31\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\333\1\334\1\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\335\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\4\11\1\336"+
    "\2\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\3\11\1\337\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\46\0\2\340\26\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\2\11\1\340\1\341\10\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\342\6\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\4\11\1\343\4\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\3\11\1\344\3\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\2\11"+
    "\1\345\1\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\4\11\1\346\4\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\3\11"+
    "\1\347\1\0\2\11\1\0\11\11\1\0\3\11\60\0"+
    "\2\350\14\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\350\1\351\2\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\1\352"+
    "\3\11\1\0\2\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\1\11\1\353\5\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\2\11\1\354"+
    "\1\11\1\0\2\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\7\11\1\355\1\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\1\11\1\356\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\4\11\1\357\1\360"+
    "\1\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\3\0\1\361\4\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\4\11\1\362\2\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\35\0\1\363\40\0"+
    "\1\56\3\0\1\11\10\0\6\11\1\364\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\2\11\1\365\1\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\41\0\1\366"+
    "\1\0\2\367\31\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\2\11\1\370\1\11\1\367\1\371\1\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\3\11\1\372\3\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\373\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\41\0\1\374\34\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\375\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\3\11\1\376\5\11\1\0\3\11\43\0\2\377\31\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\377"+
    "\1\u0100\1\11\1\0\11\11\1\0\3\11\43\0\2\u0101"+
    "\60\0\1\u0102\51\0\1\u0103\71\0\1\u0104\102\0\1\u0105"+
    "\21\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\u0101\1\u0106\1\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\2\11\1\u0107"+
    "\1\11\1\0\2\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\1\u0108\6\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\6\11\1\u0109\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\5\11\1\u010a\3\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\5\11\1\u010b\3\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\u010c\1\u010d\2\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\3\11\1\u010e\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\6\11\1\u010f\1\0\4\11\1\0\2\11\1\0\5\11"+
    "\1\u0110\3\11\1\0\3\11\57\0\1\u0111\16\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\4\11\1\0\2\11"+
    "\1\0\10\11\1\u0112\1\0\3\11\12\0\1\u0113\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\u0114\1\u0115\1\11\1\0\11\11"+
    "\1\0\3\11\41\0\1\u0116\34\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u0117\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\u0118\1\u0119"+
    "\10\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\u011a\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\51\0\1\u011b\24\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\2\11\1\u011c\6\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\1\11\1\u011d\5\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\45\0\1\u011e\30\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\1\11\1\u011f\1\0\11\11\1\0\3\11\16\0\1\u0120"+
    "\10\0\7\u0120\1\0\4\u0120\1\0\2\u0120\1\0\11\u0120"+
    "\1\0\3\u0120\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\2\11\1\0\7\11\1\u0121\1\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\u0122\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\33\0\1\u0123\42\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\u0124\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\46\0\2\u0125\26\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\u0125"+
    "\1\u0126\10\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\u0127\1\u0128"+
    "\2\11\1\u0129\5\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\1\11\1\u012a"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\0\7\11"+
    "\1\u012b\1\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\1\u012c\6\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\1\u012d\6\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\35\0\1\u012e\40\0\1\56\3\0\1\11"+
    "\10\0\6\11\1\u012f\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\u0130\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\4\11\1\u0131\2\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\u0132\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\41\0\1\u0133\34\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\u0134\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\1\u0135\3\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\4\11\1\u0136\2\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\4\11\1\u0137\2\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\4\11\1\u0138\2\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u0139\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u013a\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\u013b\1\u013c\1\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\u013d\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\30\0\1\u013e\45\0\1\56\3\0"+
    "\1\11\10\0\1\11\1\u013f\5\11\1\0\4\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\43\0\2\u0140\31\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\7\11\1\u0141\1\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\3\11\1\u0142\5\11\1\0\3\11\50\0"+
    "\1\u0143\25\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\1\11\1\u0144\7\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\4\11\1\u0145"+
    "\2\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\33\0\1\u0146\6\0\1\u0147\33\0\1\56\3\0"+
    "\1\11\10\0\4\11\1\u0148\2\11\1\0\3\11\1\u0149"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\35\0\1\u014a"+
    "\40\0\1\56\3\0\1\11\10\0\6\11\1\u014b\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\30\0"+
    "\1\u014c\107\0\1\u014d\42\0\1\u014e\106\0\1\u014f\56\0"+
    "\1\u0150\24\0\1\56\3\0\1\11\10\0\1\11\1\u0151"+
    "\5\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\5\11\1\u0152\3\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\4\11\1\u0153"+
    "\2\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\7\11\1\u0154\1\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\4\11\1\0\2\11\1\0\2\11\1\u0155\6\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\6\11\1\u0156"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\27\0\1\u0157\46\0\1\56\3\0\1\11\10\0\1\u0158"+
    "\6\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\1\u0159\3\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\2\11"+
    "\1\u015a\1\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\2\11"+
    "\1\u015b\1\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\27\0\1\u015c\46\0\1\56\3\0\1\11\10\0\1\u015d"+
    "\6\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\16\0\2\167\7\0\7\167\1\0\4\167\1\0"+
    "\1\167\1\u015e\1\0\11\167\1\0\3\167\45\0\1\u015f"+
    "\30\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\1\11\1\u0160\1\0\11\11\1\0\3\11\35\0"+
    "\1\u0161\40\0\1\56\3\0\1\11\10\0\6\11\1\u0162"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\1\u0163\6\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\41\0"+
    "\1\u0164\34\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\u0165\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\4\0\1\u0166\5\0\1\u0167\3\0\1\u0120\10\0"+
    "\7\u0120\1\0\4\u0120\1\0\2\u0120\1\0\11\u0120\1\0"+
    "\3\u0120\27\0\1\u0168\46\0\1\56\3\0\1\11\10\0"+
    "\1\u0169\6\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\41\0\1\u016a\34\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u016b\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\46\0\2\u016c\26\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\4\11\1\0\2\11"+
    "\1\u016c\1\u016d\10\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\6\11\1\u016e\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u016f\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\4\11\1\u0170\2\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\46\0\2\u0171\26\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\4\11\1\0\2\11"+
    "\1\u0171\1\u0172\10\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\u0173"+
    "\1\u0174\10\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\u0175\1\u0176\1\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\2\11\1\u0177\1\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\1\11\1\u0178\5\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\2\11\1\u0179\4\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\12\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\0\2\11\1\u017a\1\u017b\10\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\4\11\1\0\2\11\1\0\4\11\1\u017c\4\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\2\11"+
    "\1\u017d\4\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\30\0\1\u017e\45\0\1\56\3\0\1\11"+
    "\10\0\1\11\1\u017f\5\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\1\u0180\6\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\50\0\1\u0181\25\0\1\56\3\0"+
    "\1\11\10\0\6\11\1\u0182\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\u0183\1\u0184\1\11\1\0"+
    "\11\11\1\0\3\11\50\0\1\u0185\54\0\1\u0186\34\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\1\11\1\u0187\7\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\2\11\1\u0188"+
    "\1\11\1\0\2\11\1\0\11\11\1\0\3\11\41\0"+
    "\1\u0189\34\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\u018a\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\42\0\1\u018b\56\0\1\u018c\55\0\1\u018d\106\0"+
    "\1\u018e\44\0\1\u018f\42\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\3\11\1\u0190\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\u0191\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\1\u0192\6\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\3\11\1\u0193\5\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\4\11\1\u0194\2\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\u0195\1\u0196\1\11\1\0\11\11\1\0\3\11\42\0"+
    "\1\u0197\33\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\3\11\1\u0198\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\1\u0199\6\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\5\11\1\u019a\3\11\1\0\3\11\12\0"+
    "\1\56\3\0\1\11\10\0\2\11\1\u019b\4\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\35\0"+
    "\1\u019c\40\0\1\56\3\0\1\11\10\0\6\11\1\u019d"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\2\167\7\0\7\167\1\0\4\167"+
    "\1\u019e\1\u019f\1\167\1\0\11\167\1\0\3\167\27\0"+
    "\1\u01a0\46\0\1\56\3\0\1\11\10\0\1\u01a1\6\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\12\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\5\11\1\u01a2\3\11\1\0\3\11"+
    "\4\0\1\u0166\75\0\2\u01a3\7\0\7\u01a3\1\0\4\u01a3"+
    "\1\0\2\u01a3\1\0\11\u01a3\1\0\3\u01a3\54\0\1\u01a4"+
    "\21\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\5\11\1\u01a5\3\11\1\0\3\11"+
    "\31\0\1\u01a6\44\0\1\56\3\0\1\11\10\0\2\11"+
    "\1\u01a7\4\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\2\11\1\u01a8\1\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\31\0\1\u01a9\44\0\1\56\3\0\1\11"+
    "\10\0\2\11\1\u01aa\4\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\u01ab\1\u01ac"+
    "\10\11\1\0\3\11\41\0\1\u01ad\34\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\u01ae\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\u01af\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\27\0\1\u01b0\46\0"+
    "\1\56\3\0\1\11\10\0\1\u01b1\6\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\1\11\1\u01b2\5\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\4\11\1\u01b3\1\u01b4"+
    "\1\11\1\0\11\11\1\0\3\11\54\0\1\u01b5\21\0"+
    "\1\56\3\0\1\11\10\0\7\11\1\0\4\11\1\0"+
    "\2\11\1\0\5\11\1\u01b6\3\11\1\0\3\11\27\0"+
    "\1\u01b7\67\0\1\u01b8\42\0\1\56\3\0\1\11\10\0"+
    "\1\u01b9\6\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\4\11"+
    "\1\u01ba\2\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\31\0\1\u01bb\44\0\1\56\3\0\1\11"+
    "\10\0\2\11\1\u01bc\4\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\35\0\1\u01bd\67\0\1\u01be"+
    "\54\0\1\u01bf\43\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\u01c0\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\u01c1\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\3\11\1\u01c2"+
    "\3\11\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\32\0\1\u01c3\43\0\1\56\3\0\1\11\10\0"+
    "\3\11\1\u01c4\3\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\41\0\1\u01c5\34\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\u01c6\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\12\0\1\56\3\0"+
    "\1\11\10\0\6\11\1\u01c7\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\0\2\11\1\0\4\11"+
    "\1\u01c8\4\11\1\0\3\11\41\0\1\u01c9\34\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\2\11\1\u01ca\1\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\30\0\1\u01cb"+
    "\45\0\1\56\3\0\2\167\7\0\1\167\1\u01cc\5\167"+
    "\1\0\4\167\1\0\2\167\1\0\11\167\1\0\3\167"+
    "\30\0\1\u01cd\45\0\1\56\3\0\1\11\10\0\1\11"+
    "\1\u01ce\5\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\u01cf\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\4\0\1\u0166\5\0\1\u0167\3\0\2\u01a3\7\0"+
    "\7\u01a3\1\0\4\u01a3\1\0\2\u01a3\1\0\11\u01a3\1\0"+
    "\3\u01a3\35\0\1\u01d0\40\0\1\56\3\0\1\11\10\0"+
    "\6\11\1\u01d1\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\43\0\2\u01d2\31\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\4\11\1\u01d2\1\u01d3\1\11\1\0"+
    "\11\11\1\0\3\11\35\0\1\u01d4\40\0\1\56\3\0"+
    "\1\11\10\0\6\11\1\u01d5\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\32\0\1\u01d6\43\0\1\56"+
    "\3\0\1\11\10\0\3\11\1\u01d7\3\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\54\0\1\u01d8"+
    "\21\0\1\56\3\0\1\11\10\0\7\11\1\0\4\11"+
    "\1\0\2\11\1\0\5\11\1\u01d9\3\11\1\0\3\11"+
    "\41\0\1\u01da\52\0\1\u01db\45\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\2\11\1\u01dc\1\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\12\0\1\56\3\0\1\11"+
    "\10\0\1\11\1\u01dd\5\11\1\0\4\11\1\0\2\11"+
    "\1\0\11\11\1\0\3\11\30\0\1\u01de\45\0\1\56"+
    "\3\0\1\11\10\0\1\11\1\u01df\5\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\2\11\1\u01e0\1\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\12\0\1\56"+
    "\3\0\1\11\10\0\4\11\1\u01e1\2\11\1\0\4\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\41\0\1\u01e2"+
    "\34\0\1\56\3\0\2\167\7\0\7\167\1\0\2\167"+
    "\1\u01e3\1\167\1\0\2\167\1\0\11\167\1\0\3\167"+
    "\35\0\1\u01e4\40\0\1\56\3\0\1\11\10\0\6\11"+
    "\1\u01e5\1\0\4\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\12\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\u01e6\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\30\0\1\u01e7\45\0\1\56\3\0\1\11\10\0"+
    "\1\11\1\u01e8\5\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\41\0\1\u01e9\34\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\2\11\1\u01ea\1\11\1\0"+
    "\2\11\1\0\11\11\1\0\3\11\30\0\1\u01eb\45\0"+
    "\1\56\3\0\1\11\10\0\1\11\1\u01ec\5\11\1\0"+
    "\4\11\1\0\2\11\1\0\11\11\1\0\3\11\41\0"+
    "\1\u01ed\34\0\1\56\3\0\1\11\10\0\7\11\1\0"+
    "\2\11\1\u01ee\1\11\1\0\2\11\1\0\11\11\1\0"+
    "\3\11\43\0\2\u01ef\31\0\1\56\3\0\1\11\10\0"+
    "\7\11\1\0\4\11\1\u01ef\1\u01f0\1\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\2\11"+
    "\1\u01f1\4\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\7\11"+
    "\1\0\2\11\1\u01f2\1\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\12\0\1\56\3\0\1\11\10\0\4\11"+
    "\1\u01f3\2\11\1\0\4\11\1\0\2\11\1\0\11\11"+
    "\1\0\3\11\42\0\1\u01f4\33\0\1\56\3\0\1\11"+
    "\10\0\7\11\1\0\3\11\1\u01f5\1\0\2\11\1\0"+
    "\11\11\1\0\3\11\63\0\1\u01f6\12\0\1\56\3\0"+
    "\1\11\10\0\7\11\1\0\4\11\1\0\2\11\1\0"+
    "\11\11\1\0\2\11\1\u01f7\41\0\1\u01f8\34\0\1\56"+
    "\3\0\1\11\10\0\7\11\1\0\2\11\1\u01f9\1\11"+
    "\1\0\2\11\1\0\11\11\1\0\3\11\31\0\1\u01fa"+
    "\44\0\1\56\3\0\1\11\10\0\2\11\1\u01fb\4\11"+
    "\1\0\4\11\1\0\2\11\1\0\11\11\1\0\3\11"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\2\1\2\11\2\1\4\11\11\1\1\11"+
    "\17\1\1\11\4\0\1\1\1\0\14\1\1\0\26\1"+
    "\2\11\4\1\1\0\1\1\4\0\12\1\1\0\4\1"+
    "\1\0\2\1\3\0\2\11\2\0\7\1\1\0\11\1"+
    "\1\0\5\1\1\0\11\1\1\0\12\1\1\0\2\1"+
    "\1\0\4\1\1\0\2\1\1\0\1\1\5\0\12\1"+
    "\1\0\3\1\1\11\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\7\1"+
    "\1\0\4\1\1\0\7\1\1\11\6\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\11\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\5\0\6\1\1\0\4\1\1\0"+
    "\1\1\2\0\1\1\1\11\1\1\1\0\2\1\1\11"+
    "\2\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\6\1\1\0\4\1\1\11\7\1\1\0\2\1\1\11"+
    "\1\1\1\0\2\1\1\11\2\1\2\0\2\1\1\0"+
    "\1\1\5\0\6\1\1\0\4\1\1\0\2\1\1\11"+
    "\1\1\1\0\2\1\1\11\2\1\2\0\1\1\1\0"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\1\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\11\3\0\5\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\11\1\1\1\0"+
    "\1\11\1\0\3\1\1\0\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\0\2\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\4\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[507];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("-----------ERROR: [\""+yytext()+"\"]");
            } 
            // fall through
          case 98: break;
          case 2: 
            { System.out.println("<SEMICOLON>");
            } 
            // fall through
          case 99: break;
          case 3: 
            { System.out.println("<DECLARACION>");
            } 
            // fall through
          case 100: break;
          case 4: 
            { System.out.println("<OPSUMA>");
            } 
            // fall through
          case 101: break;
          case 5: 
            { System.out.println("<OPMULTIPLICACION>");
            } 
            // fall through
          case 102: break;
          case 6: 
            { 
            } 
            // fall through
          case 103: break;
          case 7: 
            { System.out.println("<ID, \""+yytext()+"\">");
            } 
            // fall through
          case 104: break;
          case 8: 
            { System.out.println("<NUM, \""+yytext()+"\">");
            } 
            // fall through
          case 105: break;
          case 9: 
            { System.out.println("<PARDER>");
            } 
            // fall through
          case 106: break;
          case 10: 
            { System.out.println("<PARIZQ>");
            } 
            // fall through
          case 107: break;
          case 11: 
            { System.out.println("<NEWLINE>");
            } 
            // fall through
          case 108: break;
          case 12: 
            { System.out.println("<OPERADOR RELACIONAL, \""+yytext()+"\">");
            } 
            // fall through
          case 109: break;
          case 13: 
            { System.out.print(yytext());
            } 
            // fall through
          case 110: break;
          case 14: 
            { System.out.println("<COMENTARIO, \""+yytext()+"\">");
            } 
            // fall through
          case 111: break;
          case 15: 
            { System.out.println("<AT>");
            } 
            // fall through
          case 112: break;
          case 16: 
            { System.out.println("<DO>");
            } 
            // fall through
          case 113: break;
          case 17: 
            { System.out.println("<OR>");
            } 
            // fall through
          case 114: break;
          case 18: 
            { System.out.println("<OF>");
            } 
            // fall through
          case 115: break;
          case 19: 
            { System.out.println("<IN>");
            } 
            // fall through
          case 116: break;
          case 20: 
            { System.out.println("<IS>");
            } 
            // fall through
          case 117: break;
          case 21: 
            { System.out.println("<IF>");
            } 
            // fall through
          case 118: break;
          case 22: 
            { System.out.println("<STRING, "+yytext()+">");
            } 
            // fall through
          case 119: break;
          case 23: 
            { System.out.println("<CHAR, "+yytext()+">");
            } 
            // fall through
          case 120: break;
          case 24: 
            { System.out.println("<AND>");
            } 
            // fall through
          case 121: break;
          case 25: 
            { System.out.println("<ABS>");
            } 
            // fall through
          case 122: break;
          case 26: 
            { System.out.println("<ALL>");
            } 
            // fall through
          case 123: break;
          case 27: 
            { System.out.println("<NOT>");
            } 
            // fall through
          case 124: break;
          case 28: 
            { System.out.println("<NEW>");
            } 
            // fall through
          case 125: break;
          case 29: 
            { System.out.println("<OUT>");
            } 
            // fall through
          case 126: break;
          case 30: 
            { System.out.println("<REM>");
            } 
            // fall through
          case 127: break;
          case 31: 
            { System.out.println("XOR");
            } 
            // fall through
          case 128: break;
          case 32: 
            { System.out.println("<MOD>");
            } 
            // fall through
          case 129: break;
          case 33: 
            { System.out.println("<END>");
            } 
            // fall through
          case 130: break;
          case 34: 
            { System.out.println("<GET>");
            } 
            // fall through
          case 131: break;
          case 35: 
            { System.out.println("<FOR>");
            } 
            // fall through
          case 132: break;
          case 36: 
            { System.out.println("<USE>");
            } 
            // fall through
          case 133: break;
          case 37: 
            { System.out.println("<NULL>");
            } 
            // fall through
          case 134: break;
          case 38: 
            { System.out.println("<TASK>");
            } 
            // fall through
          case 135: break;
          case 39: 
            { System.out.println("<THEN>");
            } 
            // fall through
          case 136: break;
          case 40: 
            { System.out.println("<TYPE>");
            } 
            // fall through
          case 137: break;
          case 41: 
            { System.out.println("<BODY>");
            } 
            // fall through
          case 138: break;
          case 42: 
            { System.out.println("<EXIT>");
            } 
            // fall through
          case 139: break;
          case 43: 
            { System.out.println("<ELSE>");
            } 
            // fall through
          case 140: break;
          case 44: 
            { System.out.println("<GOTO>");
            } 
            // fall through
          case 141: break;
          case 45: 
            { System.out.println("<LOOP>");
            } 
            // fall through
          case 142: break;
          case 46: 
            { System.out.println("<CASE>");
            } 
            // fall through
          case 143: break;
          case 47: 
            { System.out.println("<WITH>");
            } 
            // fall through
          case 144: break;
          case 48: 
            { System.out.println("<WHEN>");
            } 
            // fall through
          case 145: break;
          case 49: 
            { System.out.println("<IMPORT, \""+yytext()+"\">");
            } 
            // fall through
          case 146: break;
          case 50: 
            { System.out.println("<ARRAY>");
            } 
            // fall through
          case 147: break;
          case 51: 
            { System.out.println("<ABORT>");
            } 
            // fall through
          case 148: break;
          case 52: 
            { System.out.println("<DELAY>");
            } 
            // fall through
          case 149: break;
          case 53: 
            { System.out.println("<DELTA>");
            } 
            // fall through
          case 150: break;
          case 54: 
            { System.out.println("<RANGE>");
            } 
            // fall through
          case 151: break;
          case 55: 
            { System.out.println("<RAISE>");
            } 
            // fall through
          case 152: break;
          case 56: 
            { System.out.println("<BEGIN>");
            } 
            // fall through
          case 153: break;
          case 57: 
            { System.out.println("<ENTRY>");
            } 
            // fall through
          case 154: break;
          case 58: 
            { System.out.println("<ELSIF>");
            } 
            // fall through
          case 155: break;
          case 59: 
            { System.out.println("<UNTIL>");
            } 
            // fall through
          case 156: break;
          case 60: 
            { System.out.println("<WHILE>");
            } 
            // fall through
          case 157: break;
          case 61: 
            { System.out.println("<ACCESS>");
            } 
            // fall through
          case 158: break;
          case 62: 
            { System.out.println("<ACCEPT>");
            } 
            // fall through
          case 159: break;
          case 63: 
            { System.out.println("<DOUBLE>");
            } 
            // fall through
          case 160: break;
          case 64: 
            { System.out.println("<DIGITS>");
            } 
            // fall through
          case 161: break;
          case 65: 
            { System.out.println("<OTHERS>");
            } 
            // fall through
          case 162: break;
          case 66: 
            { System.out.println("<RETURN>");
            } 
            // fall through
          case 163: break;
          case 67: 
            { System.out.println("<RECORD>");
            } 
            // fall through
          case 164: break;
          case 68: 
            { System.out.println("<TAGGED>");
            } 
            // fall through
          case 165: break;
          case 69: 
            { System.out.println("<ENDIF>");
            } 
            // fall through
          case 166: break;
          case 70: 
            { System.out.println("<STRING>");
            } 
            // fall through
          case 167: break;
          case 71: 
            { System.out.println("<SELECT>");
            } 
            // fall through
          case 168: break;
          case 72: 
            { System.out.println("<PRAGMA>");
            } 
            // fall through
          case 169: break;
          case 73: 
            { System.out.println("<ALIASED>");
            } 
            // fall through
          case 170: break;
          case 74: 
            { System.out.println("<DECLARE>");
            } 
            // fall through
          case 171: break;
          case 75: 
            { System.out.println("<RENAMES>");
            } 
            // fall through
          case 172: break;
          case 76: 
            { System.out.println("<REVERSE>");
            } 
            // fall through
          case 173: break;
          case 77: 
            { System.out.println("<REQUEUE>");
            } 
            // fall through
          case 174: break;
          case 78: 
            { System.out.println("<BOOLEAN>");
            } 
            // fall through
          case 175: break;
          case 79: 
            { System.out.println("<GENERIC>");
            } 
            // fall through
          case 176: break;
          case 80: 
            { System.out.println("<INTEGER>");
            } 
            // fall through
          case 177: break;
          case 81: 
            { System.out.println("<LIMITED>");
            } 
            // fall through
          case 178: break;
          case 82: 
            { System.out.println("<SUBTYPE>");
            } 
            // fall through
          case 179: break;
          case 83: 
            { System.out.println("<PACKAGE>");
            } 
            // fall through
          case 180: break;
          case 84: 
            { System.out.println("<PRIVATE>");
            } 
            // fall through
          case 181: break;
          case 85: 
            { System.out.println("<ABSTRACT>");
            } 
            // fall through
          case 182: break;
          case 86: 
            { System.out.println("<SEPARATE>");
            } 
            // fall through
          case 183: break;
          case 87: 
            { System.out.println("<FUNCTION>");
            } 
            // fall through
          case 184: break;
          case 88: 
            { System.out.println("<PUT_LINE>");
            } 
            // fall through
          case 185: break;
          case 89: 
            { System.out.println("<CONSTANT>");
            } 
            // fall through
          case 186: break;
          case 90: 
            { System.out.println("<TERMINATE>");
            } 
            // fall through
          case 187: break;
          case 91: 
            { System.out.println("<EXCEPTION>");
            } 
            // fall through
          case 188: break;
          case 92: 
            { System.out.println("<INTERFACE>");
            } 
            // fall through
          case 189: break;
          case 93: 
            { System.out.println("<PROTECTED>");
            } 
            // fall through
          case 190: break;
          case 94: 
            { System.out.println("<PROCEDURE>");
            } 
            // fall through
          case 191: break;
          case 95: 
            { System.out.println("<CHARACTER>");
            } 
            // fall through
          case 192: break;
          case 96: 
            { System.out.println("<OVERRIDING>");
            } 
            // fall through
          case 193: break;
          case 97: 
            { System.out.println("<SYNCHRONIZED>");
            } 
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
