/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\22\1\64\1\64\1\14\22\0\1\21\1\1\1\63"+
    "\1\12\1\12\1\12\1\12\1\5\1\20\1\17\1\13\1\35\1\1"+
    "\1\11\1\3\1\24\12\16\1\4\1\2\1\25\1\23\1\25\1\1"+
    "\1\12\1\26\1\37\1\53\1\30\1\40\1\47\1\41\1\50\1\43"+
    "\1\15\1\62\1\44\1\36\1\27\1\31\1\51\1\57\1\32\1\46"+
    "\1\34\1\52\1\56\1\55\1\33\1\54\1\60\1\1\1\0\1\1"+
    "\1\12\1\10\1\0\1\26\1\37\1\53\1\30\1\40\1\47\1\41"+
    "\1\50\1\43\1\15\1\62\1\44\1\36\1\27\1\31\1\51\1\57"+
    "\1\32\1\46\1\34\1\52\1\56\1\55\1\33\1\54\1\60\1\1"+
    "\1\0\1\1\7\0\1\64\33\0\1\7\35\0\1\7\2\0\1\6"+
    "\37\0\1\6\115\0\2\42\115\0\1\45\u1ea8\0\1\64\1\64\u0100\0"+
    "\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\7\1\16\7\11\1\5\4\11\1\1\2\11"+
    "\1\1\6\11\1\1\1\17\4\0\1\20\1\21\1\0"+
    "\3\11\1\22\5\11\1\23\1\11\1\0\1\11\1\24"+
    "\1\11\1\25\20\11\1\26\1\27\1\30\1\26\1\27"+
    "\1\30\1\11\1\0\1\11\4\0\16\11\3\0\1\31"+
    "\1\32\2\0\1\11\1\33\2\11\1\0\1\11\1\34"+
    "\1\11\1\35\1\36\3\11\1\0\2\11\1\37\2\11"+
    "\1\0\3\11\1\40\2\11\1\41\1\11\1\0\3\11"+
    "\1\42\3\11\1\43\1\11\1\0\2\11\1\0\3\11"+
    "\1\44\1\0\2\11\1\0\1\11\5\0\5\11\1\45"+
    "\4\11\1\0\1\11\1\46\1\11\1\0\4\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\47\3\11\1\0"+
    "\4\11\1\0\6\11\2\50\1\11\1\51\1\52\1\11"+
    "\1\0\1\11\1\0\1\11\2\53\1\11\1\54\1\0"+
    "\1\54\1\11\1\55\1\11\1\0\1\11\1\56\1\0"+
    "\1\11\5\0\12\11\1\0\1\11\2\0\1\11\2\57"+
    "\1\0\2\11\1\60\1\0\1\11\1\61\1\62\1\0"+
    "\1\11\1\0\2\11\1\63\1\64\1\11\1\0\3\11"+
    "\1\65\2\66\5\11\1\0\2\11\2\67\1\0\1\70"+
    "\1\11\2\71\1\11\2\0\2\11\1\0\1\11\5\0"+
    "\5\11\1\72\4\11\1\0\2\11\2\73\1\0\2\11"+
    "\2\74\1\61\2\0\1\11\2\75\1\76\1\11\2\77"+
    "\2\100\1\0\2\11\1\101\1\0\2\11\1\102\1\0"+
    "\2\11\1\103\1\11\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\1\104\1\105\3\0\1\104\1\105\3\11\1\0"+
    "\1\11\1\106\2\11\1\0\1\11\1\0\1\11\1\0"+
    "\2\11\1\61\2\107\1\110\1\0\1\11\2\111\2\112"+
    "\1\113\1\0\1\11\1\114\1\0\1\11\2\115\1\0"+
    "\1\116\1\11\1\116\2\117\1\0\1\120\1\0\1\11"+
    "\1\120\1\11\1\0\3\11\2\121\1\0\1\11\1\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\122\1\0\1\122\1\11\2\123\2\11\2\124"+
    "\2\125\1\11\1\0\1\11\2\126\2\127\2\130\1\0"+
    "\1\11\1\131\1\132\1\133\2\134\1\0\1\11\1\0"+
    "\1\11\2\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\65\0\65\0\152\0\237\0\324"+
    "\0\65\0\u0109\0\65\0\u013e\0\u0173\0\65\0\65\0\65"+
    "\0\65\0\u01a8\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\65\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\65\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\65\0\u0774\0\u07a9\0\u07de\0\u0813\0\u013e\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u013e\0\u0951\0\u0986\0\u09bb\0\u013e"+
    "\0\u09f0\0\u013e\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\65\0\65\0\u0daa\0\u013e\0\u013e"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u0636\0\u1238\0\u126d"+
    "\0\65\0\65\0\u12a2\0\u12d7\0\u130c\0\u013e\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u013e\0\u1415\0\u013e\0\u013e\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u013e\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u013e\0\u16c6\0\u16fb\0\u013e\0\u1730"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u013e\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u013e\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u013e\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u013e\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\65\0\u013e"+
    "\0\u250f\0\u013e\0\u013e\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618"+
    "\0\65\0\u013e\0\u264d\0\65\0\u2682\0\u013e\0\u26b7\0\u013e"+
    "\0\u26ec\0\u2721\0\u2756\0\u013e\0\u278b\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\65\0\u013e\0\u2c19\0\u2c4e\0\u2c83\0\u013e"+
    "\0\u2cb8\0\u2ced\0\u2d22\0\u013e\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u013e\0\u013e\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34"+
    "\0\u013e\0\65\0\u013e\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d"+
    "\0\u3072\0\u30a7\0\u30dc\0\65\0\u013e\0\u3111\0\u013e\0\u3146"+
    "\0\65\0\u013e\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284"+
    "\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c"+
    "\0\u3461\0\u3496\0\u34cb\0\u013e\0\u3500\0\u3535\0\u356a\0\u359f"+
    "\0\u35d4\0\u3609\0\u363e\0\65\0\u013e\0\u3673\0\u36a8\0\u36dd"+
    "\0\65\0\u013e\0\u3712\0\u3747\0\u377c\0\u37b1\0\65\0\u013e"+
    "\0\u013e\0\u37e6\0\65\0\u013e\0\65\0\u013e\0\u381b\0\u3850"+
    "\0\u3885\0\u013e\0\u38ba\0\u38ef\0\u3924\0\u013e\0\u3959\0\u398e"+
    "\0\u39c3\0\65\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01"+
    "\0\u3b36\0\u3b6b\0\u3ba0\0\65\0\65\0\u3bd5\0\u3c0a\0\u3c3f"+
    "\0\u013e\0\u013e\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u013e"+
    "\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0"+
    "\0\u3f25\0\u3f5a\0\65\0\u013e\0\u013e\0\u3f8f\0\u3fc4\0\65"+
    "\0\u013e\0\65\0\u013e\0\u013e\0\u3ff9\0\u402e\0\u013e\0\u4063"+
    "\0\u4098\0\65\0\u013e\0\u40cd\0\65\0\u4102\0\u013e\0\65"+
    "\0\u013e\0\u4137\0\65\0\u416c\0\u41a1\0\u013e\0\u41d6\0\u420b"+
    "\0\u4240\0\u4275\0\u42aa\0\65\0\u013e\0\u42df\0\u4314\0\u4349"+
    "\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1"+
    "\0\u4526\0\u455b\0\65\0\u4590\0\u013e\0\u45c5\0\65\0\u013e"+
    "\0\u45fa\0\u462f\0\65\0\u130c\0\65\0\u013e\0\u4664\0\u4699"+
    "\0\u46ce\0\65\0\u013e\0\65\0\u013e\0\65\0\u013e\0\u4703"+
    "\0\u4738\0\u013e\0\u013e\0\u013e\0\65\0\u013e\0\u476d\0\u47a2"+
    "\0\u47d7\0\u480c\0\65\0\u013e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\14\1\46\1\47\1\50\1\14\1\51\3\14\1\2"+
    "\1\14\1\52\1\53\66\0\5\54\1\55\1\0\14\54"+
    "\1\56\1\57\7\54\1\0\4\54\1\0\2\54\1\0"+
    "\13\54\1\0\1\54\11\0\1\3\66\0\1\60\66\0"+
    "\1\61\61\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\20\0"+
    "\1\15\71\0\1\21\51\0\1\62\4\0\1\14\10\0"+
    "\1\14\1\63\1\64\1\14\1\65\1\14\1\66\1\0"+
    "\4\14\1\0\1\14\1\67\1\0\5\14\1\70\5\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\3\14"+
    "\1\71\3\14\1\0\2\14\1\72\1\14\1\0\2\14"+
    "\1\0\4\14\1\73\6\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\3\14\1\74\3\14\1\0\2\14"+
    "\1\75\1\14\1\76\1\77\1\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\4\14\1\100"+
    "\1\14\1\101\1\0\4\14\1\0\2\14\1\0\1\14"+
    "\1\102\2\14\1\103\3\14\1\104\2\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\1\105\6\14\1\0"+
    "\2\14\1\106\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\3\14\1\107"+
    "\3\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\110\6\14"+
    "\1\0\2\14\1\111\1\14\1\0\2\14\1\0\2\14"+
    "\1\112\10\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\3\14\1\113\3\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\3\14\1\114\3\14\1\0\2\14\1\115\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\14\1\116\3\14\1\117\1\14"+
    "\1\0\4\14\1\0\1\14\1\120\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\3\14\1\121"+
    "\3\14\1\0\2\14\1\122\1\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\31\0\1\123\15\0\2\124\1\125"+
    "\25\0\1\62\4\0\1\14\10\0\1\14\1\126\5\14"+
    "\1\0\4\14\1\0\2\14\1\124\1\127\1\130\11\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\3\14"+
    "\1\131\3\14\1\0\4\14\1\132\1\133\1\14\1\0"+
    "\13\14\1\0\1\14\36\0\1\134\3\0\1\135\11\0"+
    "\1\136\1\0\1\137\20\0\1\62\4\0\1\14\10\0"+
    "\6\14\1\140\1\0\2\14\1\141\1\14\1\0\2\14"+
    "\1\0\4\14\1\142\1\14\1\143\4\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\3\14\1\144\3\14"+
    "\1\0\4\14\1\0\1\14\1\145\1\0\4\14\1\146"+
    "\6\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\4\14\1\147\2\14\1\0\4\14\1\0\2\14\1\0"+
    "\4\14\1\150\6\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\1\14\1\151\5\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\1\152\2\14\1\153\3\14\1\0\4\14"+
    "\1\0\2\14\1\0\2\14\1\154\10\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\0\2\14\1\0\2\14\1\155\10\14\1\0\1\14"+
    "\3\0\5\156\1\157\1\0\14\156\1\160\10\156\1\0"+
    "\4\156\1\0\2\156\1\0\13\156\1\0\1\156\1\161"+
    "\6\0\1\162\66\0\1\54\100\0\1\54\46\0\1\162"+
    "\15\0\1\54\42\0\5\60\1\163\1\0\4\60\1\0"+
    "\5\60\1\0\1\60\1\164\10\60\1\0\4\60\1\0"+
    "\2\60\1\0\13\60\1\0\1\60\17\0\2\165\7\0"+
    "\7\165\1\0\4\165\1\0\2\165\1\0\13\165\1\0"+
    "\1\165\12\0\1\62\4\0\1\14\10\0\2\14\1\166"+
    "\4\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\167\6\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\4\14\1\170\2\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\171\1\172\1\173\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\5\14\1\174\5\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\175\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\0\7\14\1\176\3\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\1\14"+
    "\1\177\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\0\1\14\1\200"+
    "\1\0\5\14\1\201\5\14\1\0\1\14\43\0\1\202"+
    "\33\0\1\62\4\0\1\14\10\0\7\14\1\0\3\14"+
    "\1\203\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\2\14\1\204\10\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\205\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\206\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\14\1\207\5\14\1\0\4\14"+
    "\1\210\1\211\1\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\1\14\1\212\4\14\1\213"+
    "\1\0\1\214\3\14\1\0\2\14\1\0\10\14\1\215"+
    "\1\216\1\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\217\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\3\14\1\220\1\0\2\14\1\221"+
    "\1\222\12\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\223\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\2\14\1\224\1\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\2\14\1\225\4\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\2\14\1\226\1\227\3\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\3\14\1\230\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\2\14\1\231\3\14\1\232\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\233\1\234\1\14"+
    "\1\0\5\14\1\235\5\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\236\1\237\12\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\6\14\1\240\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\1\14\1\241\4\14\1\242\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\36\0\1\243\40\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\244\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\3\14\1\245\3\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\40\0\1\246"+
    "\36\0\1\62\4\0\1\14\10\0\7\14\1\0\1\247"+
    "\3\14\1\0\2\14\1\0\13\14\1\0\1\14\34\0"+
    "\1\250\76\0\1\251\4\0\1\252\52\0\1\253\54\0"+
    "\1\254\45\0\1\62\4\0\1\14\10\0\4\14\1\255"+
    "\2\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\1\14\1\256\1\0\3\14\1\257\7\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\1\14\1\260\2\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\1\14"+
    "\1\261\5\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\4\14"+
    "\1\262\2\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\3\14"+
    "\1\263\3\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\1\14"+
    "\1\264\5\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\1\265"+
    "\2\14\1\266\3\14\1\0\4\14\1\267\1\270\1\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\6\14\1\271\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\6\14\1\272\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\273\1\274\12\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\14\1\275"+
    "\5\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\276\6\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\2\14"+
    "\1\277\1\14\1\300\1\301\1\14\1\0\13\14\1\0"+
    "\1\14\11\0\1\156\100\0\1\156\50\0\1\60\100\0"+
    "\1\60\51\0\1\62\4\0\2\165\7\0\7\165\1\0"+
    "\4\165\1\0\2\165\1\0\13\165\1\0\1\165\5\0"+
    "\1\302\4\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\1\303\6\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\30\0\1\304"+
    "\46\0\1\62\4\0\1\14\10\0\1\305\6\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\306"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\1\14\1\307\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\310\5\14\1\311\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\1\14"+
    "\1\312\1\0\13\14\1\0\1\14\44\0\2\313\31\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\313"+
    "\1\314\1\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\315\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\4\14\1\316\2\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\3\14\1\317\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\47\0\2\320\26\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\320\1\321\12\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\322\6\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\0\2\14\1\0"+
    "\4\14\1\323\6\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\2\14\1\324\1\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\0\2\14\1\0"+
    "\4\14\1\325\6\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\3\14\1\326\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\63\0\2\327\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\327\1\330\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\1\331\3\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\1\14\1\332\5\14\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\4\14\1\0\2\14\1\0\6\14\1\333"+
    "\4\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\4\14\1\0\1\14\1\334\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\335\1\336\1\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\3\0\1\337\4\0"+
    "\7\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\4\14\1\340"+
    "\2\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\36\0\1\341\40\0\1\62\4\0\1\14\10\0"+
    "\6\14\1\342\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\2\14\1\343\1\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\42\0\1\344\1\0\2\345\31\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\346\1\14"+
    "\1\345\1\347\1\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\3\14\1\350\3\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\351"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\42\0"+
    "\1\352\34\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\353\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\0\3\14\1\354\7\14\1\0"+
    "\1\14\44\0\2\355\31\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\4\14\1\355\1\356\1\14\1\0\13\14"+
    "\1\0\1\14\44\0\2\357\61\0\1\360\52\0\1\361"+
    "\72\0\1\362\103\0\1\363\21\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\357\1\364\1\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\2\14\1\365\1\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\1\366\6\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\6\14"+
    "\1\367\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\0\5\14\1\370\5\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\371\6\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\0\2\14\1\0\5\14\1\372\5\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\3\14"+
    "\1\373\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\374\1\0\4\14"+
    "\1\0\2\14\1\0\5\14\1\375\5\14\1\0\1\14"+
    "\60\0\1\376\16\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\10\14\1\377\2\14"+
    "\1\0\1\14\12\0\1\u0100\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\u0101\1\u0102\1\14\1\0\13\14\1\0\1\14\42\0"+
    "\1\u0103\34\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\u0104\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\u0105\1\u0106\12\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\4\14\1\u0107\2\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\1\14\1\u0108\5\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\46\0\1\u0109\30\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\1\14\1\u010a\1\0\13\14\1\0"+
    "\1\14\17\0\1\u010b\10\0\7\u010b\1\0\4\u010b\1\0"+
    "\2\u010b\1\0\13\u010b\1\0\1\u010b\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\0\2\14\1\0"+
    "\6\14\1\u010c\4\14\1\0\1\14\47\0\2\u010d\26\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\u010d\1\u010e\12\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\u010f\1\u0110\2\14\1\u0111\7\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\6\14\1\u0112\4\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\1\u0113\6\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\u0114\6\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\36\0\1\u0115\40\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\u0116\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\4\14\1\u0117\2\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\4\14\1\u0118\2\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\u0119\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\42\0\1\u011a"+
    "\34\0\1\62\4\0\1\14\10\0\7\14\1\0\2\14"+
    "\1\u011b\1\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\1\u011c"+
    "\3\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\4\14\1\u011d\2\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\4\14\1\u011e\2\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\u011f"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\u0120"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\u0121"+
    "\1\u0122\1\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\u0123\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\31\0\1\u0124"+
    "\45\0\1\62\4\0\1\14\10\0\1\14\1\u0125\5\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\44\0\2\u0126\31\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\6\14\1\u0127\4\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\3\14\1\u0128\7\14"+
    "\1\0\1\14\51\0\1\u0129\25\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\0\2\14\1\0\1\14"+
    "\1\u012a\11\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\u012b\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\34\0\1\u012c\6\0\1\u012d"+
    "\33\0\1\62\4\0\1\14\10\0\4\14\1\u012e\2\14"+
    "\1\0\3\14\1\u012f\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\36\0\1\u0130\40\0\1\62\4\0\1\14\10\0"+
    "\6\14\1\u0131\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\31\0\1\u0132\110\0\1\u0133\43\0\1\u0134"+
    "\106\0\1\u0135\60\0\1\u0136\24\0\1\62\4\0\1\14"+
    "\10\0\1\14\1\u0137\5\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\0\2\14\1\0\5\14"+
    "\1\u0138\5\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\u0139\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\0\2\14\1\0\6\14"+
    "\1\u013a\4\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\0\2\14\1\0\2\14"+
    "\1\u013b\10\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\6\14\1\u013c\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\6\14\1\u013d\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\1\u013e\3\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\u013f\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\u0140\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\30\0\1\u0141\46\0\1\62\4\0\1\14\10\0"+
    "\1\u0142\6\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\17\0\2\165\7\0\7\165\1\0\4\165"+
    "\1\0\1\165\1\u0143\1\0\13\165\1\0\1\165\46\0"+
    "\1\u0144\30\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\1\14\1\u0145\1\0\13\14\1\0\1\14"+
    "\36\0\1\u0146\40\0\1\62\4\0\1\14\10\0\6\14"+
    "\1\u0147\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\u0148\6\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\42\0\1\u0149\34\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\2\14\1\u014a\1\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\4\0\1\u014b\5\0\1\u014c\4\0\1\u010b"+
    "\10\0\7\u010b\1\0\4\u010b\1\0\2\u010b\1\0\13\u010b"+
    "\1\0\1\u010b\42\0\1\u014d\34\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\2\14\1\u014e\1\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\47\0\2\u014f\26\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\u014f\1\u0150\12\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\6\14\1\u0151\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\u0152\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\47\0\2\u0153\26\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\u0153\1\u0154\12\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\0\2\14\1\u0155"+
    "\1\u0156\12\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\u0157\1\u0158\1\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\2\14\1\u0159\1\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\1\14\1\u015a\5\14\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\4\14\1\0\2\14\1\u015b\1\u015c\12\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\4\14\1\u015d\6\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\2\14"+
    "\1\u015e\4\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\31\0\1\u015f\45\0\1\62\4\0\1\14"+
    "\10\0\1\14\1\u0160\5\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\1\u0161\6\14\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\51\0\1\u0162\25\0\1\62\4\0"+
    "\1\14\10\0\6\14\1\u0163\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\u0164\1\u0165\1\14\1\0"+
    "\13\14\1\0\1\14\51\0\1\u0166\55\0\1\u0167\34\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\1\14\1\u0168\11\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\u0169"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\42\0"+
    "\1\u016a\34\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\u016b\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\43\0\1\u016c\57\0\1\u016d\56\0\1\u016e\107\0"+
    "\1\u016f\45\0\1\u0170\42\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\3\14\1\u0171\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\6\14"+
    "\1\u0172\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\1\u0173\6\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\0\2\14\1\0\3\14\1\u0174\7\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\4\14\1\u0175\2\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\4\14"+
    "\1\u0176\1\u0177\1\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\1\u0178\6\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\0\2\14"+
    "\1\0\5\14\1\u0179\5\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\2\14\1\u017a\4\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\36\0\1\u017b"+
    "\40\0\1\62\4\0\1\14\10\0\6\14\1\u017c\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\2\165\7\0\7\165\1\0\4\165\1\u017d"+
    "\1\u017e\1\165\1\0\13\165\1\0\1\165\30\0\1\u017f"+
    "\46\0\1\62\4\0\1\14\10\0\1\u0180\6\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\5\14\1\u0181\5\14\1\0\1\14\4\0"+
    "\1\u014b\77\0\2\u0182\7\0\7\u0182\1\0\4\u0182\1\0"+
    "\2\u0182\1\0\13\u0182\1\0\1\u0182\32\0\1\u0183\44\0"+
    "\1\62\4\0\1\14\10\0\2\14\1\u0184\4\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\u0185"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\32\0"+
    "\1\u0186\44\0\1\62\4\0\1\14\10\0\2\14\1\u0187"+
    "\4\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\12\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\4\14\1\0\2\14\1\u0188\1\u0189\12\14\1\0\1\14"+
    "\42\0\1\u018a\34\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\2\14\1\u018b\1\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\12\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\2\14\1\u018c\1\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\30\0\1\u018d\46\0\1\62\4\0\1\14"+
    "\10\0\1\u018e\6\14\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\1\14\1\u018f\5\14\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\4\14\1\u0190\1\u0191\1\14\1\0\13\14"+
    "\1\0\1\14\55\0\1\u0192\21\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\4\14\1\0\2\14\1\0\5\14"+
    "\1\u0193\5\14\1\0\1\14\30\0\1\u0194\70\0\1\u0195"+
    "\42\0\1\62\4\0\1\14\10\0\1\u0196\6\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\4\14\1\u0197\2\14\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\32\0"+
    "\1\u0198\44\0\1\62\4\0\1\14\10\0\2\14\1\u0199"+
    "\4\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\36\0\1\u019a\70\0\1\u019b\55\0\1\u019c\43\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\u019d\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\u019e\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\3\14\1\u019f\3\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\33\0\1\u01a0"+
    "\43\0\1\62\4\0\1\14\10\0\3\14\1\u01a1\3\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\6\14\1\u01a2\1\0"+
    "\4\14\1\0\2\14\1\0\13\14\1\0\1\14\12\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\4\14\1\u01a3\6\14\1\0\1\14\42\0"+
    "\1\u01a4\34\0\1\62\4\0\1\14\10\0\7\14\1\0"+
    "\2\14\1\u01a5\1\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\31\0\1\u01a6\45\0\1\62\4\0\2\165\7\0"+
    "\1\165\1\u01a7\5\165\1\0\4\165\1\0\2\165\1\0"+
    "\13\165\1\0\1\165\31\0\1\u01a8\45\0\1\62\4\0"+
    "\1\14\10\0\1\14\1\u01a9\5\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\12\0\1\62\4\0"+
    "\1\14\10\0\6\14\1\u01aa\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\4\0\1\u014b\5\0\1\u014c"+
    "\4\0\2\u0182\7\0\7\u0182\1\0\4\u0182\1\0\2\u0182"+
    "\1\0\13\u0182\1\0\1\u0182\44\0\2\u01ab\31\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\4\14\1\u01ab\1\u01ac"+
    "\1\14\1\0\13\14\1\0\1\14\36\0\1\u01ad\40\0"+
    "\1\62\4\0\1\14\10\0\6\14\1\u01ae\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\33\0\1\u01af"+
    "\43\0\1\62\4\0\1\14\10\0\3\14\1\u01b0\3\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\55\0\1\u01b1\21\0\1\62\4\0\1\14\10\0\7\14"+
    "\1\0\4\14\1\0\2\14\1\0\5\14\1\u01b2\5\14"+
    "\1\0\1\14\42\0\1\u01b3\53\0\1\u01b4\45\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\2\14\1\u01b5\1\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\12\0\1\62"+
    "\4\0\1\14\10\0\1\14\1\u01b6\5\14\1\0\4\14"+
    "\1\0\2\14\1\0\13\14\1\0\1\14\31\0\1\u01b7"+
    "\45\0\1\62\4\0\1\14\10\0\1\14\1\u01b8\5\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\7\14\1\0\2\14"+
    "\1\u01b9\1\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\12\0\1\62\4\0\1\14\10\0\4\14\1\u01ba\2\14"+
    "\1\0\4\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\42\0\1\u01bb\34\0\1\62\4\0\2\165\7\0\7\165"+
    "\1\0\2\165\1\u01bc\1\165\1\0\2\165\1\0\13\165"+
    "\1\0\1\165\36\0\1\u01bd\40\0\1\62\4\0\1\14"+
    "\10\0\6\14\1\u01be\1\0\4\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\12\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\2\14\1\u01bf\1\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\31\0\1\u01c0\45\0\1\62\4\0"+
    "\1\14\10\0\1\14\1\u01c1\5\14\1\0\4\14\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\42\0\1\u01c2\34\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\2\14\1\u01c3"+
    "\1\14\1\0\2\14\1\0\13\14\1\0\1\14\31\0"+
    "\1\u01c4\45\0\1\62\4\0\1\14\10\0\1\14\1\u01c5"+
    "\5\14\1\0\4\14\1\0\2\14\1\0\13\14\1\0"+
    "\1\14\42\0\1\u01c6\34\0\1\62\4\0\1\14\10\0"+
    "\7\14\1\0\2\14\1\u01c7\1\14\1\0\2\14\1\0"+
    "\13\14\1\0\1\14\44\0\2\u01c8\31\0\1\62\4\0"+
    "\1\14\10\0\7\14\1\0\4\14\1\u01c8\1\u01c9\1\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\2\14\1\u01ca\4\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\7\14\1\0\2\14\1\u01cb\1\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\12\0\1\62\4\0\1\14"+
    "\10\0\4\14\1\u01cc\2\14\1\0\4\14\1\0\2\14"+
    "\1\0\13\14\1\0\1\14\43\0\1\u01cd\33\0\1\62"+
    "\4\0\1\14\10\0\7\14\1\0\3\14\1\u01ce\1\0"+
    "\2\14\1\0\13\14\1\0\1\14\62\0\1\u01cf\14\0"+
    "\1\62\4\0\1\14\10\0\7\14\1\0\4\14\1\0"+
    "\2\14\1\0\12\14\1\u01d0\1\0\1\14\42\0\1\u01d1"+
    "\34\0\1\62\4\0\1\14\10\0\7\14\1\0\2\14"+
    "\1\u01d2\1\14\1\0\2\14\1\0\13\14\1\0\1\14"+
    "\32\0\1\u01d3\44\0\1\62\4\0\1\14\10\0\2\14"+
    "\1\u01d4\4\14\1\0\4\14\1\0\2\14\1\0\13\14"+
    "\1\0\1\14\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18497];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\3\1\1\11\1\1\1\11\2\1\4\11"+
    "\11\1\1\11\17\1\1\11\4\0\1\1\1\11\1\0"+
    "\13\1\1\0\25\1\2\11\4\1\1\0\1\1\4\0"+
    "\16\1\3\0\2\11\2\0\4\1\1\0\10\1\1\0"+
    "\5\1\1\0\10\1\1\0\11\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\5\0\12\1\1\0"+
    "\3\1\1\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\6\1\1\0\4\1\1\0\6\1\1\11\5\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\11\1\0\4\1"+
    "\1\0\2\1\1\0\1\1\5\0\12\1\1\0\1\1"+
    "\2\0\1\1\1\11\1\1\1\0\3\1\1\0\3\1"+
    "\1\0\1\1\1\0\5\1\1\0\4\1\1\11\6\1"+
    "\1\0\2\1\1\11\1\1\1\0\2\1\1\11\2\1"+
    "\2\0\2\1\1\0\1\1\5\0\12\1\1\0\2\1"+
    "\1\11\1\1\1\0\2\1\1\11\2\1\2\0\1\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\11\3\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\3\1\1\11"+
    "\2\1\1\0\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\11\2\1"+
    "\1\11\1\1\1\0\1\11\1\0\3\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\4\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("-----------ERROR: [\""+yytext()+"\"] Line:["+ yyline + "], Column:[" + yycolumn+"]");
            } 
            // fall through
          case 94: break;
          case 2: 
            { System.out.println("<SIGNO PUNTUACION, " + yytext() + ">");
            } 
            // fall through
          case 95: break;
          case 3: 
            { System.out.println("<SEMICOLON>");
            } 
            // fall through
          case 96: break;
          case 4: 
            { System.out.println("<DECLARACION>");
            } 
            // fall through
          case 97: break;
          case 5: 
            { System.out.println("<OPSUMA>");
            } 
            // fall through
          case 98: break;
          case 6: 
            { System.out.println("<SIGNO ESPECIAL, " + yytext() + ">");
            } 
            // fall through
          case 99: break;
          case 7: 
            { System.out.println("<OPMULTIPLICACION>");
            } 
            // fall through
          case 100: break;
          case 8: 
            { 
            } 
            // fall through
          case 101: break;
          case 9: 
            { System.out.println("<ID, \""+yytext()+"\">");
            } 
            // fall through
          case 102: break;
          case 10: 
            { System.out.println("<NUM, \""+yytext()+"\">");
            } 
            // fall through
          case 103: break;
          case 11: 
            { System.out.println("<PARDER>");
            } 
            // fall through
          case 104: break;
          case 12: 
            { System.out.println("<PARIZQ>");
            } 
            // fall through
          case 105: break;
          case 13: 
            { System.out.println("<NEWLINE>");
            } 
            // fall through
          case 106: break;
          case 14: 
            { System.out.println("<OPERADOR RELACIONAL, \""+yytext()+"\">");
            } 
            // fall through
          case 107: break;
          case 15: 
            { System.out.print(yytext());
            } 
            // fall through
          case 108: break;
          case 16: 
            { System.out.println("<COMENTARIO, \""+yytext()+"\">");
            } 
            // fall through
          case 109: break;
          case 17: 
            { System.out.println("<EXPONENTE>");
            } 
            // fall through
          case 110: break;
          case 18: 
            { System.out.println("<AT>");
            } 
            // fall through
          case 111: break;
          case 19: 
            { System.out.println("<DO>");
            } 
            // fall through
          case 112: break;
          case 20: 
            { System.out.println("<OR>");
            } 
            // fall through
          case 113: break;
          case 21: 
            { System.out.println("<OF>");
            } 
            // fall through
          case 114: break;
          case 22: 
            { System.out.println("<IN>");
            } 
            // fall through
          case 115: break;
          case 23: 
            { System.out.println("<IS>");
            } 
            // fall through
          case 116: break;
          case 24: 
            { System.out.println("<IF>");
            } 
            // fall through
          case 117: break;
          case 25: 
            { System.out.println("<STRING, "+yytext()+">");
            } 
            // fall through
          case 118: break;
          case 26: 
            { System.out.println("<CHAR, "+yytext()+">");
            } 
            // fall through
          case 119: break;
          case 27: 
            { System.out.println("<AND>");
            } 
            // fall through
          case 120: break;
          case 28: 
            { System.out.println("<ALL>");
            } 
            // fall through
          case 121: break;
          case 29: 
            { System.out.println("<NOT>");
            } 
            // fall through
          case 122: break;
          case 30: 
            { System.out.println("<NEW>");
            } 
            // fall through
          case 123: break;
          case 31: 
            { System.out.println("<OUT>");
            } 
            // fall through
          case 124: break;
          case 32: 
            { System.out.println("<REM>");
            } 
            // fall through
          case 125: break;
          case 33: 
            { System.out.println("XOR");
            } 
            // fall through
          case 126: break;
          case 34: 
            { System.out.println("<MOD>");
            } 
            // fall through
          case 127: break;
          case 35: 
            { System.out.println("<END>");
            } 
            // fall through
          case 128: break;
          case 36: 
            { System.out.println("<GET>");
            } 
            // fall through
          case 129: break;
          case 37: 
            { System.out.println("<FOR>");
            } 
            // fall through
          case 130: break;
          case 38: 
            { System.out.println("<PUT>");
            } 
            // fall through
          case 131: break;
          case 39: 
            { System.out.println("<NULL>");
            } 
            // fall through
          case 132: break;
          case 40: 
            { System.out.println("<TASK>");
            } 
            // fall through
          case 133: break;
          case 41: 
            { System.out.println("<THEN>");
            } 
            // fall through
          case 134: break;
          case 42: 
            { System.out.println("<BODY>");
            } 
            // fall through
          case 135: break;
          case 43: 
            { System.out.println("<EXIT>");
            } 
            // fall through
          case 136: break;
          case 44: 
            { System.out.println("<ELSE>");
            } 
            // fall through
          case 137: break;
          case 45: 
            { System.out.println("<GOTO>");
            } 
            // fall through
          case 138: break;
          case 46: 
            { System.out.println("<LOOP>");
            } 
            // fall through
          case 139: break;
          case 47: 
            { System.out.println("<CASE>");
            } 
            // fall through
          case 140: break;
          case 48: 
            { System.out.println("<WHEN>");
            } 
            // fall through
          case 141: break;
          case 49: 
            { System.out.println("<IMPORT, \""+yytext()+"\">");
            } 
            // fall through
          case 142: break;
          case 50: 
            { System.out.println("<ARRAY>");
            } 
            // fall through
          case 143: break;
          case 51: 
            { System.out.println("<DELAY>");
            } 
            // fall through
          case 144: break;
          case 52: 
            { System.out.println("<DELTA>");
            } 
            // fall through
          case 145: break;
          case 53: 
            { System.out.println("<RANGE>");
            } 
            // fall through
          case 146: break;
          case 54: 
            { System.out.println("<RAISE>");
            } 
            // fall through
          case 147: break;
          case 55: 
            { System.out.println("<BEGIN>");
            } 
            // fall through
          case 148: break;
          case 56: 
            { System.out.println("<ENTRY>");
            } 
            // fall through
          case 149: break;
          case 57: 
            { System.out.println("<ELSIF>");
            } 
            // fall through
          case 150: break;
          case 58: 
            { System.out.println("<FLOAT>");
            } 
            // fall through
          case 151: break;
          case 59: 
            { System.out.println("<UNTIL>");
            } 
            // fall through
          case 152: break;
          case 60: 
            { System.out.println("<WHILE>");
            } 
            // fall through
          case 153: break;
          case 61: 
            { System.out.println("<ACCESS>");
            } 
            // fall through
          case 154: break;
          case 62: 
            { System.out.println("<ACCEPT>");
            } 
            // fall through
          case 155: break;
          case 63: 
            { System.out.println("<DIGITS>");
            } 
            // fall through
          case 156: break;
          case 64: 
            { System.out.println("<OTHERS>");
            } 
            // fall through
          case 157: break;
          case 65: 
            { System.out.println("<RETURN>");
            } 
            // fall through
          case 158: break;
          case 66: 
            { System.out.println("<TAGGED>");
            } 
            // fall through
          case 159: break;
          case 67: 
            { System.out.println("<ENDIF>");
            } 
            // fall through
          case 160: break;
          case 68: 
            { System.out.println("<STRING>");
            } 
            // fall through
          case 161: break;
          case 69: 
            { System.out.println("<SELECT>");
            } 
            // fall through
          case 162: break;
          case 70: 
            { System.out.println("<PRAGMA>");
            } 
            // fall through
          case 163: break;
          case 71: 
            { System.out.println("<ALIASED>");
            } 
            // fall through
          case 164: break;
          case 72: 
            { System.out.println("<DECLARE>");
            } 
            // fall through
          case 165: break;
          case 73: 
            { System.out.println("<RENAMES>");
            } 
            // fall through
          case 166: break;
          case 74: 
            { System.out.println("<REVERSE>");
            } 
            // fall through
          case 167: break;
          case 75: 
            { System.out.println("<REQUEUE>");
            } 
            // fall through
          case 168: break;
          case 76: 
            { System.out.println("<BOOLEAN>");
            } 
            // fall through
          case 169: break;
          case 77: 
            { System.out.println("<GENERIC>");
            } 
            // fall through
          case 170: break;
          case 78: 
            { System.out.println("<INTEGER>");
            } 
            // fall through
          case 171: break;
          case 79: 
            { System.out.println("<LIMITED>");
            } 
            // fall through
          case 172: break;
          case 80: 
            { System.out.println("<SUBTYPE>");
            } 
            // fall through
          case 173: break;
          case 81: 
            { System.out.println("<PRIVATE>");
            } 
            // fall through
          case 174: break;
          case 82: 
            { System.out.println("<SEPARATE>");
            } 
            // fall through
          case 175: break;
          case 83: 
            { System.out.println("<FUNCTION>");
            } 
            // fall through
          case 176: break;
          case 84: 
            { System.out.println("<PUT_LINE>");
            } 
            // fall through
          case 177: break;
          case 85: 
            { System.out.println("<CONSTANT>");
            } 
            // fall through
          case 178: break;
          case 86: 
            { System.out.println("<TERMINATE>");
            } 
            // fall through
          case 179: break;
          case 87: 
            { System.out.println("<EXCEPTION>");
            } 
            // fall through
          case 180: break;
          case 88: 
            { System.out.println("<INTERFACE>");
            } 
            // fall through
          case 181: break;
          case 89: 
            { System.out.println("<PROTECTED>");
            } 
            // fall through
          case 182: break;
          case 90: 
            { System.out.println("<PROCEDURE>");
            } 
            // fall through
          case 183: break;
          case 91: 
            { System.out.println("<CHARACTER>");
            } 
            // fall through
          case 184: break;
          case 92: 
            { System.out.println("<OVERRIDING>");
            } 
            // fall through
          case 185: break;
          case 93: 
            { System.out.println("<SYNCHRONIZED>");
            } 
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
