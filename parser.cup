import java_cup.runtime.*;
import java.util.ArrayList;


parser code
{:
    public int cont = 0;
    
    public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis " + s.value + " Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error NR de sintaxis " + s.value + " Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

:}





// Terminales
terminal PROCEDURE, FUNCTION, RETURN, ARRAY, CONSTANT, IS, BEGIN, END, IF, THEN, ELSE, ELSIF, FOR, IN, OUT, WHILE, LOOP;
terminal AND,OR,XOR,FALSE,TRUE,EXIT,WHEN,NULL,GET,PUT,PUT_LINE, RANGE, OF;
terminal INTEGER,FLOAT,BOOLEAN,CHARACTER,STRINGTYPE;
terminal ASIGNACION,DECLARACION,OPREL,OPMULTIPLICACION,OPSUMA,PARDER,PARIZQ,CAJA,SEMICOLON,COMA, DOSPUNTOS;
terminal String ID;
terminal Integer NUM;
terminal STRING,CHAR;

// No Terminales
non terminal cuerpo_principal, comienza_cuerpo_principal;
non terminal parametros, datos_parametros, tipo_parametro, tipo_declaracion, declarar_procedimiento, declarar_funcion, llamar_funcion, funcion, declarar_variable;
non terminal declaracion_arreglo, dimension_arreglo;
non terminal tipo_variable, listar_ids;
non terminal codigo;
non terminal condicion, operando, expresion_booleana;
non terminal ciclo_loop, ciclo_for, ciclo_while, salir_ciclo, bloque_if, bloque_elsif, bloque_else, procedimiento;
non terminal expresion_aritmetica, T, E, F;
non terminal asignacion,get,put,put_line;

// Precedencia de Operadores - de menor a mayor
precedence left OPREL;
precedence left OPSUMA;
precedence left OPMULTIPLICACION;

// Gramatica

start with cuerpo_principal;

/* Cuerpo principal contiene el procedimiento o la funcion principal.
Declaramos primero un procedure y una function en su forma principal, seguidamente
se declaran las posiciones en las que se podrian encontrar errores.*/
cuerpo_principal    ::= PROCEDURE ID parametros IS comienza_cuerpo_principal 
                    | FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal
                    ; 

/*Este es el área donde comenzará el codigo del programa.
Nuevamente se declaran las formas correctas primero seguido de las formas con errores.*/
comienza_cuerpo_principal   ::= tipo_declaracion BEGIN codigo END ID SEMICOLON
                            | asignacion BEGIN codigo END ID SEMICOLON
                            | BEGIN codigo END ID SEMICOLON
                            | tipo_declaracion error codigo END ID SEMICOLON
                            | tipo_declaracion BEGIN codigo error ID SEMICOLON
                            | tipo_declaracion BEGIN codigo END error SEMICOLON
                            | tipo_declaracion BEGIN codigo END ID error
                            ;
/*Esta es la forma en la que ese presenta el código. Se podrá poner cualquiera de estas opciones
para comenzar a declarar código.*/
codigo  ::= ciclo_for codigo
        | ciclo_for
        | ciclo_while codigo
        | ciclo_while
        | ciclo_loop codigo
        | ciclo_loop
        | bloque_if codigo
        | bloque_if
        | get codigo
        | get
        | put codigo
        | put
        | put_line codigo
        | put_line
        | asignacion codigo
        | asignacion
        | llamar_funcion codigo
        | llamar_funcion
        ;

/*Estos son los parámetros para procedimientos y funciones.
Primero se declara la forma correcta seguido de las producciones de error.*/
parametros     ::=  PARIZQ datos_parametros PARDER
                | PARIZQ PARDER
                | PARIZQ datos_parametros error
                ;

/*Estos son los datos de los paáametros. Listamos primero las formas correctas para
colocar parámetros, y luego los errores.*/
datos_parametros    ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros
                    | listar_ids DECLARACION tipo_parametro tipo_variable
                    | listar_ids error tipo_parametro tipo_variable SEMICOLON datos_parametros
                    | listar_ids error tipo_parametro tipo_variable
                    ;
// Aquí se definen los tipos de parámetros que pueden ser IN, OUT, IN OUT o ninguno.
tipo_parametro  ::= IN
                | OUT
                | IN OUT
                |
                ;

/*Aquí permitimos listar los identificadores. La razón por la cual se tiene listar_ids
y declaracion_variables es porque en declarar_variable se puede, valga la redundancia,
declarar variables.*/
listar_ids  ::= ID COMA listar_ids
            | ID
            | error
            | error COMA listar_ids
            ;                    

/*Aquí tenemos los tipos de declaraciones que se pueden hacer en el programa. Se pone
procedimiento y declaracion procedimiento como dos diferentes porque la declaracion
de un procedimiento es mas corta que un procedimiento en si, igual que la funcion.*/
tipo_declaracion    ::= declarar_variable tipo_declaracion
                    | declarar_variable
                    | declarar_funcion tipo_declaracion
                    | declarar_funcion
                    | declarar_procedimiento tipo_declaracion
                    | declarar_procedimiento
                    | llamar_funcion tipo_declaracion
                    | llamar_funcion
                    | procedimiento tipo_declaracion
                    | procedimiento
                    | declaracion_arreglo tipo_declaracion
                    | declaracion_arreglo
                    ;

/*Aquí declaramos un procedimiento y luego están las versiones con error.*/
declarar_procedimiento  ::= PROCEDURE ID parametros SEMICOLON
                        | PROCEDURE error parametros SEMICOLON
                        | PROCEDURE ID parametros error
                        ;

procedimiento   ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON
                ;


declarar_funcion    ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON
                    | FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON
                    ;

/*Llamar Funcion: Estructura de la funcion + el Punto y Coma
Funcion: El ID (Nombre de la funcion) y la non terminal parametros 
(La cual incluye: PARIZQ datos_parametros PARDER).*/
llamar_funcion  ::= funcion SEMICOLON
                ;

funcion ::= ID parametros
        ;


/*Aquí tenemos la opción de declarara una o más variables. Luego están las versiones
con errores.*/
declarar_variable   ::= ID COMA declarar_variable
                    | ID DECLARACION tipo_variable SEMICOLON
                    | ID error
                    ;

/*Asignación de un valor a una variable*/
asignacion  ::= ID COMA asignacion
            | ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica SEMICOLON
            | ID DECLARACION tipo_variable ASIGNACION TRUE SEMICOLON
            | ID DECLARACION tipo_variable ASIGNACION FALSE SEMICOLON
            | ID DECLARACION tipo_variable ASIGNACION STRING SEMICOLON
            | ID DECLARACION tipo_variable ASIGNACION CHAR SEMICOLON
            | ID ASIGNACION expresion_aritmetica SEMICOLON
            | ID ASIGNACION TRUE SEMICOLON
            | ID ASIGNACION FALSE SEMICOLON
            | ID ASIGNACION STRING SEMICOLON
            | ID ASIGNACION CHAR SEMICOLON
            | ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON
            | ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON
            | ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON
            | ID DECLARACION CONSTANT tipo_variable ASIGNACION STRING SEMICOLON
            | ID DECLARACION CONSTANT tipo_variable ASIGNACION CHAR SEMICOLON
            ;

/*OPERACIONES ARITMETICA POST ORDER*/
expresion_aritmetica    ::= E 
                        ;
E   ::= OPSUMA T E 
    | T 
    ;

T   ::= OPMULTIPLICACION F T
    | F
    ;

F   ::= NUM 
    | PARIZQ expresion_aritmetica PARDER 
    ;


// Estos son los tipos de variable que se permiten en el programa.
tipo_variable   ::= INTEGER
                | FLOAT
                | BOOLEAN 
                | STRINGTYPE
                | CHARACTER
                | error 
                ;


/*================================BLOQUE IF======================================*/
/*BLOQUE IF: Estructura de un bloque if que internamente manda a llamar non terminales de
bloque elseif y del bloque else.*/
bloque_if   ::= IF condicion THEN codigo bloque_elsif bloque_else END IF SEMICOLON
            | IF condicion error codigo bloque_elsif bloque_else END IF 
            | IF condicion THEN codigo bloque_elsif bloque_else error IF SEMICOLON
            | IF condicion THEN codigo bloque_elsif bloque_else END error SEMICOLON
            | IF condicion THEN codigo bloque_elsif bloque_else END IF error
            ;

//CONDICION = Condicion interna para los ifs y los ciclos loop y while.
condicion   ::= expresion_booleana OR condicion
            | expresion_booleana AND condicion
            | expresion_booleana XOR condicion
            | expresion_booleana
            | error
            ;

//EXPRESION BOOLEANA: Expresion booleana en el que se comparan dos operandos con un operador relacional.
expresion_booleana  ::= operando OPREL operando
                    ;

//OPERANDO: Operandos Relacionales utilizados en la expresion booleana.
operando    ::= NUM
            | ID
            | funcion
            | NULL
            | error
            ;

/*Bloque ELSEIF y Bloque ELSE que vienen del bloque if. Este puede incluir vacio ya que
no en todos los ifs se requiere un bloque else if.*/
bloque_elsif    ::= ELSIF condicion THEN codigo bloque_elsif
                |
                | ELSIF condicion error codigo bloque_elsif
                ;

bloque_else ::= ELSE codigo
            |
            ;


/*==========================================CICLOS=====================================*/
/* Ciclos LOOP, While, y For */
ciclo_loop  ::= LOOP codigo salir_ciclo END LOOP SEMICOLON
            | LOOP codigo salir_ciclo error LOOP SEMICOLON
		    | LOOP codigo salir_ciclo END LOOP error
            ;

ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo END LOOP SEMICOLON
            | WHILE condicion error codigo salir_ciclo END LOOP SEMICOLON
            | WHILE condicion LOOP codigo salir_ciclo error LOOP SEMICOLON
            | WHILE condicion LOOP codigo salir_ciclo END error SEMICOLON
            | WHILE condicion LOOP codigo salir_ciclo END LOOP error
            ;

ciclo_for   ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR error IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID error NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID IN error DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID IN NUM error NUM LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID IN NUM DOSPUNTOS error LOOP codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID IN NUM DOSPUNTOS NUM error codigo salir_ciclo END LOOP SEMICOLON
            | FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo error LOOP SEMICOLON
            | FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END error SEMICOLON
            | FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP error
            ;

salir_ciclo ::= EXIT WHEN condicion
            | EXIT error condicion
            ;

/*==========================================PUT y GET===========================================*/
put ::= PUT PARIZQ NUM PARDER SEMICOLON
	| PUT PARIZQ STRING PARDER SEMICOLON
    | PUT PARIZQ CHAR PARDER SEMICOLON
    | PUT PARIZQ TRUE PARDER SEMICOLON
    | PUT PARIZQ FALSE PARDER SEMICOLON
    | PUT PARIZQ ID PARDER SEMICOLON
	| PUT error NUM PARDER SEMICOLON
	| PUT PARIZQ error PARDER SEMICOLON
	| PUT PARIZQ NUM error SEMICOLON
	| PUT PARIZQ NUM PARDER error
	;

put_line ::= PUT_LINE PARIZQ NUM PARDER SEMICOLON
	| PUT_LINE PARIZQ STRING PARDER SEMICOLON
    | PUT_LINE PARIZQ CHAR PARDER SEMICOLON
    | PUT_LINE PARIZQ TRUE PARDER SEMICOLON
    | PUT_LINE PARIZQ FALSE PARDER SEMICOLON
	| PUT_LINE error NUM PARDER SEMICOLON
	| PUT_LINE PARIZQ error PARDER SEMICOLON
	| PUT_LINE PARIZQ NUM error SEMICOLON
	| PUT_LINE PARIZQ NUM PARDER error
	;

get ::= GET PARIZQ ID PARDER SEMICOLON
	| GET error ID PARDER SEMICOLON
	| GET PARIZQ error PARDER SEMICOLON
	| GET PARIZQ ID error SEMICOLON
	| GET PARIZQ ID PARDER error
	;

/*==================================================ARREGLOS=========================================*/
declaracion_arreglo ::= ID DECLARACION ARRAY PARIZQ dimension_arreglo PARDER OF tipo_variable SEMICOLON
			        | ID error ARRAY PARIZQ dimension_arreglo PARDER OF tipo_variable SEMICOLON
			        | ID DECLARACION error PARIZQ dimension_arreglo PARDER OF tipo_variable SEMICOLON
			        | ID DECLARACION ARRAY error dimension_arreglo PARDER OF tipo_variable SEMICOLON
			        | ID DECLARACION ARRAY PARIZQ dimension_arreglo error OF tipo_variable SEMICOLON
			        | ID DECLARACION ARRAY PARIZQ dimension_arreglo PARDER error tipo_variable SEMICOLON
			        | ID DECLARACION ARRAY PARIZQ dimension_arreglo PARDER OF tipo_variable error
			        ;

dimension_arreglo   ::= tipo_variable COMA dimension_arreglo 
                    | tipo_variable
                    | NUM DOSPUNTOS NUM COMA dimension_arreglo 
                    | NUM DOSPUNTOS NUM
                    | tipo_variable RANGE CAJA
                    | tipo_variable RANGE error
                    ;

                        
                    


