import java_cup.runtime.*;

// Terminales
terminal PROCEDURE,FUNCTION,RETURN,ARRAY,CONSTANT,IS,DECLARE,BEGIN,END,IF,THEN,ELSE,ELSIF,FOR,IN,OUT,WHILE,LOOP;
terminal DO,AND,OR,XOR,NOT,MOD,EXPONENTES,FALSE,TRUE,EXIT,WHEN,PRIVATE,PROTECTED,NULL,GET,PUT,PUT_LINE;
terminal INTEGER,FLOAT,BOOLEAN,CHARACTER,STRINGTYPE;
terminal ASIGNACION,DECLARACION,OPREL,OPMULTIPLICACION,OPSUMA,PARDER,PARIZQ,CAJA,SEMICOLON,COMA;
terminal String ID;
terminal Integer NUM;
terminal STRING,CHAR;

// No Terminales
non terminal cuerpo_principal, comienza_cuerpo_principal;
non terminal parametros, datos_parametros, tipo_parametro, tipo_declaracion, declarar_procedimiento, declarar_funcion, declarar_variable;
non terminal tipo_variable, listar_ids;
non terminal codigo;
non terminal asignacion;

// Gramatica

/* Cuerpo principal contiene el procedimiento o la funcion principal.
Declaramos primero un procedure y una function en su forma principal, seguidamente
se declaran las posiciones en las que se podrian encontrar errores.*/
cuerpo_principal    ::= PROCEDURE ID parametros IS comienza_cuerpo_principal
                    | FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal
                    | error ID parametros IS comienza_cuerpo_principal
                    | PROCEDURE error parametros IS comienza_cuerpo_principal
                    | PROCEDURE ID parametros error comienza_cuerpo_principal
                    | error ID parametros RETURN tipo_variable IS comienza_cuerpo_principal //quitar esto
                    | FUNCTION error parametros RETURN tipo_variable IS comienza_cuerpo_principal
                    | FUNCTION ID parametros error tipo_variable IS comienza_cuerpo_principal
                    | FUNCTION ID parametros RETURN tipo_variable error comienza_cuerpo_principal
                    ; 

/*Este es el área donde comenzará el codigo del programa.
Nuevamente se declaran las formas correctas primero seguido de las formas con errores.*/
comienza_cuerpo_principal   ::= tipo_declaracion BEGIN codigo END ID SEMICOLON
                            | tipo_declaracion error codigo END ID SEMICOLON
                            | tipo_declaracion BEGIN codigo error ID SEMICOLON
                            | tipo_declaracion BEGIN codigo END error SEMICOLON
                            | tipo_declaracion BEGIN codigo END ID error
                            ;
/*Esta es la forma en la que ese presenta el código. Se podrá poner cualquiera de estas opciones
para comenzar a declarar código.*/
codigo  ::= ciclo_for codigo
        | ciclo_for
        | ciclo_while codigo
        | ciclo_while
        | ciclo_loop codigo
        | ciclo_loop
        | bloque_if codigo
        | bloque_if
        | get codigo
        | get
        | put codigo
        | put
        | put_line codigo
        | put_line
        | asignacion codigo
        | asignacion
        | llamar_subprograma codigo
        | llamar_subprograma
        ;

/*Estos son los parámetros para procedimientos y funciones.
Primero se declara la forma correcta seguido de las producciones de error.*/
paramateros     ::=  PARIZQ datos_parametros PARDER
                |
                | error datos_parametros PARDER
                | PARIZQ datos_parametros error
                ;

/*Estos son los datos de los paáametros. Listamos primero las formas correctas para
colocar parámetros, y luego los errores.*/
datos_parametros    ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros
                    | listar_ids DECLARACION tipo_parametro tipo_variable
                    | listar_ids error tipo_parametro tipo_variable SEMICOLON datos_parametros
                    | listar_ids error tipo_parametro tipo_variable
                    ;
// Aquí se definen los tipos de parámetros que pueden ser IN, OUT, IN OUT o ninguno.
tipo_parametro  ::= IN
                | OUT
                | IN OUT
                |
                ;

/*Aquí permitimos listar los identificadores. La razón por la cual se tiene listar_ids
y declaracion_variables es porque en declarar_variable se puede, valga la redundancia,
declarar variables.*/
listar_ids  ::= ID COMA listar_ids
            | ID
            | error
            | error COMA listar_ids
            ;                    

/*Aquí tenemos los tipos de declaraciones que se pueden hacer en el programa. Se pone
procedimiento y declaracion procedimiento como dos diferentes porque la declaracion
de un procedimiento es mas corta que un procedimiento en si, igual que la funcion.*/
tipo_declaracion    ::= declarar_variable tipo_declaracion
                    | declarar_variable
                    | declarar_funcion tipo_declaracion
                    | declarar_funcion
                    | declarar_procedimiento tipo_declaracion
                    | declarar_procedimiento
                    | funcion tipo_declaracion
                    | funcion
                    | procedimiento tipo_declaracion
                    | procedimiento
                    |
                    ;

/*Aquí declaramos un procedimiento y luego están las versiones con error.*/
declarar_procedimiento  ::= PROCEDURE ID parametros SEMICOLON
                        | error ID parametros SEMICOLON
                        | PROCEDURE error parametros SEMICOLON
                        | PROCEDURE ID paramateros error
                        ;

procedimiento   ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON
                | 
                ;


declarar_funcion    ::= FUNCTION ID parametros RETURN tipo_variable SEMICOLON
                    | FUNCTION error parametros RETURN tipo_variable SEMICOLON
                    ;

funcion ::=
        ;

/*Aquí tenemos la opción de declarara una o más variables. Luego están las versiones
con errores.*/
declarar_variable   ::= ID COMA declarar_variable
                    | ID DECLARACION tipo_variable SEMICOLON
                    | ID error declarar_variable
                    | ID error tipo_variable SEMICOLON
                    | ID DECLARACION tipo_variable error
                    ;



// Estos son los tipos de variable que se permiten en el programa.
tipo_variable   ::= INT
                | FLOAT
                | BOOLEAN 
                | STRING
                | CHAR
                | error 
                ;


                        
                    



