import java_cup.runtime.*;
import java.util.ArrayList;


parser code
{:
    public static Nodo padre;
    public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
    public int cont = 0;
    public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

:}

// Terminales
terminal PROCEDURE, FUNCTION, RETURN, ARRAY, CONSTANT, IS, BEGIN, END, IF, THEN, ELSE, ELSIF, FOR, IN, OUT, WHILE, LOOP;
terminal AND,OR,XOR,FALSE,TRUE,EXIT,WHEN,NULL,GET,PUT,PUT_LINE, RANGE, OF;
terminal INTEGER,FLOAT,BOOLEAN,CHARACTER,STRINGTYPE;
terminal ASIGNACION,DECLARACION,OPREL,OPMULTIPLICACION,OPSUMA,PARDER,PARIZQ,CAJA,SEMICOLON,COMA, DOSPUNTOS;
terminal String ID;
terminal String NUM;
terminal String STRING,CHAR;

// No Terminales
non terminal inicio, cuerpo_principal, comienza_cuerpo_principal;
non terminal parametros, datos_parametros, tipo_parametro, tipo_declaracion, declarar_procedimiento, declarar_funcion, llamar_funcion, funcion, declarar_variable;
non terminal declaracion_arreglo, dimension_arreglo;
non terminal tipo_variable, listar_ids;
non terminal codigo;
non terminal condicion, operando, expresion_booleana;
non terminal ciclo_loop, ciclo_for, ciclo_while, salir_ciclo, bloque_if, bloque_elsif, bloque_else, procedimiento;
non terminal expresion_aritmetica, E, E_prima, T, T_prima, F;
non terminal asignacion,get,put,put_line;

// Precedencia de Operadores - de menor a mayor
precedence left OPREL;
precedence left OPSUMA;
precedence left OPMULTIPLICACION;

// Gramatica

start with inicio;

/* Cuerpo principal contiene el procedimiento o la funcion principal.
Declaramos primero un procedure y una function en su forma principal, seguidamente
se declaran las posiciones en las que se podrian encontrar errores.*/
inicio  ::= cuerpo_principal:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("Inicio");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Se añaden el hijo*/
        nodo.AddHijo((Nodo) child1);

        /*Solamente en el cuerpo inicial se le asigna el nodo principal al padre.*/
        parser.padre = (Nodo) nodo;

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        ;

cuerpo_principal    ::= PROCEDURE:n1 ID:n2 parametros:child1 IS:n3 comienza_cuerpo_principal:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(n1.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n3.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    :}
                    | PROCEDURE:n1 ID:n2 IS:n3 comienza_cuerpo_principal:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(n1.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n3.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    :}
                    | FUNCTION:n1 ID:n2 parametros:child1 RETURN:n3 tipo_variable:child2 IS:n4 comienza_cuerpo_principal:child3 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(n1.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(n3.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n4.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    :}
                    ; 

/*Este es el área donde comenzará el codigo del programa.
Nuevamente se declaran las formas correctas primero seguido de las formas con errores.*/
comienza_cuerpo_principal   ::= tipo_declaracion:child1 BEGIN:n1 codigo:child2 END:n2 ID:n3 SEMICOLON:n4 {:
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(n1.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(n2.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(n3.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(n4.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            //nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child2);
                            //nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            //nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            :}

                            | BEGIN:n1 codigo:child1 END:n2 ID:n3 SEMICOLON:n4 {:
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(n1.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(n2.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(n3.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(n4.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            //nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child1);
                            //nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            //nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            :}
                            | 
                            ;
/*Esta es la forma en la que ese presenta el código. Se podrá poner cualquiera de estas opciones
para comenzar a declarar código.*/
codigo  ::= ciclo_for:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        | ciclo_for:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        | ciclo_while:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        | ciclo_while:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        | ciclo_loop:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | ciclo_loop:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | bloque_if:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | bloque_if:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | get:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | get:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | put:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | put:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | put_line:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | put_line:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | asignacion:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | asignacion:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | llamar_funcion:child1 codigo:child2 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | llamar_funcion:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        | RETURN expresion_aritmetica:child1 SEMICOLON
        {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("codigo");
            nodo.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        :}
        | RETURN expresion_aritmetica:child1 
        {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("codigo");
            nodo.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        :}
        ;

/*Estos son los parámetros para procedimientos y funciones.
Primero se declara la forma correcta seguido de las producciones de error.*/
parametros  ::=  PARIZQ:n1 datos_parametros:child1 PARDER:n2 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(n1.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(n2.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | PARIZQ:n1 PARDER:n2 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(n1.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(n2.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            :}
            ;

/*Estos son los datos de los paáametros. Listamos primero las formas correctas para
colocar parámetros, y luego los errores.*/
datos_parametros    ::= listar_ids:child1 DECLARACION:n1 tipo_parametro:child2 tipo_variable:child3 SEMICOLON datos_parametros:child4 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n1.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoSemicolon);
                    nodo.AddHijo((Nodo) child4);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | listar_ids:child1 DECLARACION:n1 tipo_parametro:child2 tipo_variable:child3 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n1.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | expresion_aritmetica:child1 
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setTag("datos_parametros");
                        nodo.setId(parser.cont);
                        parser.cont++;
                        
                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    :}
                    ;
// Aquí se definen los tipos de parámetros que pueden ser IN, OUT, IN OUT o ninguno.
tipo_parametro  ::= IN:n1 {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue(n1.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                :}
                | OUT:n2 {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue(n2.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                :}
                | IN:n1 OUT:n2 {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIn = new Nodo();
                nodoIn.setTag("IN");
                nodoIn.setValue(n1.toString());
                nodoIn.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoOut = new Nodo();
                nodoOut.setTag("OUT");
                nodoOut.setValue(n2.toString());
                nodoOut.setId(parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoIn);
                nodo.AddHijo(nodoOut);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                :}
                | {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                //nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                :}
                ;

/*Aquí permitimos listar los identificadores. La razón por la cual se tiene listar_ids
y declaracion_variables es porque en declarar_variable se puede, valga la redundancia,
declarar variables.*/
listar_ids  ::= ID:n1 COMA:n2 listar_ids:child1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(n2.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            :}
            | ID:n1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;


            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;                    

/*Aquí tenemos los tipos de declaraciones que se pueden hacer en el programa. Se pone
procedimiento y declaracion procedimiento como dos diferentes porque la declaracion
de un procedimiento es mas corta que un procedimiento en si, igual que la funcion.*/
tipo_declaracion    ::= declarar_variable:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    :}
                    | declarar_variable:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declarar_funcion:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declarar_funcion:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declarar_procedimiento:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declarar_procedimiento:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | llamar_funcion:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | llamar_funcion:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | procedimiento:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | procedimiento:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declaracion_arreglo:child1 tipo_declaracion:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | declaracion_arreglo:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | asignacion:child1 tipo_declaracion:child2
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setTag("tipo_declaracion");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);
                        nodo.AddHijo((Nodo) child2);

                        RESULT = nodo;
                        
                    :}
                    | asignacion:child1
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setTag("tipo_declaracion");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    :}
                    ;

/*Aquí declaramos un procedimiento y luego están las versiones con error.*/
declarar_procedimiento  ::= PROCEDURE:n1 ID:n2 parametros:child1 SEMICOLON {:
                        /*Se crea el nodo prinicipal*/
                        Nodo nodo = new Nodo();
                        nodo.setTag("declarar_procedimiento");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoProcedure = new Nodo();
                        nodoProcedure.setTag("PROCEDURE");
                        nodoProcedure.setValue(n1.toString());
                        nodoProcedure.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoId = new Nodo();
                        nodoId.setTag("ID");
                        nodoId.setValue(n2.toString());
                        nodoId.setId(parser.cont);
                        parser.cont++;

                         /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoSemicolon = new Nodo();
                        nodoSemicolon.setTag("SEMICOLON");
                        nodoSemicolon.setValue(nodoSemicolon.toString());
                        nodoSemicolon.setId(parser.cont);
                        parser.cont++;


                        /*Se añaden los hijos*/
                        nodo.AddHijo(nodoProcedure);
                        nodo.AddHijo(nodoId);
                        nodo.AddHijo((Nodo) child1);
                       // nodo.AddHijo(nodoSemicolon);

                        /*Asignar el nodo al RESULT para continuar el recorrido*/
                        RESULT = nodo;

                        :}
                        ;

procedimiento   ::= PROCEDURE ID:n2 parametros:child1 IS tipo_declaracion:child2 BEGIN codigo:child3 END ID:n6 SEMICOLON {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("procedimiento");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoProcedure = new Nodo();
                nodoProcedure.setTag("PROCEDURE");
                nodoProcedure.setValue(nodoProcedure.toString());
                nodoProcedure.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo();
                nodoId.setTag("ID");
                nodoId.setValue(n2.toString());
                nodoId.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo();
                nodoId2.setTag("ID");
                nodoId2.setValue(n6.toString());
                nodoId2.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIs = new Nodo();
                nodoIs.setTag("IS");
                nodoIs.setValue(nodoIs.toString());
                nodoIs.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoBegin = new Nodo();
                nodoBegin.setTag("BEGIN");
                nodoBegin.setValue(nodoBegin.toString());
                nodoBegin.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoEnd = new Nodo();
                nodoEnd.setTag("END");
                nodoEnd.setValue(nodoEnd.toString());
                nodoEnd.setId(parser.cont);
                parser.cont++;
                

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;


                /*Se añaden los hijos*/
                nodo.AddHijo(nodoProcedure);
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoIs);
                nodo.AddHijo((Nodo) child2);
                //nodo.AddHijo(nodoBegin);
                nodo.AddHijo((Nodo) child3);
                //nodo.AddHijo(nodoEnd);
                nodo.AddHijo(nodoId2);
                //nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                :}
                |  PROCEDURE ID:n2 parametros:child1 IS BEGIN codigo:child2 END ID:n6 SEMICOLON
                {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("procedimiento");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoProcedure = new Nodo();
                nodoProcedure.setTag("PROCEDURE");
                nodoProcedure.setValue(nodoProcedure.toString());
                nodoProcedure.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo();
                nodoId.setTag("ID");
                nodoId.setValue(n2.toString());
                nodoId.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo();
                nodoId2.setTag("ID");
                nodoId2.setValue(n6.toString());
                nodoId2.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIs = new Nodo();
                nodoIs.setTag("IS");
                nodoIs.setValue(nodoIs.toString());
                nodoIs.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoBegin = new Nodo();
                nodoBegin.setTag("BEGIN");
                nodoBegin.setValue(nodoBegin.toString());
                nodoBegin.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoEnd = new Nodo();
                nodoEnd.setTag("END");
                nodoEnd.setValue(nodoEnd.toString());
                nodoEnd.setId(parser.cont);
                parser.cont++;
                

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;


                /*Se añaden los hijos*/
                nodo.AddHijo(nodoProcedure);
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoIs);
                //nodo.AddHijo(nodoBegin);
                nodo.AddHijo((Nodo) child2);
                //nodo.AddHijo(nodoEnd);
                nodo.AddHijo(nodoId2);
                //nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;                
                :}
                ;


declarar_funcion    ::= FUNCTION ID:n1 parametros:child1 RETURN tipo_variable:child2 IS tipo_declaracion:child3 BEGIN codigo:child4 END ID:n2 SEMICOLON {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(n2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child4);
                    //nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    //nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | FUNCTION ID:n1 parametros:child1 RETURN tipo_variable:child2 IS BEGIN codigo:child3 END ID:n2 SEMICOLON {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(n2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    //nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    //nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    :}
                    ;

/*Llamar Funcion: Estructura de la funcion + el Punto y Coma
Funcion: El ID (Nombre de la funcion) y la non terminal parametros 
(La cual incluye: PARIZQ datos_parametros PARDER).*/
llamar_funcion  ::= funcion:child1 SEMICOLON {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("llamar_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                :}
                ;

funcion ::= ID:n1 parametros:child1 {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("funcion");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoId = new Nodo();
        nodoId.setTag("ID");
        nodoId.setValue(n1.toString());
        nodoId.setId(parser.cont);
        parser.cont++;

        
        /*Se añaden los hijos*/
        nodo.AddHijo(nodoId);
        nodo.AddHijo((Nodo) child1);
        

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        :}
        ;


/*Aquí tenemos la opción de declarara una o más variables. Luego están las versiones
con errores.*/
declarar_variable   ::= ID:n1 COMA:n2 declarar_variable:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n2.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | ID:n1 DECLARACION:n2 tipo_variable:child1 SEMICOLON {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n2.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                   

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoSemicolon);

                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    :}
                    ;

/*Asignación de un valor a una variable*/
asignacion  ::= ID:n1 COMA:n2 asignacion:child1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(n2.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 tipo_variable:child1 ASIGNACION:n3 expresion_aritmetica:child2 SEMICOLON:n4 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(n4.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 tipo_variable:child1 ASIGNACION:n3 TRUE:n4 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n4.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 tipo_variable:child1 ASIGNACION:n3 FALSE:n4 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n4.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            :}
            | ID:n1 DECLARACION:n2 tipo_variable:child1 ASIGNACION:n3 STRING:n4 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n4.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            :}
            | ID:n1 DECLARACION:n2 tipo_variable:child1 ASIGNACION:n3 CHAR:n4 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n4.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            :}
            | ID:n1 ASIGNACION:n2 expresion_aritmetica:child1 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child1);
           // nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 ASIGNACION:n2 TRUE:n3 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n3.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 ASIGNACION:n2 FALSE:n3 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n3.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 ASIGNACION:n2 STRING:n3 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n3.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 ASIGNACION:n2 CHAR:n3 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n3.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 CONSTANT:n3 tipo_variable:child1 ASIGNACION:n4 expresion_aritmetica:child2 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
           // nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 CONSTANT:n3 tipo_variable:child1 ASIGNACION:n4 TRUE:n5 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n5.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 CONSTANT:n3 tipo_variable:child1 ASIGNACION:n4 FALSE:n5 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n5.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 DECLARACION:n2 CONSTANT:n3 tipo_variable:child1 ASIGNACION:n4 STRING:n5 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n5.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            :}
            | ID:n1 DECLARACION:n2 CONSTANT:n3 tipo_variable:child1 ASIGNACION:n4 CHAR:n5 SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n5.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            :}
            ;

/*OPERACIONES ARITMETICA POST ORDER*/
expresion_aritmetica    ::= E:child1 
                        {:
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("expresion_aritmetica");
                            nodo.setId(parser.cont);
                            parser.cont++;

                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            
                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                        :}
                        ;
E   ::= T:child1 E_prima:child2 
    {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("E");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    :}
    ;

E_prima ::= OPSUMA:n1 T:child1 E_prima:child2 
        {:
            Nodo nodo = new Nodo();
            nodo.setTag("E_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoOPSUMA = new Nodo();
            nodoOPSUMA.setTag("OPSUMA");
            nodoOPSUMA.setValue(n1.toString());
            nodoOPSUMA.setId(parser.cont);
            parser.cont++;


            nodo.AddHijo(nodoOPSUMA);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        :}
        | 
        {:
            Nodo nodo = new Nodo();
            nodo.setId(parser.cont);
            nodo.setTag("VACIO");
            parser.cont++;

            RESULT = nodo;
        :}
        ;

T   ::= F:child1 T_prima:child2 
    {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("T");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    :}
    ;

T_prima ::= OPMULTIPLICACION:n1 F:child1 T_prima:child2 
        {:
            Nodo nodo = new Nodo();
            nodo.setTag("T_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoMult = new Nodo();
            nodoMult.setTag("OPMULTIPLICACION");
            nodoMult.setValue(n1.toString());
            nodoMult.setId(parser.cont);
            parser.cont++;

            nodo.AddHijo(nodoMult);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        :}
        |
        {:
            Nodo nodo = new Nodo();
            nodo.setTag("VACIO");
            nodo.setId(parser.cont);
            parser.cont++;

            RESULT = nodo;
        :}
        ;

F   ::= ID:n1 
    {:
        Nodo nodo = new Nodo();
        nodo.setTag("ID");
        nodo.setValue(n1.toString());
        nodo.setId(parser.cont);
        parser.cont++;

        RESULT = nodo;
    :}
    | NUM:n1 
    {:
        
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("NUM");
        //nodo.setValue("NUM");
        nodo.setValue(n1.toString());
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    :}
    | PARIZQ:n1 expresion_aritmetica:child1 PARDER:n2 
    {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n2.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo(nodoParder);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    :}
    | llamar_funcion:child1
    {:
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.AddHijo((Nodo) child1);

        RESULT = nodo;
    :}
    ;


// Estos son los tipos de variable que se permiten en el programa.
tipo_variable   ::= INTEGER  {: 
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                :}
                | FLOAT {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("FLOAT");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                :}
                | BOOLEAN {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("BOOLEAN");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                :}
                | STRINGTYPE {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("STRINGTYPE");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                :}
                | CHARACTER {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("CHARACTER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                :}
                ;


/*================================BLOQUE IF======================================*/
/*BLOQUE IF: Estructura de un bloque if que internamente manda a llamar non terminales de
bloque elseif y del bloque else.*/
bloque_if   ::= IF condicion:child1 THEN codigo:child2 bloque_elsif:child3 bloque_else:child4 END IF SEMICOLON {:

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_if");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf = new Nodo();
            nodoIf.setTag("IF");
            nodoIf.setValue(nodoIf.toString());
            nodoIf.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf2 = new Nodo();
            nodoIf2.setTag("IF");
            nodoIf2.setValue(nodoIf2.toString());
            nodoIf2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoThen = new Nodo();
            nodoThen.setTag("THEN");
            nodoThen.setValue(nodoThen.toString());
            nodoThen.setId(parser.cont);
            parser.cont++;


            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoIf);
            nodo.AddHijo((Nodo) child1);
            //nodo.AddHijo(nodoThen);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo((Nodo) child4);
            //nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoIf2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;

//CONDICION = Condicion interna para los ifs y los ciclos loop y while.
condicion   ::= expresion_booleana:child1 OR:n1 condicion:child2 {:

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoOr = new Nodo();
            nodoOr.setTag("OR");
            nodoOr.setValue(n1.toString());
            nodoOr.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoOr);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | expresion_booleana:child1 AND:n1 condicion:child2 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAnd = new Nodo();
            nodoAnd.setTag("AND");
            nodoAnd.setValue(n1.toString());
            nodoAnd.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAnd);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | expresion_booleana:child1 XOR:n1 condicion:child2 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoXor = new Nodo();
            nodoXor.setTag("XOR");
            nodoXor.setValue(n1.toString());
            nodoXor.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoXor);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | expresion_booleana:child1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("expresion_booleana");
            nodo.setId(parser.cont);
            parser.cont++;     

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;

//EXPRESION BOOLEANA: Expresion booleana en el que se comparan dos operandos con un operador relacional.
expresion_booleana  ::= operando:child1 OPREL:n1 operando:child2 {:

                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("expresion_booleana");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOPREL = new Nodo();
                    nodoOPREL.setTag("OPREL");
                    nodoOPREL.setValue(n1.toString());
                    nodoOPREL.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoOPREL);
                    nodo.AddHijo((Nodo) child2);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    ;

//OPERANDO: Operandos Relacionales utilizados en la expresion booleana.
operando    ::= NUM:n1 {:

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("NUM");
            nodo.setValue(n1.toString());
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | ID:n1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ID");
            nodo.setValue(n1.toString());
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            | funcion:child1 {:

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            
            :}
            | CHAR:n1
            {:
                Nodo nodo = new Nodo();
                nodo.setTag("CHAR");
                nodo.setValue(n1.toString());
                parser.cont++;

                RESULT = nodo;
            :}
            | NULL {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setValue("NULL");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            :}
            ;

/*Bloque ELSEIF y Bloque ELSE que vienen del bloque if. Este puede incluir vacio ya que
no en todos los ifs se requiere un bloque else if.*/
bloque_elsif    ::= ELSIF condicion:child1 THEN codigo:child2 bloque_elsif:child3 {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("bloque_elsif");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoElsif = new Nodo();
                nodoElsif.setTag("ELSIF");
                nodoElsif.setValue(nodoElsif.toString());
                nodoElsif.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoThen = new Nodo();
                nodoThen.setTag("THEN");
                nodoThen.setValue(nodoThen.toString());
                nodoThen.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                //nodo.AddHijo(nodoElsif);
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoThen);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                :}
                
                | {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                :}
                ;

bloque_else ::= ELSE codigo:child1 {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_else");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoElse = new Nodo();
            nodoElse.setTag("ELSE");
            nodoElse.setValue(nodoElse.toString());
            nodoElse.setId(parser.cont);
            parser.cont++;

            

            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoElse);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            :}
            | {:
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                //nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

            :}
            ;


/*==========================================CICLOS=====================================*/
/* Ciclos LOOP, While, y For */
ciclo_loop  ::= LOOP codigo:child1 salir_ciclo:child2 SEMICOLON END LOOP SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_loop");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;

ciclo_while ::= WHILE condicion:child1 LOOP codigo:child2 salir_ciclo:child3 SEMICOLON END LOOP SEMICOLON {:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_while");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhile = new Nodo();
            nodoWhile.setTag("WHILE");
            nodoWhile.setValue(nodoWhile.toString());
            nodoWhile.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoWhile);
            nodo.AddHijo((Nodo) child1);
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;

ciclo_for   ::= FOR ID:n1 IN:n2 NUM:n3 DOSPUNTOS:n4 NUM:n5 LOOP codigo:child1 salir_ciclo:child2 SEMICOLON END LOOP SEMICOLON{:
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_for");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFor = new Nodo();
            nodoFor.setTag("FOR");
            nodoFor.setValue(nodoFor.toString());
            nodoFor.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIn = new Nodo();
            nodoIn.setTag("IN");
            nodoIn.setValue(n2.toString());
            nodoIn.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum = new Nodo();
            nodoNum.setTag("NUM");
            nodoNum.setValue(n3.toString());
            nodoNum.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum2 = new Nodo();
            nodoNum2.setTag("NUM");
            nodoNum2.setValue(n5.toString());
            nodoNum2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDosPuntos = new Nodo();
            nodoDosPuntos.setTag("DOSPUNTOS");
            nodoDosPuntos.setValue(n4.toString());
            nodoDosPuntos.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoFor);
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoIn);
            nodo.AddHijo(nodoNum);
            nodo.AddHijo(nodoDosPuntos);
            nodo.AddHijo(nodoNum2);
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
           // nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            :}
            ;

salir_ciclo ::= EXIT WHEN condicion:child1 {:

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("salir_ciclo");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoExit = new Nodo();
            nodoExit.setTag("EXIT");
            nodoExit.setValue(nodoExit.toString());
            nodoExit.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhen = new Nodo();
            nodoWhen.setTag("WHEN");
            nodoWhen.setValue(nodoWhen.toString());
            nodoWhen.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoExit);
            //nodo.AddHijo(nodoWhen);
            nodo.AddHijo((Nodo) child1);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            :}
            ;

/*==========================================PUT y GET===========================================*/
put ::= PUT PARIZQ:n1 NUM:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoNum = new Nodo();
    nodoNum.setTag("NUM");
    nodoNum.setValue(n2.toString());
    nodoNum.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoNum);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    :}
	| PUT PARIZQ:n1 STRING:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoString = new Nodo();
    nodoString.setTag("STRING");
    nodoString.setValue(n2.toString().replaceAll("\"", ""));
    nodoString.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoString);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    :}
    | PUT PARIZQ:n1 CHAR:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoChar = new Nodo();
    nodoChar.setTag("CHAR");
    nodoChar.setValue(n2.toString());
    nodoChar.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoChar);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    :}
    | PUT PARIZQ:n1 TRUE:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

     /*Nuevo Nodo: TERMINAL*/
    Nodo nodoTrue = new Nodo();
    nodoTrue.setTag("TRUE");
    nodoTrue.setValue(n2.toString());
    nodoTrue.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoTrue);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    :}
    | PUT PARIZQ:n1 FALSE:n2 PARDER:n3 SEMICOLON {:
     /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoFalse = new Nodo();
    nodoFalse.setTag("FALSE");
    nodoFalse.setValue(n2.toString());
    nodoFalse.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoFalse);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    :}
    | PUT PARIZQ:n1 ID:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(n2.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    :}
	;

put_line ::= PUT_LINE PARIZQ:n1 NUM:n2 PARDER:n3 SEMICOLON {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoNum = new Nodo();
        nodoNum.setTag("NUM");
        nodoNum.setValue(n2.toString());
        nodoNum.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoNum);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
	    | PUT_LINE PARIZQ:n1 STRING:n2 PARDER:n3 SEMICOLON {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoString = new Nodo();
        nodoString.setTag("STRING");
        nodoString.setValue(n2.toString().replaceAll("\"", ""));
        nodoString.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoString);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        :}
        | PUT_LINE PARIZQ:n1 CHAR:n2 PARDER:n3 SEMICOLON {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoChar = new Nodo();
        nodoChar.setTag("CHAR");
        nodoChar.setValue(n2.toString());
        nodoChar.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoChar);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        :}
        | PUT_LINE PARIZQ:n1 TRUE:n2 PARDER:n3 SEMICOLON {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoTrue = new Nodo();
        nodoTrue.setTag("TRUE");
        nodoTrue.setValue(n2.toString());
        nodoTrue.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoTrue);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        :}
        | PUT_LINE PARIZQ:n1 FALSE:n2 PARDER:n3 SEMICOLON {:
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoFalse = new Nodo();
        nodoFalse.setTag("FALSE");
        nodoFalse.setValue(n2.toString());
        nodoFalse.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoFalse);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        :}
	    ;

get ::= GET PARIZQ:n1 ID:n2 PARDER:n3 SEMICOLON {:
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("get");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoGet = new Nodo();
    nodoGet.setTag("GET");
    nodoGet.setValue(nodoGet.toString());
    nodoGet.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(n2.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoGet);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    :}
	;

/*==================================================ARREGLOS=========================================*/
declaracion_arreglo ::= ID:n1 DECLARACION:n2 ARRAY PARIZQ:n3 dimension_arreglo:child1 PARDER:n4 OF tipo_variable:child2 SEMICOLON {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declaracion_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n2.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoArray = new Nodo();
                    nodoArray.setTag("ARRAY");
                    nodoArray.setValue(nodoArray.toString());
                    nodoArray.setId(parser.cont);
                    parser.cont++;

                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParizq = new Nodo();
                    nodoParizq.setTag("PARIZQ");
                    nodoParizq.setValue(n3.toString());
                    nodoParizq.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParder = new Nodo();
                    nodoParder.setTag("PARDER");
                    nodoParder.setValue(n4.toString());
                    nodoParder.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOF = new Nodo();
                    nodoOF.setTag("OF");
                    nodoOF.setValue(nodoOF.toString());
                    nodoOF.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    //nodo.AddHijo(nodoArray);
                    nodo.AddHijo(nodoParizq);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoParder);
                   // nodo.AddHijo(nodoOF);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoSemicolon);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    :}
			        ;

dimension_arreglo   ::= tipo_variable:child1 COMA:n1 dimension_arreglo:child2 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n1.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :} 
                    | tipo_variable:child1 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | NUM:n1 DOSPUNTOS:n2 NUM:n3 COMA:n4 dimension_arreglo:child1  {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(n1.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(n3.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(n2.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n4.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    


                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    | NUM:n1 DOSPUNTOS:n2 NUM:n3 {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(n1.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(n3.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(n2.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    :}
                    | tipo_variable:child1 RANGE CAJA {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoRange = new Nodo();
                    nodoRange.setTag("RANGE");
                    nodoRange.setValue(nodoRange.toString());
                    nodoRange.setId(parser.cont);
                    parser.cont++;


                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoCaja = new Nodo();
                    nodoCaja.setTag("CAJA");
                    nodoCaja.setValue(nodoCaja.toString());
                    nodoCaja.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoRange);
                    //nodo.AddHijo(nodoCaja);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    :}
                    ;

                        
                    


