
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\350\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\007\000\002\004\002\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\020\004\000\002\020\003\000\002\020" +
    "\004\000\002\020\003\000\002\020\004\000\002\020\003" +
    "\000\002\020\004\000\002\020\003\000\002\020\004\000" +
    "\002\020\003\000\002\020\004\000\002\020\003\000\002" +
    "\020\004\000\002\020\003\000\002\020\004\000\002\020" +
    "\003\000\002\020\005\000\002\020\004\000\002\005\005" +
    "\000\002\005\004\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\006\000\002\006\006\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\002\000\002\007\004" +
    "\000\002\007\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\004\000\002\010\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\033\014\000\002\033\014\000\002\033" +
    "\013\000\002\033\013\000\002\012\016\000\002\012\016" +
    "\000\002\012\016\000\002\012\016\000\002\012\016\000" +
    "\002\012\016\000\002\012\016\000\002\012\016\000\002" +
    "\012\015\000\002\012\015\000\002\012\015\000\002\012" +
    "\015\000\002\012\015\000\002\012\015\000\002\012\015" +
    "\000\002\012\015\000\002\013\004\000\002\013\004\000" +
    "\002\014\004\000\002\015\005\000\002\015\005\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\042" +
    "\005\000\002\042\005\000\002\042\010\000\002\042\010" +
    "\000\002\042\010\000\002\042\010\000\002\042\010\000" +
    "\002\042\010\000\002\042\010\000\002\042\010\000\002" +
    "\042\010\000\002\042\010\000\002\042\010\000\002\042" +
    "\010\000\002\042\010\000\002\042\006\000\002\042\006" +
    "\000\002\042\006\000\002\042\006\000\002\042\006\000" +
    "\002\042\006\000\002\042\006\000\002\042\006\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\042" +
    "\011\000\002\042\011\000\002\042\011\000\002\042\011" +
    "\000\002\042\011\000\002\042\011\000\002\042\011\000" +
    "\002\042\011\000\002\042\011\000\002\042\011\000\002" +
    "\042\011\000\002\042\011\000\002\042\011\000\002\042" +
    "\011\000\002\042\011\000\002\042\011\000\002\042\011" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\030\013\000\002\030\013" +
    "\000\002\030\013\000\002\030\013\000\002\030\013\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\023\005\000\002\023\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\031\007\000\002\031\002\000" +
    "\002\031\007\000\002\032\004\000\002\032\002\000\002" +
    "\024\011\000\002\024\011\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\026\013\000\002\026\013" +
    "\000\002\026\013\000\002\026\013\000\002\026\013\000" +
    "\002\026\013\000\002\025\017\000\002\025\017\000\002" +
    "\025\017\000\002\025\017\000\002\025\017\000\002\025" +
    "\017\000\002\025\017\000\002\025\017\000\002\025\017" +
    "\000\002\025\017\000\002\025\017\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\007\000\002\044" +
    "\007\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\007\000\002\044" +
    "\007\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\007\000\002\043\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\010\003\006\004\005\005\007\001\002\000" +
    "\004\002\000\001\002\000\006\003\u026e\055\u026d\001\002" +
    "\000\004\055\u0263\001\002\000\006\003\013\055\012\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\004\050\015\001\002\000\004\050\015\001\002\000" +
    "\004\006\077\001\002\000\016\003\025\047\026\050\022" +
    "\055\023\056\016\061\024\001\002\000\024\003\uff6a\012" +
    "\uff6a\015\uff6a\016\uff6a\031\uff6a\045\uff6a\046\uff6a\047\uff6a" +
    "\051\uff6a\001\002\000\006\003\076\051\075\001\002\000" +
    "\006\003\050\043\047\001\002\000\024\003\uff67\012\uff67" +
    "\015\uff67\016\uff67\031\uff67\045\uff67\046\uff67\047\uff67\051" +
    "\uff67\001\002\000\012\050\022\055\034\056\016\061\024" +
    "\001\002\000\020\003\uffc4\043\uffc4\045\uff69\046\uff69\047" +
    "\uff69\050\015\052\043\001\002\000\024\003\uff68\012\uff68" +
    "\015\uff68\016\uff68\031\uff68\045\uff68\046\uff68\047\uff68\051" +
    "\uff68\001\002\000\010\003\uffc3\043\uffc3\052\040\001\002" +
    "\000\026\003\uffd4\006\uffd4\010\uffd4\014\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\044\uffd4\051\uffd4\001\002\000\010" +
    "\045\033\046\032\047\uffce\001\002\000\004\047\031\001" +
    "\002\000\026\003\uffd5\006\uffd5\010\uffd5\014\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\044\uffd5\051\uffd5\001\002\000" +
    "\012\050\022\055\034\056\016\061\024\001\002\000\012" +
    "\050\022\055\034\056\016\061\024\001\002\000\026\003" +
    "\uff69\012\uff69\015\uff69\016\uff69\031\uff69\045\uff69\046\uff69" +
    "\047\uff69\050\015\051\uff69\001\002\000\024\003\uff6b\012" +
    "\uff6b\015\uff6b\016\uff6b\031\uff6b\045\uff6b\046\uff6b\047\uff6b" +
    "\051\uff6b\001\002\000\022\003\uff9d\014\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\044\uff9d\051\uff9d\001\002\000\024" +
    "\003\uff6c\012\uff6c\015\uff6c\016\uff6c\031\uff6c\045\033\046" +
    "\uff6c\047\uff6c\051\uff6c\001\002\000\006\003\025\055\041" +
    "\001\002\000\010\003\uffc4\043\uffc4\052\043\001\002\000" +
    "\006\003\uffc5\043\uffc5\001\002\000\006\003\025\055\041" +
    "\001\002\000\006\003\uffc6\043\uffc6\001\002\000\010\045" +
    "\033\046\032\047\046\001\002\000\024\003\uff66\012\uff66" +
    "\015\uff66\016\uff66\031\uff66\045\uff66\046\uff66\047\uff66\051" +
    "\uff66\001\002\000\020\003\053\020\052\021\051\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\001\002\000\020\003\053\020" +
    "\052\021\051\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002" +
    "\000\012\036\uffcc\037\uffcc\040\uffcc\041\uffcc\001\002\000" +
    "\016\003\066\021\065\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\001\002\000\014\021\064\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\001\002\000\012\036\055\037\057\040\061\041\056" +
    "\001\002\000\014\003\uff65\010\uff65\042\uff65\047\uff65\051" +
    "\uff65\001\002\000\014\003\uff62\010\uff62\042\uff62\047\uff62" +
    "\051\uff62\001\002\000\014\003\uff64\010\uff64\042\uff64\047" +
    "\uff64\051\uff64\001\002\000\006\047\uffcf\051\062\001\002" +
    "\000\014\003\uff63\010\uff63\042\uff63\047\uff63\051\uff63\001" +
    "\002\000\014\003\025\050\022\055\023\056\016\061\024" +
    "\001\002\000\004\047\uffd2\001\002\000\012\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\001\002\000\012\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\001\002\000\012\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\001\002\000\012\036\055\037\057\040\061" +
    "\041\056\001\002\000\010\003\072\047\uffd0\051\071\001" +
    "\002\000\014\003\025\050\022\055\023\056\016\061\024" +
    "\001\002\000\014\003\025\050\022\055\023\056\016\061" +
    "\024\001\002\000\004\047\uffd1\001\002\000\004\047\uffd3" +
    "\001\002\000\052\003\uff9f\004\uff9f\005\uff9f\006\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\022\uff9f" +
    "\023\uff9f\031\uff9f\034\uff9f\035\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\051\uff9f\055\uff9f\001\002\000\052\003\uff9e\004\uff9e" +
    "\005\uff9e\006\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\022\uff9e\023\uff9e\031\uff9e\034\uff9e\035\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\051\uff9e\055\uff9e\001\002\000" +
    "\012\036\055\037\057\040\061\041\056\001\002\000\004" +
    "\010\101\001\002\000\016\002\uffec\003\111\004\103\005" +
    "\113\011\114\055\110\001\002\000\014\003\uffbd\004\103" +
    "\005\113\011\uffbd\055\110\001\002\000\006\003\u0239\055" +
    "\u0238\001\002\000\014\003\uffbb\004\103\005\113\011\uffbb" +
    "\055\110\001\002\000\014\003\uffb9\004\103\005\113\011" +
    "\uffb9\055\110\001\002\000\014\003\uffbf\004\103\005\113" +
    "\011\uffbf\055\110\001\002\000\014\003\uffb7\004\103\005" +
    "\113\011\uffb7\055\110\001\002\000\014\003\u022a\042\u0112" +
    "\043\u0229\050\015\052\u0228\001\002\000\022\006\124\013" +
    "\126\017\136\022\121\023\122\034\141\035\131\055\127" +
    "\001\002\000\004\002\ufff5\001\002\000\006\003\u01d5\055" +
    "\u01d4\001\002\000\022\006\124\013\126\017\136\022\121" +
    "\023\122\034\141\035\131\055\127\001\002\000\014\003" +
    "\uffc1\004\103\005\113\011\uffc1\055\110\001\002\000\006" +
    "\003\117\011\120\001\002\000\022\006\124\013\126\017" +
    "\136\022\121\023\122\034\141\035\131\055\127\001\002" +
    "\000\022\006\124\013\126\017\136\022\121\023\122\034" +
    "\141\035\131\055\127\001\002\000\012\003\202\033\206" +
    "\055\200\056\177\001\002\000\022\006\124\013\126\017" +
    "\136\022\121\023\122\034\141\035\131\055\127\001\002" +
    "\000\006\003\u0193\012\u0194\001\002\000\012\050\022\055" +
    "\034\056\016\061\024\001\002\000\034\003\uffdc\006\124" +
    "\012\uffdc\013\126\015\uffdc\016\uffdc\017\136\022\121\023" +
    "\122\031\uffdc\034\141\035\131\055\127\001\002\000\012" +
    "\003\202\033\206\055\200\056\177\001\002\000\014\003" +
    "\u0114\042\u0112\043\u0113\050\015\052\u0111\001\002\000\034" +
    "\003\uffda\006\124\012\uffda\013\126\015\uffda\016\uffda\017" +
    "\136\022\121\023\122\031\uffda\034\141\035\131\055\127" +
    "\001\002\000\006\003\336\050\337\001\002\000\034\003" +
    "\uffe2\006\124\012\uffe2\013\126\015\uffe2\016\uffe2\017\136" +
    "\022\121\023\122\031\uffe2\034\141\035\131\055\127\001" +
    "\002\000\034\003\uffe4\006\124\012\uffe4\013\126\015\uffe4" +
    "\016\uffe4\017\136\022\121\023\122\031\uffe4\034\141\035" +
    "\131\055\127\001\002\000\034\003\uffe0\006\124\012\uffe0" +
    "\013\126\015\uffe0\016\uffe0\017\136\022\121\023\122\031" +
    "\uffe0\034\141\035\131\055\127\001\002\000\034\003\uffe6" +
    "\006\124\012\uffe6\013\126\015\uffe6\016\uffe6\017\136\022" +
    "\121\023\122\031\uffe6\034\141\035\131\055\127\001\002" +
    "\000\006\003\163\055\162\001\002\000\034\003\uffd8\006" +
    "\124\012\uffd8\013\126\015\uffd8\016\uffd8\017\136\022\121" +
    "\023\122\031\uffd8\034\141\035\131\055\127\001\002\000" +
    "\034\003\uffde\006\124\012\uffde\013\126\015\uffde\016\uffde" +
    "\017\136\022\121\023\122\031\uffde\034\141\035\131\055" +
    "\127\001\002\000\006\003\142\050\143\001\002\000\004" +
    "\055\155\001\002\000\006\003\145\055\144\001\002\000" +
    "\006\003\151\047\150\001\002\000\004\047\146\001\002" +
    "\000\004\051\147\001\002\000\034\003\uff1c\006\uff1c\012" +
    "\uff1c\013\uff1c\015\uff1c\016\uff1c\017\uff1c\022\uff1c\023\uff1c" +
    "\031\uff1c\034\uff1c\035\uff1c\055\uff1c\001\002\000\006\003" +
    "\154\051\153\001\002\000\004\051\152\001\002\000\034" +
    "\003\uff1b\006\uff1b\012\uff1b\013\uff1b\015\uff1b\016\uff1b\017" +
    "\uff1b\022\uff1b\023\uff1b\031\uff1b\034\uff1b\035\uff1b\055\uff1b" +
    "\001\002\000\034\003\uff1e\006\uff1e\012\uff1e\013\uff1e\015" +
    "\uff1e\016\uff1e\017\uff1e\022\uff1e\023\uff1e\031\uff1e\034\uff1e" +
    "\035\uff1e\055\uff1e\001\002\000\034\003\uff1a\006\uff1a\012" +
    "\uff1a\013\uff1a\015\uff1a\016\uff1a\017\uff1a\022\uff1a\023\uff1a" +
    "\031\uff1a\034\uff1a\035\uff1a\055\uff1a\001\002\000\004\047" +
    "\156\001\002\000\004\051\157\001\002\000\034\003\uff1d" +
    "\006\uff1d\012\uff1d\013\uff1d\015\uff1d\016\uff1d\017\uff1d\022" +
    "\uff1d\023\uff1d\031\uff1d\034\uff1d\035\uff1d\055\uff1d\001\002" +
    "\000\014\003\uffdf\012\uffdf\015\uffdf\016\uffdf\031\uffdf\001" +
    "\002\000\014\003\uffd9\012\uffd9\015\uffd9\016\uffd9\031\uffd9" +
    "\001\002\000\006\003\231\020\230\001\002\000\004\020" +
    "\164\001\002\000\004\056\165\001\002\000\004\053\166" +
    "\001\002\000\004\056\167\001\002\000\004\023\170\001" +
    "\002\000\022\006\124\013\126\017\136\022\121\023\122" +
    "\034\141\035\131\055\127\001\002\000\006\003\172\031" +
    "\174\001\002\000\004\032\226\001\002\000\004\051\222" +
    "\001\002\000\006\003\175\032\176\001\002\000\012\003" +
    "\202\033\206\055\200\056\177\001\002\000\012\003\202" +
    "\033\206\055\200\056\177\001\002\000\022\003\uff56\014" +
    "\uff56\023\uff56\024\uff56\025\uff56\026\uff56\044\uff56\051\uff56" +
    "\001\002\000\024\003\uff55\014\uff55\023\uff55\024\uff55\025" +
    "\uff55\026\uff55\044\uff55\050\015\051\uff55\001\002\000\020" +
    "\003\uff59\014\uff59\023\uff59\024\213\025\214\026\215\051" +
    "\uff59\001\002\000\022\003\uff54\014\uff54\023\uff54\024\uff54" +
    "\025\uff54\026\uff54\044\uff54\051\uff54\001\002\000\006\003" +
    "\uff36\051\uff36\001\002\000\022\003\uff53\014\uff53\023\uff53" +
    "\024\uff53\025\uff53\026\uff53\044\uff53\051\uff53\001\002\000" +
    "\006\003\210\044\207\001\002\000\022\003\uff52\014\uff52" +
    "\023\uff52\024\uff52\025\uff52\026\uff52\044\uff52\051\uff52\001" +
    "\002\000\012\003\202\033\206\055\200\056\177\001\002" +
    "\000\012\003\202\033\206\055\200\056\177\001\002\000" +
    "\020\003\uff57\014\uff57\023\uff57\024\uff57\025\uff57\026\uff57" +
    "\051\uff57\001\002\000\020\003\uff58\014\uff58\023\uff58\024" +
    "\uff58\025\uff58\026\uff58\051\uff58\001\002\000\012\003\202" +
    "\033\206\055\200\056\177\001\002\000\012\003\202\033" +
    "\206\055\200\056\177\001\002\000\012\003\202\033\206" +
    "\055\200\056\177\001\002\000\012\003\uff5a\014\uff5a\023" +
    "\uff5a\051\uff5a\001\002\000\012\003\uff5c\014\uff5c\023\uff5c" +
    "\051\uff5c\001\002\000\012\003\uff5b\014\uff5b\023\uff5b\051" +
    "\uff5b\001\002\000\006\003\uff34\051\uff34\001\002\000\004" +
    "\012\223\001\002\000\004\023\224\001\002\000\004\051" +
    "\225\001\002\000\034\003\uff40\006\uff40\012\uff40\013\uff40" +
    "\015\uff40\016\uff40\017\uff40\022\uff40\023\uff40\031\uff40\034" +
    "\uff40\035\uff40\055\uff40\001\002\000\012\003\202\033\206" +
    "\055\200\056\177\001\002\000\006\003\uff35\051\uff35\001" +
    "\002\000\006\003\245\056\244\001\002\000\004\056\232" +
    "\001\002\000\004\053\233\001\002\000\004\056\234\001" +
    "\002\000\004\023\235\001\002\000\022\006\124\013\126" +
    "\017\136\022\121\023\122\034\141\035\131\055\127\001" +
    "\002\000\006\003\172\031\174\001\002\000\004\051\240" +
    "\001\002\000\004\012\241\001\002\000\004\023\242\001" +
    "\002\000\004\051\243\001\002\000\034\003\uff3f\006\uff3f" +
    "\012\uff3f\013\uff3f\015\uff3f\016\uff3f\017\uff3f\022\uff3f\023" +
    "\uff3f\031\uff3f\034\uff3f\035\uff3f\055\uff3f\001\002\000\006" +
    "\003\257\053\260\001\002\000\004\053\246\001\002\000" +
    "\004\056\247\001\002\000\004\023\250\001\002\000\022" +
    "\006\124\013\126\017\136\022\121\023\122\034\141\035" +
    "\131\055\127\001\002\000\006\003\172\031\174\001\002" +
    "\000\004\051\253\001\002\000\004\012\254\001\002\000" +
    "\004\023\255\001\002\000\004\051\256\001\002\000\034" +
    "\003\uff3e\006\uff3e\012\uff3e\013\uff3e\015\uff3e\016\uff3e\017" +
    "\uff3e\022\uff3e\023\uff3e\031\uff3e\034\uff3e\035\uff3e\055\uff3e" +
    "\001\002\000\004\056\322\001\002\000\006\003\262\056" +
    "\261\001\002\000\006\003\272\023\273\001\002\000\004" +
    "\023\263\001\002\000\022\006\124\013\126\017\136\022" +
    "\121\023\122\034\141\035\131\055\127\001\002\000\006" +
    "\003\172\031\174\001\002\000\004\051\266\001\002\000" +
    "\004\012\267\001\002\000\004\023\270\001\002\000\004" +
    "\051\271\001\002\000\034\003\uff3c\006\uff3c\012\uff3c\013" +
    "\uff3c\015\uff3c\016\uff3c\017\uff3c\022\uff3c\023\uff3c\031\uff3c" +
    "\034\uff3c\035\uff3c\055\uff3c\001\002\000\022\006\124\013" +
    "\126\017\136\022\121\023\122\034\141\035\131\055\127" +
    "\001\002\000\022\006\124\013\126\017\136\022\121\023" +
    "\122\034\141\035\131\055\127\001\002\000\006\003\172" +
    "\031\174\001\002\000\006\003\277\051\276\001\002\000" +
    "\006\003\303\012\304\001\002\000\004\012\300\001\002" +
    "\000\004\023\301\001\002\000\004\051\302\001\002\000" +
    "\034\003\uff3a\006\uff3a\012\uff3a\013\uff3a\015\uff3a\016\uff3a" +
    "\017\uff3a\022\uff3a\023\uff3a\031\uff3a\034\uff3a\035\uff3a\055" +
    "\uff3a\001\002\000\004\023\312\001\002\000\006\003\305" +
    "\023\306\001\002\000\004\051\311\001\002\000\006\003" +
    "\310\051\307\001\002\000\034\003\uff41\006\uff41\012\uff41" +
    "\013\uff41\015\uff41\016\uff41\017\uff41\022\uff41\023\uff41\031" +
    "\uff41\034\uff41\035\uff41\055\uff41\001\002\000\034\003\uff37" +
    "\006\uff37\012\uff37\013\uff37\015\uff37\016\uff37\017\uff37\022" +
    "\uff37\023\uff37\031\uff37\034\uff37\035\uff37\055\uff37\001\002" +
    "\000\034\003\uff38\006\uff38\012\uff38\013\uff38\015\uff38\016" +
    "\uff38\017\uff38\022\uff38\023\uff38\031\uff38\034\uff38\035\uff38" +
    "\055\uff38\001\002\000\004\051\313\001\002\000\034\003" +
    "\uff39\006\uff39\012\uff39\013\uff39\015\uff39\016\uff39\017\uff39" +
    "\022\uff39\023\uff39\031\uff39\034\uff39\035\uff39\055\uff39\001" +
    "\002\000\006\003\172\031\174\001\002\000\004\051\316" +
    "\001\002\000\004\012\317\001\002\000\004\023\320\001" +
    "\002\000\004\051\321\001\002\000\034\003\uff3b\006\uff3b" +
    "\012\uff3b\013\uff3b\015\uff3b\016\uff3b\017\uff3b\022\uff3b\023" +
    "\uff3b\031\uff3b\034\uff3b\035\uff3b\055\uff3b\001\002\000\004" +
    "\023\323\001\002\000\022\006\124\013\126\017\136\022" +
    "\121\023\122\034\141\035\131\055\127\001\002\000\006" +
    "\003\172\031\174\001\002\000\004\051\326\001\002\000" +
    "\004\012\327\001\002\000\004\023\330\001\002\000\004" +
    "\051\331\001\002\000\034\003\uff3d\006\uff3d\012\uff3d\013" +
    "\uff3d\015\uff3d\016\uff3d\017\uff3d\022\uff3d\023\uff3d\031\uff3d" +
    "\034\uff3d\035\uff3d\055\uff3d\001\002\000\014\003\uffe7\012" +
    "\uffe7\015\uffe7\016\uffe7\031\uffe7\001\002\000\014\003\uffe1" +
    "\012\uffe1\015\uffe1\016\uffe1\031\uffe1\001\002\000\014\003" +
    "\uffe5\012\uffe5\015\uffe5\016\uffe5\031\uffe5\001\002\000\014" +
    "\003\uffe3\012\uffe3\015\uffe3\016\uffe3\031\uffe3\001\002\000" +
    "\014\027\u0105\030\u0104\055\u0102\056\u0101\057\u0103\001\002" +
    "\000\016\003\343\027\345\030\344\055\340\056\341\057" +
    "\342\001\002\000\006\003\374\047\375\001\002\000\006" +
    "\003\367\047\370\001\002\000\006\003\363\047\362\001" +
    "\002\000\004\047\360\001\002\000\006\003\353\047\354" +
    "\001\002\000\006\003\346\047\347\001\002\000\004\051" +
    "\352\001\002\000\006\003\351\051\350\001\002\000\034" +
    "\003\uff26\006\uff26\012\uff26\013\uff26\015\uff26\016\uff26\017" +
    "\uff26\022\uff26\023\uff26\031\uff26\034\uff26\035\uff26\055\uff26" +
    "\001\002\000\034\003\uff23\006\uff23\012\uff23\013\uff23\015" +
    "\uff23\016\uff23\017\uff23\022\uff23\023\uff23\031\uff23\034\uff23" +
    "\035\uff23\055\uff23\001\002\000\034\003\uff24\006\uff24\012" +
    "\uff24\013\uff24\015\uff24\016\uff24\017\uff24\022\uff24\023\uff24" +
    "\031\uff24\034\uff24\035\uff24\055\uff24\001\002\000\004\051" +
    "\357\001\002\000\006\003\356\051\355\001\002\000\034" +
    "\003\uff2a\006\uff2a\012\uff2a\013\uff2a\015\uff2a\016\uff2a\017" +
    "\uff2a\022\uff2a\023\uff2a\031\uff2a\034\uff2a\035\uff2a\055\uff2a" +
    "\001\002\000\034\003\uff27\006\uff27\012\uff27\013\uff27\015" +
    "\uff27\016\uff27\017\uff27\022\uff27\023\uff27\031\uff27\034\uff27" +
    "\035\uff27\055\uff27\001\002\000\034\003\uff28\006\uff28\012" +
    "\uff28\013\uff28\015\uff28\016\uff28\017\uff28\022\uff28\023\uff28" +
    "\031\uff28\034\uff28\035\uff28\055\uff28\001\002\000\004\051" +
    "\361\001\002\000\034\003\uff31\006\uff31\012\uff31\013\uff31" +
    "\015\uff31\016\uff31\017\uff31\022\uff31\023\uff31\031\uff31\034" +
    "\uff31\035\uff31\055\uff31\001\002\000\006\003\366\051\365" +
    "\001\002\000\004\051\364\001\002\000\034\003\uff2c\006" +
    "\uff2c\012\uff2c\013\uff2c\015\uff2c\016\uff2c\017\uff2c\022\uff2c" +
    "\023\uff2c\031\uff2c\034\uff2c\035\uff2c\055\uff2c\001\002\000" +
    "\034\003\uff2e\006\uff2e\012\uff2e\013\uff2e\015\uff2e\016\uff2e" +
    "\017\uff2e\022\uff2e\023\uff2e\031\uff2e\034\uff2e\035\uff2e\055" +
    "\uff2e\001\002\000\034\003\uff2b\006\uff2b\012\uff2b\013\uff2b" +
    "\015\uff2b\016\uff2b\017\uff2b\022\uff2b\023\uff2b\031\uff2b\034" +
    "\uff2b\035\uff2b\055\uff2b\001\002\000\004\051\373\001\002" +
    "\000\006\003\372\051\371\001\002\000\034\003\uff33\006" +
    "\uff33\012\uff33\013\uff33\015\uff33\016\uff33\017\uff33\022\uff33" +
    "\023\uff33\031\uff33\034\uff33\035\uff33\055\uff33\001\002\000" +
    "\034\003\uff2f\006\uff2f\012\uff2f\013\uff2f\015\uff2f\016\uff2f" +
    "\017\uff2f\022\uff2f\023\uff2f\031\uff2f\034\uff2f\035\uff2f\055" +
    "\uff2f\001\002\000\034\003\uff30\006\uff30\012\uff30\013\uff30" +
    "\015\uff30\016\uff30\017\uff30\022\uff30\023\uff30\031\uff30\034" +
    "\uff30\035\uff30\055\uff30\001\002\000\004\051\u0100\001\002" +
    "\000\006\003\377\051\376\001\002\000\034\003\uff22\006" +
    "\uff22\012\uff22\013\uff22\015\uff22\016\uff22\017\uff22\022\uff22" +
    "\023\uff22\031\uff22\034\uff22\035\uff22\055\uff22\001\002\000" +
    "\034\003\uff1f\006\uff1f\012\uff1f\013\uff1f\015\uff1f\016\uff1f" +
    "\017\uff1f\022\uff1f\023\uff1f\031\uff1f\034\uff1f\035\uff1f\055" +
    "\uff1f\001\002\000\034\003\uff20\006\uff20\012\uff20\013\uff20" +
    "\015\uff20\016\uff20\017\uff20\022\uff20\023\uff20\031\uff20\034" +
    "\uff20\035\uff20\055\uff20\001\002\000\004\047\u010e\001\002" +
    "\000\004\047\u010c\001\002\000\004\047\u010a\001\002\000" +
    "\004\047\u0108\001\002\000\004\047\u0106\001\002\000\004" +
    "\051\u0107\001\002\000\034\003\uff25\006\uff25\012\uff25\013" +
    "\uff25\015\uff25\016\uff25\017\uff25\022\uff25\023\uff25\031\uff25" +
    "\034\uff25\035\uff25\055\uff25\001\002\000\004\051\u0109\001" +
    "\002\000\034\003\uff29\006\uff29\012\uff29\013\uff29\015\uff29" +
    "\016\uff29\017\uff29\022\uff29\023\uff29\031\uff29\034\uff29\035" +
    "\uff29\055\uff29\001\002\000\004\051\u010b\001\002\000\034" +
    "\003\uff2d\006\uff2d\012\uff2d\013\uff2d\015\uff2d\016\uff2d\017" +
    "\uff2d\022\uff2d\023\uff2d\031\uff2d\034\uff2d\035\uff2d\055\uff2d" +
    "\001\002\000\004\051\u010d\001\002\000\034\003\uff21\006" +
    "\uff21\012\uff21\013\uff21\015\uff21\016\uff21\017\uff21\022\uff21" +
    "\023\uff21\031\uff21\034\uff21\035\uff21\055\uff21\001\002\000" +
    "\004\051\u010f\001\002\000\034\003\uff32\006\uff32\012\uff32" +
    "\013\uff32\015\uff32\016\uff32\017\uff32\022\uff32\023\uff32\031" +
    "\uff32\034\uff32\035\uff32\055\uff32\001\002\000\014\003\uffdb" +
    "\012\uffdb\015\uffdb\016\uffdb\031\uffdb\001\002\000\004\055" +
    "\u016f\001\002\000\022\003\u0165\027\u0164\030\u0162\050\022" +
    "\055\034\056\016\057\u0163\061\024\001\002\000\016\003" +
    "\u012f\007\u012e\036\055\037\057\040\061\041\056\001\002" +
    "\000\030\007\u0115\027\u0119\030\u0117\036\055\037\057\040" +
    "\061\041\056\050\022\055\u011a\056\016\061\024\001\002" +
    "\000\012\036\055\037\057\040\061\041\056\001\002\000" +
    "\004\042\u011f\001\002\000\004\051\u011e\001\002\000\042" +
    "\003\uff96\004\uff96\005\uff96\006\uff96\011\uff96\012\uff96\013" +
    "\uff96\015\uff96\016\uff96\017\uff96\022\uff96\023\uff96\031\uff96" +
    "\034\uff96\035\uff96\055\uff96\001\002\000\004\051\u011d\001" +
    "\002\000\022\003\u0114\042\u0112\043\u0113\045\uff69\046\uff69" +
    "\050\015\051\uff69\052\u0111\001\002\000\010\045\033\046" +
    "\032\051\u011c\001\002\000\042\003\uff87\004\uff87\005\uff87" +
    "\006\uff87\011\uff87\012\uff87\013\uff87\015\uff87\016\uff87\017" +
    "\uff87\022\uff87\023\uff87\031\uff87\034\uff87\035\uff87\055\uff87" +
    "\001\002\000\042\003\uff80\004\uff80\005\uff80\006\uff80\011" +
    "\uff80\012\uff80\013\uff80\015\uff80\016\uff80\017\uff80\022\uff80" +
    "\023\uff80\031\uff80\034\uff80\035\uff80\055\uff80\001\002\000" +
    "\042\003\uff84\004\uff84\005\uff84\006\uff84\011\uff84\012\uff84" +
    "\013\uff84\015\uff84\016\uff84\017\uff84\022\uff84\023\uff84\031" +
    "\uff84\034\uff84\035\uff84\055\uff84\001\002\000\016\027\u0121" +
    "\030\u0120\050\022\055\034\056\016\061\024\001\002\000" +
    "\004\051\u0125\001\002\000\004\051\u0124\001\002\000\010" +
    "\045\033\046\032\051\u0123\001\002\000\042\003\uff94\004" +
    "\uff94\005\uff94\006\uff94\011\uff94\012\uff94\013\uff94\015\uff94" +
    "\016\uff94\017\uff94\022\uff94\023\uff94\031\uff94\034\uff94\035" +
    "\uff94\055\uff94\001\002\000\042\003\uff8c\004\uff8c\005\uff8c" +
    "\006\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\022\uff8c\023\uff8c\031\uff8c\034\uff8c\035\uff8c\055\uff8c" +
    "\001\002\000\042\003\uff91\004\uff91\005\uff91\006\uff91\011" +
    "\uff91\012\uff91\013\uff91\015\uff91\016\uff91\017\uff91\022\uff91" +
    "\023\uff91\031\uff91\034\uff91\035\uff91\055\uff91\001\002\000" +
    "\004\042\u0127\001\002\000\016\027\u0129\030\u0128\050\022" +
    "\055\034\056\016\061\024\001\002\000\004\051\u012d\001" +
    "\002\000\004\051\u012c\001\002\000\010\045\033\046\032" +
    "\051\u012b\001\002\000\042\003\uff7c\004\uff7c\005\uff7c\006" +
    "\uff7c\011\uff7c\012\uff7c\013\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\022\uff7c\023\uff7c\031\uff7c\034\uff7c\035\uff7c\055\uff7c\001" +
    "\002\000\042\003\uff71\004\uff71\005\uff71\006\uff71\011\uff71" +
    "\012\uff71\013\uff71\015\uff71\016\uff71\017\uff71\022\uff71\023" +
    "\uff71\031\uff71\034\uff71\035\uff71\055\uff71\001\002\000\042" +
    "\003\uff77\004\uff77\005\uff77\006\uff77\011\uff77\012\uff77\013" +
    "\uff77\015\uff77\016\uff77\017\uff77\022\uff77\023\uff77\031\uff77" +
    "\034\uff77\035\uff77\055\uff77\001\002\000\012\036\055\037" +
    "\057\040\061\041\056\001\002\000\012\036\055\037\057" +
    "\040\061\041\056\001\002\000\006\003\u0132\042\u0131\001" +
    "\002\000\022\003\u013a\027\u0139\030\u0137\050\022\055\034" +
    "\056\016\057\u0138\061\024\001\002\000\006\027\u0134\030" +
    "\u0133\001\002\000\004\051\u0136\001\002\000\004\051\u0135" +
    "\001\002\000\042\003\uff8b\004\uff8b\005\uff8b\006\uff8b\011" +
    "\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b\017\uff8b\022\uff8b" +
    "\023\uff8b\031\uff8b\034\uff8b\035\uff8b\055\uff8b\001\002\000" +
    "\042\003\uff90\004\uff90\005\uff90\006\uff90\011\uff90\012\uff90" +
    "\013\uff90\015\uff90\016\uff90\017\uff90\022\uff90\023\uff90\031" +
    "\uff90\034\uff90\035\uff90\055\uff90\001\002\000\006\003\u0143" +
    "\051\u0142\001\002\000\004\051\u0141\001\002\000\006\003" +
    "\u0140\051\u013f\001\002\000\004\051\u013e\001\002\000\012" +
    "\003\u013d\045\033\046\032\051\u013c\001\002\000\042\003" +
    "\uff95\004\uff95\005\uff95\006\uff95\011\uff95\012\uff95\013\uff95" +
    "\015\uff95\016\uff95\017\uff95\022\uff95\023\uff95\031\uff95\034" +
    "\uff95\035\uff95\055\uff95\001\002\000\042\003\uff93\004\uff93" +
    "\005\uff93\006\uff93\011\uff93\012\uff93\013\uff93\015\uff93\016" +
    "\uff93\017\uff93\022\uff93\023\uff93\031\uff93\034\uff93\035\uff93" +
    "\055\uff93\001\002\000\042\003\uff8f\004\uff8f\005\uff8f\006" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\022\uff8f\023\uff8f\031\uff8f\034\uff8f\035\uff8f\055\uff8f\001" +
    "\002\000\042\003\uff8d\004\uff8d\005\uff8d\006\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\015\uff8d\016\uff8d\017\uff8d\022\uff8d\023" +
    "\uff8d\031\uff8d\034\uff8d\035\uff8d\055\uff8d\001\002\000\042" +
    "\003\uff8a\004\uff8a\005\uff8a\006\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\022\uff8a\023\uff8a\031\uff8a" +
    "\034\uff8a\035\uff8a\055\uff8a\001\002\000\042\003\uff89\004" +
    "\uff89\005\uff89\006\uff89\011\uff89\012\uff89\013\uff89\015\uff89" +
    "\016\uff89\017\uff89\022\uff89\023\uff89\031\uff89\034\uff89\035" +
    "\uff89\055\uff89\001\002\000\042\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\011\uff92\012\uff92\013\uff92\015\uff92\016\uff92\017" +
    "\uff92\022\uff92\023\uff92\031\uff92\034\uff92\035\uff92\055\uff92" +
    "\001\002\000\042\003\uff8e\004\uff8e\005\uff8e\006\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\015\uff8e\016\uff8e\017\uff8e\022\uff8e" +
    "\023\uff8e\031\uff8e\034\uff8e\035\uff8e\055\uff8e\001\002\000" +
    "\004\042\u0145\001\002\000\016\027\u0147\030\u0146\050\022" +
    "\055\034\056\016\061\024\001\002\000\004\051\u014b\001" +
    "\002\000\004\051\u014a\001\002\000\010\045\033\046\032" +
    "\051\u0149\001\002\000\042\003\uff7b\004\uff7b\005\uff7b\006" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\022\uff7b\023\uff7b\031\uff7b\034\uff7b\035\uff7b\055\uff7b\001" +
    "\002\000\042\003\uff70\004\uff70\005\uff70\006\uff70\011\uff70" +
    "\012\uff70\013\uff70\015\uff70\016\uff70\017\uff70\022\uff70\023" +
    "\uff70\031\uff70\034\uff70\035\uff70\055\uff70\001\002\000\042" +
    "\003\uff76\004\uff76\005\uff76\006\uff76\011\uff76\012\uff76\013" +
    "\uff76\015\uff76\016\uff76\017\uff76\022\uff76\023\uff76\031\uff76" +
    "\034\uff76\035\uff76\055\uff76\001\002\000\006\003\u014e\042" +
    "\u014d\001\002\000\022\003\u0158\027\u0157\030\u0155\050\022" +
    "\055\034\056\016\057\u0156\061\024\001\002\000\016\027" +
    "\u0150\030\u014f\050\022\055\034\056\016\061\024\001\002" +
    "\000\004\051\u0154\001\002\000\004\051\u0153\001\002\000" +
    "\010\045\033\046\032\051\u0152\001\002\000\042\003\uff7a" +
    "\004\uff7a\005\uff7a\006\uff7a\011\uff7a\012\uff7a\013\uff7a\015" +
    "\uff7a\016\uff7a\017\uff7a\022\uff7a\023\uff7a\031\uff7a\034\uff7a" +
    "\035\uff7a\055\uff7a\001\002\000\042\003\uff6f\004\uff6f\005" +
    "\uff6f\006\uff6f\011\uff6f\012\uff6f\013\uff6f\015\uff6f\016\uff6f" +
    "\017\uff6f\022\uff6f\023\uff6f\031\uff6f\034\uff6f\035\uff6f\055" +
    "\uff6f\001\002\000\042\003\uff75\004\uff75\005\uff75\006\uff75" +
    "\011\uff75\012\uff75\013\uff75\015\uff75\016\uff75\017\uff75\022" +
    "\uff75\023\uff75\031\uff75\034\uff75\035\uff75\055\uff75\001\002" +
    "\000\006\003\u0161\051\u0160\001\002\000\004\051\u015f\001" +
    "\002\000\006\003\u015e\051\u015d\001\002\000\004\051\u015c" +
    "\001\002\000\012\003\u015b\045\033\046\032\051\u015a\001" +
    "\002\000\042\003\uff7d\004\uff7d\005\uff7d\006\uff7d\011\uff7d" +
    "\012\uff7d\013\uff7d\015\uff7d\016\uff7d\017\uff7d\022\uff7d\023" +
    "\uff7d\031\uff7d\034\uff7d\035\uff7d\055\uff7d\001\002\000\042" +
    "\003\uff79\004\uff79\005\uff79\006\uff79\011\uff79\012\uff79\013" +
    "\uff79\015\uff79\016\uff79\017\uff79\022\uff79\023\uff79\031\uff79" +
    "\034\uff79\035\uff79\055\uff79\001\002\000\042\003\uff74\004" +
    "\uff74\005\uff74\006\uff74\011\uff74\012\uff74\013\uff74\015\uff74" +
    "\016\uff74\017\uff74\022\uff74\023\uff74\031\uff74\034\uff74\035" +
    "\uff74\055\uff74\001\002\000\042\003\uff72\004\uff72\005\uff72" +
    "\006\uff72\011\uff72\012\uff72\013\uff72\015\uff72\016\uff72\017" +
    "\uff72\022\uff72\023\uff72\031\uff72\034\uff72\035\uff72\055\uff72" +
    "\001\002\000\042\003\uff6e\004\uff6e\005\uff6e\006\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e\022\uff6e" +
    "\023\uff6e\031\uff6e\034\uff6e\035\uff6e\055\uff6e\001\002\000" +
    "\042\003\uff6d\004\uff6d\005\uff6d\006\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\015\uff6d\016\uff6d\017\uff6d\022\uff6d\023\uff6d\031" +
    "\uff6d\034\uff6d\035\uff6d\055\uff6d\001\002\000\042\003\uff78" +
    "\004\uff78\005\uff78\006\uff78\011\uff78\012\uff78\013\uff78\015" +
    "\uff78\016\uff78\017\uff78\022\uff78\023\uff78\031\uff78\034\uff78" +
    "\035\uff78\055\uff78\001\002\000\042\003\uff73\004\uff73\005" +
    "\uff73\006\uff73\011\uff73\012\uff73\013\uff73\015\uff73\016\uff73" +
    "\017\uff73\022\uff73\023\uff73\031\uff73\034\uff73\035\uff73\055" +
    "\uff73\001\002\000\006\003\u016e\051\u016d\001\002\000\004" +
    "\051\u016c\001\002\000\006\003\u016b\051\u016a\001\002\000" +
    "\004\051\u0169\001\002\000\012\003\u0168\045\033\046\032" +
    "\051\u0167\001\002\000\042\003\uff88\004\uff88\005\uff88\006" +
    "\uff88\011\uff88\012\uff88\013\uff88\015\uff88\016\uff88\017\uff88" +
    "\022\uff88\023\uff88\031\uff88\034\uff88\035\uff88\055\uff88\001" +
    "\002\000\042\003\uff86\004\uff86\005\uff86\006\uff86\011\uff86" +
    "\012\uff86\013\uff86\015\uff86\016\uff86\017\uff86\022\uff86\023" +
    "\uff86\031\uff86\034\uff86\035\uff86\055\uff86\001\002\000\042" +
    "\003\uff83\004\uff83\005\uff83\006\uff83\011\uff83\012\uff83\013" +
    "\uff83\015\uff83\016\uff83\017\uff83\022\uff83\023\uff83\031\uff83" +
    "\034\uff83\035\uff83\055\uff83\001\002\000\042\003\uff81\004" +
    "\uff81\005\uff81\006\uff81\011\uff81\012\uff81\013\uff81\015\uff81" +
    "\016\uff81\017\uff81\022\uff81\023\uff81\031\uff81\034\uff81\035" +
    "\uff81\055\uff81\001\002\000\042\003\uff7f\004\uff7f\005\uff7f" +
    "\006\uff7f\011\uff7f\012\uff7f\013\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\022\uff7f\023\uff7f\031\uff7f\034\uff7f\035\uff7f\055\uff7f" +
    "\001\002\000\042\003\uff7e\004\uff7e\005\uff7e\006\uff7e\011" +
    "\uff7e\012\uff7e\013\uff7e\015\uff7e\016\uff7e\017\uff7e\022\uff7e" +
    "\023\uff7e\031\uff7e\034\uff7e\035\uff7e\055\uff7e\001\002\000" +
    "\042\003\uff85\004\uff85\005\uff85\006\uff85\011\uff85\012\uff85" +
    "\013\uff85\015\uff85\016\uff85\017\uff85\022\uff85\023\uff85\031" +
    "\uff85\034\uff85\035\uff85\055\uff85\001\002\000\042\003\uff82" +
    "\004\uff82\005\uff82\006\uff82\011\uff82\012\uff82\013\uff82\015" +
    "\uff82\016\uff82\017\uff82\022\uff82\023\uff82\031\uff82\034\uff82" +
    "\035\uff82\055\uff82\001\002\000\012\003\u0114\042\u0112\043" +
    "\u0113\052\u0111\001\002\000\042\003\uff97\004\uff97\005\uff97" +
    "\006\uff97\011\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017" +
    "\uff97\022\uff97\023\uff97\031\uff97\034\uff97\035\uff97\055\uff97" +
    "\001\002\000\006\003\u0172\014\u0173\001\002\000\022\006" +
    "\124\013\126\017\136\022\121\023\122\034\141\035\131" +
    "\055\127\001\002\000\022\006\124\013\126\017\136\022" +
    "\121\023\122\034\141\035\131\055\127\001\002\000\012" +
    "\003\uff50\012\uff50\015\uff50\016\u0175\001\002\000\012\003" +
    "\202\033\206\055\200\056\177\001\002\000\010\003\uff4d" +
    "\012\uff4d\015\u0177\001\002\000\022\006\124\013\126\017" +
    "\136\022\121\023\122\034\141\035\131\055\127\001\002" +
    "\000\006\003\u0179\012\u017a\001\002\000\004\013\u0180\001" +
    "\002\000\006\003\u017b\013\u017c\001\002\000\004\051\u017f" +
    "\001\002\000\006\003\u017e\051\u017d\001\002\000\034\003" +
    "\uff61\006\uff61\012\uff61\013\uff61\015\uff61\016\uff61\017\uff61" +
    "\022\uff61\023\uff61\031\uff61\034\uff61\035\uff61\055\uff61\001" +
    "\002\000\034\003\uff5d\006\uff5d\012\uff5d\013\uff5d\015\uff5d" +
    "\016\uff5d\017\uff5d\022\uff5d\023\uff5d\031\uff5d\034\uff5d\035" +
    "\uff5d\055\uff5d\001\002\000\034\003\uff5e\006\uff5e\012\uff5e" +
    "\013\uff5e\015\uff5e\016\uff5e\017\uff5e\022\uff5e\023\uff5e\031" +
    "\uff5e\034\uff5e\035\uff5e\055\uff5e\001\002\000\004\051\u0181" +
    "\001\002\000\034\003\uff5f\006\uff5f\012\uff5f\013\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\022\uff5f\023\uff5f\031\uff5f\034\uff5f" +
    "\035\uff5f\055\uff5f\001\002\000\006\003\uff4e\012\uff4e\001" +
    "\002\000\006\003\u0185\014\u0184\001\002\000\022\006\124" +
    "\013\126\017\136\022\121\023\122\034\141\035\131\055" +
    "\127\001\002\000\022\006\124\013\126\017\136\022\121" +
    "\023\122\034\141\035\131\055\127\001\002\000\012\003" +
    "\uff50\012\uff50\015\uff50\016\u0175\001\002\000\010\003\uff4f" +
    "\012\uff4f\015\uff4f\001\002\000\012\003\uff50\012\uff50\015" +
    "\uff50\016\u0175\001\002\000\010\003\uff51\012\uff51\015\uff51" +
    "\001\002\000\010\012\uff50\015\uff50\016\u0175\001\002\000" +
    "\006\012\uff4d\015\u0177\001\002\000\004\012\u018d\001\002" +
    "\000\004\013\u018e\001\002\000\004\051\u018f\001\002\000" +
    "\034\003\uff60\006\uff60\012\uff60\013\uff60\015\uff60\016\uff60" +
    "\017\uff60\022\uff60\023\uff60\031\uff60\034\uff60\035\uff60\055" +
    "\uff60\001\002\000\014\003\uffdd\012\uffdd\015\uffdd\016\uffdd" +
    "\031\uffdd\001\002\000\022\003\uffd6\012\uffd6\015\uffd6\016" +
    "\uffd6\031\uffd6\045\033\046\032\051\u0192\001\002\000\014" +
    "\003\uffd7\012\uffd7\015\uffd7\016\uffd7\031\uffd7\001\002\000" +
    "\004\055\u019a\001\002\000\006\003\u0196\055\u0195\001\002" +
    "\000\006\003\u0199\051\u0198\001\002\000\004\051\u0197\001" +
    "\002\000\004\002\uffef\001\002\000\004\002\ufff2\001\002" +
    "\000\004\002\uffee\001\002\000\004\051\u019b\001\002\000" +
    "\004\002\ufff0\001\002\000\006\003\172\031\174\001\002" +
    "\000\006\003\u019f\051\u019e\001\002\000\006\003\u01a3\012" +
    "\u01a4\001\002\000\004\012\u01a0\001\002\000\004\023\u01a1" +
    "\001\002\000\004\051\u01a2\001\002\000\034\003\uff4b\006" +
    "\uff4b\012\uff4b\013\uff4b\015\uff4b\016\uff4b\017\uff4b\022\uff4b" +
    "\023\uff4b\031\uff4b\034\uff4b\035\uff4b\055\uff4b\001\002\000" +
    "\004\023\u01aa\001\002\000\006\003\u01a5\023\u01a6\001\002" +
    "\000\004\051\u01a9\001\002\000\006\003\u01a8\051\u01a7\001" +
    "\002\000\034\003\uff4c\006\uff4c\012\uff4c\013\uff4c\015\uff4c" +
    "\016\uff4c\017\uff4c\022\uff4c\023\uff4c\031\uff4c\034\uff4c\035" +
    "\uff4c\055\uff4c\001\002\000\034\003\uff48\006\uff48\012\uff48" +
    "\013\uff48\015\uff48\016\uff48\017\uff48\022\uff48\023\uff48\031" +
    "\uff48\034\uff48\035\uff48\055\uff48\001\002\000\034\003\uff49" +
    "\006\uff49\012\uff49\013\uff49\015\uff49\016\uff49\017\uff49\022" +
    "\uff49\023\uff49\031\uff49\034\uff49\035\uff49\055\uff49\001\002" +
    "\000\004\051\u01ab\001\002\000\034\003\uff4a\006\uff4a\012" +
    "\uff4a\013\uff4a\015\uff4a\016\uff4a\017\uff4a\022\uff4a\023\uff4a" +
    "\031\uff4a\034\uff4a\035\uff4a\055\uff4a\001\002\000\006\003" +
    "\u01ad\023\u01ae\001\002\000\022\006\124\013\126\017\136" +
    "\022\121\023\122\034\141\035\131\055\127\001\002\000" +
    "\022\006\124\013\126\017\136\022\121\023\122\034\141" +
    "\035\131\055\127\001\002\000\006\003\172\031\174\001" +
    "\002\000\006\003\u01b2\051\u01b1\001\002\000\006\003\u01b6" +
    "\012\u01b7\001\002\000\004\012\u01b3\001\002\000\004\023" +
    "\u01b4\001\002\000\004\051\u01b5\001\002\000\034\003\uff45" +
    "\006\uff45\012\uff45\013\uff45\015\uff45\016\uff45\017\uff45\022" +
    "\uff45\023\uff45\031\uff45\034\uff45\035\uff45\055\uff45\001\002" +
    "\000\004\023\u01bd\001\002\000\006\003\u01b8\023\u01b9\001" +
    "\002\000\004\051\u01bc\001\002\000\006\003\u01bb\051\u01ba" +
    "\001\002\000\034\003\uff47\006\uff47\012\uff47\013\uff47\015" +
    "\uff47\016\uff47\017\uff47\022\uff47\023\uff47\031\uff47\034\uff47" +
    "\035\uff47\055\uff47\001\002\000\034\003\uff42\006\uff42\012" +
    "\uff42\013\uff42\015\uff42\016\uff42\017\uff42\022\uff42\023\uff42" +
    "\031\uff42\034\uff42\035\uff42\055\uff42\001\002\000\034\003" +
    "\uff43\006\uff43\012\uff43\013\uff43\015\uff43\016\uff43\017\uff43" +
    "\022\uff43\023\uff43\031\uff43\034\uff43\035\uff43\055\uff43\001" +
    "\002\000\004\051\u01be\001\002\000\034\003\uff44\006\uff44" +
    "\012\uff44\013\uff44\015\uff44\016\uff44\017\uff44\022\uff44\023" +
    "\uff44\031\uff44\034\uff44\035\uff44\055\uff44\001\002\000\006" +
    "\003\172\031\174\001\002\000\004\051\u01c1\001\002\000" +
    "\004\012\u01c2\001\002\000\004\023\u01c3\001\002\000\004" +
    "\051\u01c4\001\002\000\034\003\uff46\006\uff46\012\uff46\013" +
    "\uff46\015\uff46\016\uff46\017\uff46\022\uff46\023\uff46\031\uff46" +
    "\034\uff46\035\uff46\055\uff46\001\002\000\004\012\u01c6\001" +
    "\002\000\004\055\u01c7\001\002\000\004\051\u01c8\001\002" +
    "\000\004\002\ufff1\001\002\000\006\003\uffc2\011\uffc2\001" +
    "\002\000\006\003\u01cb\012\u01cc\001\002\000\004\055\u01d2" +
    "\001\002\000\006\003\u01ce\055\u01cd\001\002\000\006\003" +
    "\u01d1\051\u01d0\001\002\000\004\051\u01cf\001\002\000\004" +
    "\002\uffe9\001\002\000\004\002\uffed\001\002\000\004\002" +
    "\uffe8\001\002\000\004\051\u01d3\001\002\000\004\002\uffea" +
    "\001\002\000\004\050\015\001\002\000\004\050\015\001" +
    "\002\000\004\006\u01d7\001\002\000\012\036\055\037\057" +
    "\040\061\041\056\001\002\000\004\010\u01d9\001\002\000" +
    "\012\004\103\005\113\011\u01da\055\110\001\002\000\022" +
    "\006\124\013\126\017\136\022\121\023\122\034\141\035" +
    "\131\055\127\001\002\000\004\011\u01dc\001\002\000\022" +
    "\006\124\013\126\017\136\022\121\023\122\034\141\035" +
    "\131\055\127\001\002\000\004\012\u01de\001\002\000\004" +
    "\055\u01df\001\002\000\004\051\u01e0\001\002\000\014\003" +
    "\uffae\004\uffae\005\uffae\011\uffae\055\uffae\001\002\000\004" +
    "\012\u01e2\001\002\000\004\055\u01e3\001\002\000\004\051" +
    "\u01e4\001\002\000\014\003\uffa6\004\uffa6\005\uffa6\011\uffa6" +
    "\055\uffa6\001\002\000\006\003\u01e6\006\u01e7\001\002\000" +
    "\012\036\055\037\057\040\061\041\056\001\002\000\012" +
    "\036\055\037\057\040\061\041\056\001\002\000\006\003" +
    "\u01e9\010\u01ea\001\002\000\012\004\103\005\113\011\u020c" +
    "\055\110\001\002\000\014\003\u01eb\004\103\005\113\011" +
    "\u01ec\055\110\001\002\000\022\006\124\013\126\017\136" +
    "\022\121\023\122\034\141\035\131\055\127\001\002\000" +
    "\022\006\124\013\126\017\136\022\121\023\122\034\141" +
    "\035\131\055\127\001\002\000\006\003\u01ee\011\u01ef\001" +
    "\002\000\022\006\124\013\126\017\136\022\121\023\122" +
    "\034\141\035\131\055\127\001\002\000\022\006\124\013" +
    "\126\017\136\022\121\023\122\034\141\035\131\055\127" +
    "\001\002\000\006\003\u01f1\012\u01f2\001\002\000\004\055" +
    "\u01f8\001\002\000\006\003\u01f4\055\u01f3\001\002\000\006" +
    "\003\u01f7\051\u01f6\001\002\000\004\051\u01f5\001\002\000" +
    "\014\003\uffa9\004\uffa9\005\uffa9\011\uffa9\055\uffa9\001\002" +
    "\000\014\003\uffaf\004\uffaf\005\uffaf\011\uffaf\055\uffaf\001" +
    "\002\000\014\003\uffa8\004\uffa8\005\uffa8\011\uffa8\055\uffa8" +
    "\001\002\000\004\051\u01f9\001\002\000\014\003\uffaa\004" +
    "\uffaa\005\uffaa\011\uffaa\055\uffaa\001\002\000\004\012\u01fb" +
    "\001\002\000\004\055\u01fc\001\002\000\004\051\u01fd\001" +
    "\002\000\014\003\uffab\004\uffab\005\uffab\011\uffab\055\uffab" +
    "\001\002\000\006\003\u01ff\012\u0200\001\002\000\004\055" +
    "\u0206\001\002\000\006\003\u0202\055\u0201\001\002\000\006" +
    "\003\u0205\051\u0204\001\002\000\004\051\u0203\001\002\000" +
    "\014\003\uffa1\004\uffa1\005\uffa1\011\uffa1\055\uffa1\001\002" +
    "\000\014\003\uffa7\004\uffa7\005\uffa7\011\uffa7\055\uffa7\001" +
    "\002\000\014\003\uffa0\004\uffa0\005\uffa0\011\uffa0\055\uffa0" +
    "\001\002\000\004\051\u0207\001\002\000\014\003\uffa2\004" +
    "\uffa2\005\uffa2\011\uffa2\055\uffa2\001\002\000\004\012\u0209" +
    "\001\002\000\004\055\u020a\001\002\000\004\051\u020b\001" +
    "\002\000\014\003\uffa3\004\uffa3\005\uffa3\011\uffa3\055\uffa3" +
    "\001\002\000\022\006\124\013\126\017\136\022\121\023" +
    "\122\034\141\035\131\055\127\001\002\000\004\011\u020e" +
    "\001\002\000\022\006\124\013\126\017\136\022\121\023" +
    "\122\034\141\035\131\055\127\001\002\000\004\012\u0210" +
    "\001\002\000\004\055\u0211\001\002\000\004\051\u0212\001" +
    "\002\000\014\003\uffac\004\uffac\005\uffac\011\uffac\055\uffac" +
    "\001\002\000\004\012\u0214\001\002\000\004\055\u0215\001" +
    "\002\000\004\051\u0216\001\002\000\014\003\uffa4\004\uffa4" +
    "\005\uffa4\011\uffa4\055\uffa4\001\002\000\004\010\u0218\001" +
    "\002\000\012\004\103\005\113\011\u0219\055\110\001\002" +
    "\000\022\006\124\013\126\017\136\022\121\023\122\034" +
    "\141\035\131\055\127\001\002\000\004\011\u021b\001\002" +
    "\000\022\006\124\013\126\017\136\022\121\023\122\034" +
    "\141\035\131\055\127\001\002\000\004\012\u021d\001\002" +
    "\000\004\055\u021e\001\002\000\004\051\u021f\001\002\000" +
    "\014\003\uffad\004\uffad\005\uffad\011\uffad\055\uffad\001\002" +
    "\000\004\012\u0221\001\002\000\004\055\u0222\001\002\000" +
    "\004\051\u0223\001\002\000\014\003\uffa5\004\uffa5\005\uffa5" +
    "\011\uffa5\055\uffa5\001\002\000\004\012\u0225\001\002\000" +
    "\004\055\u0226\001\002\000\004\051\u0227\001\002\000\004" +
    "\002\uffeb\001\002\000\004\055\u0232\001\002\000\016\003" +
    "\u012f\007\u012e\036\055\037\057\040\061\041\056\001\002" +
    "\000\030\007\u0115\027\u0119\030\u0117\036\055\037\057\040" +
    "\061\041\056\050\022\055\u022c\056\016\061\024\001\002" +
    "\000\006\042\u011f\051\u022e\001\002\000\022\003\u022a\042" +
    "\u0112\043\u0229\045\uff69\046\uff69\050\015\051\uff69\052\u0228" +
    "\001\002\000\014\003\uff9b\004\uff9b\005\uff9b\011\uff9b\055" +
    "\uff9b\001\002\000\014\003\uff99\004\uff99\005\uff99\011\uff99" +
    "\055\uff99\001\002\000\010\003\u0231\042\u0131\051\u0230\001" +
    "\002\000\014\003\uff9a\004\uff9a\005\uff9a\011\uff9a\055\uff9a" +
    "\001\002\000\020\003\uff98\004\uff98\005\uff98\011\uff98\027" +
    "\u0134\030\u0133\055\uff98\001\002\000\012\003\u022a\042\u0112" +
    "\043\u0229\052\u0228\001\002\000\014\003\uff9c\004\uff9c\005" +
    "\uff9c\011\uff9c\055\uff9c\001\002\000\006\003\uffb8\011\uffb8" +
    "\001\002\000\006\003\uffc0\011\uffc0\001\002\000\006\003" +
    "\uffba\011\uffba\001\002\000\006\003\uffbc\011\uffbc\001\002" +
    "\000\004\050\015\001\002\000\004\050\015\001\002\000" +
    "\006\010\u023c\051\u023b\001\002\000\014\003\uffb5\004\uffb5" +
    "\005\uffb5\011\uffb5\055\uffb5\001\002\000\012\004\103\005" +
    "\113\011\u023d\055\110\001\002\000\022\006\124\013\126" +
    "\017\136\022\121\023\122\034\141\035\131\055\127\001" +
    "\002\000\004\011\u023f\001\002\000\022\006\124\013\126" +
    "\017\136\022\121\023\122\034\141\035\131\055\127\001" +
    "\002\000\004\012\u0241\001\002\000\004\055\u0242\001\002" +
    "\000\004\051\u0243\001\002\000\014\003\uffb2\004\uffb2\005" +
    "\uffb2\011\uffb2\055\uffb2\001\002\000\004\012\u0245\001\002" +
    "\000\004\055\u0246\001\002\000\004\051\u0247\001\002\000" +
    "\014\003\uffb0\004\uffb0\005\uffb0\011\uffb0\055\uffb0\001\002" +
    "\000\010\003\u024a\010\u024b\051\u0249\001\002\000\014\003" +
    "\uffb6\004\uffb6\005\uffb6\011\uffb6\055\uffb6\001\002\000\014" +
    "\003\uffb4\004\uffb4\005\uffb4\011\uffb4\055\uffb4\001\002\000" +
    "\012\004\103\005\113\011\u024c\055\110\001\002\000\022" +
    "\006\124\013\126\017\136\022\121\023\122\034\141\035" +
    "\131\055\127\001\002\000\004\011\u024e\001\002\000\022" +
    "\006\124\013\126\017\136\022\121\023\122\034\141\035" +
    "\131\055\127\001\002\000\004\012\u0250\001\002\000\004" +
    "\055\u0251\001\002\000\004\051\u0252\001\002\000\014\003" +
    "\uffb3\004\uffb3\005\uffb3\011\uffb3\055\uffb3\001\002\000\004" +
    "\012\u0254\001\002\000\004\055\u0255\001\002\000\004\051" +
    "\u0256\001\002\000\014\003\uffb1\004\uffb1\005\uffb1\011\uffb1" +
    "\055\uffb1\001\002\000\006\003\uffbe\011\uffbe\001\002\000" +
    "\006\003\u0259\006\u025a\001\002\000\012\036\055\037\057" +
    "\040\061\041\056\001\002\000\012\036\055\037\057\040" +
    "\061\041\056\001\002\000\006\003\u025c\010\u025d\001\002" +
    "\000\016\002\uffec\003\111\004\103\005\113\011\114\055" +
    "\110\001\002\000\016\002\uffec\003\111\004\103\005\113" +
    "\011\114\055\110\001\002\000\004\002\ufff7\001\002\000" +
    "\004\002\ufff3\001\002\000\004\010\u0261\001\002\000\016" +
    "\002\uffec\003\111\004\103\005\113\011\114\055\110\001" +
    "\002\000\004\002\ufff4\001\002\000\006\010\u0265\050\015" +
    "\001\002\000\006\006\u0267\010\u0268\001\002\000\016\002" +
    "\uffec\003\111\004\103\005\113\011\114\055\110\001\002" +
    "\000\004\002\ufffa\001\002\000\012\036\055\037\057\040" +
    "\061\041\056\001\002\000\016\002\uffec\003\111\004\103" +
    "\005\113\011\114\055\110\001\002\000\004\002\ufffe\001" +
    "\002\000\004\010\u026b\001\002\000\016\002\uffec\003\111" +
    "\004\103\005\113\011\114\055\110\001\002\000\004\002" +
    "\ufff6\001\002\000\010\003\u0274\010\u0276\050\015\001\002" +
    "\000\006\010\u0270\050\015\001\002\000\004\010\u0272\001" +
    "\002\000\016\002\uffec\003\111\004\103\005\113\011\114" +
    "\055\110\001\002\000\004\002\ufff9\001\002\000\016\002" +
    "\uffec\003\111\004\103\005\113\011\114\055\110\001\002" +
    "\000\004\002\ufffd\001\002\000\016\002\uffec\003\111\004" +
    "\103\005\113\011\114\055\110\001\002\000\006\003\u0278" +
    "\010\u0279\001\002\000\016\002\uffec\003\111\004\103\005" +
    "\113\011\114\055\110\001\002\000\004\002\ufffb\001\002" +
    "\000\016\002\uffec\003\111\004\103\005\113\011\114\055" +
    "\110\001\002\000\016\002\uffec\003\111\004\103\005\113" +
    "\011\114\055\110\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\006\002\007\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0257\001" +
    "\001\000\004\005\013\001\001\000\002\001\001\000\014" +
    "\006\027\013\020\014\016\017\017\034\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\020\014\016\034\044\001\001\000" +
    "\004\005\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\020\014\016\034\036\001\001" +
    "\000\010\013\020\014\016\034\034\001\001\000\004\005" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\066\001" +
    "\001\000\004\007\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\062\013\020\014" +
    "\016\017\017\034\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\067\001\001\000\002\001\001\000\014\006\073\013\020" +
    "\014\016\017\017\034\026\001\001\000\014\006\072\013" +
    "\020\014\016\017\017\034\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\077\001\001\000\002\001\001\000\024\004\111" +
    "\010\115\011\101\012\105\013\103\014\016\015\114\033" +
    "\104\042\106\001\001\000\022\010\u0256\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\022\010\u0236\011\101\012\105\013\103" +
    "\014\016\015\114\033\104\042\106\001\001\000\022\010" +
    "\u0235\011\101\012\105\013\103\014\016\015\114\033\104" +
    "\042\106\001\001\000\022\010\u0234\011\101\012\105\013" +
    "\103\014\016\015\114\033\104\042\106\001\001\000\022" +
    "\010\u0233\011\101\012\105\013\103\014\016\015\114\033" +
    "\104\042\106\001\001\000\004\005\035\001\001\000\026" +
    "\013\136\014\016\020\u0223\024\131\025\134\026\132\030" +
    "\133\042\127\043\137\044\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\136\014\016\020\u01c9\024" +
    "\131\025\134\026\132\030\133\042\127\043\137\044\124" +
    "\001\001\000\022\010\u01c8\011\101\012\105\013\103\014" +
    "\016\015\114\033\104\042\106\001\001\000\002\001\001" +
    "\000\026\013\136\014\016\020\u01c4\024\131\025\134\026" +
    "\132\030\133\042\127\043\137\044\124\001\001\000\026" +
    "\013\136\014\016\020\122\024\131\025\134\026\132\030" +
    "\133\042\127\043\137\044\124\001\001\000\012\014\203" +
    "\021\u01ab\022\204\023\200\001\001\000\026\013\136\014" +
    "\016\020\u019b\024\131\025\134\026\132\030\133\042\127" +
    "\043\137\044\124\001\001\000\002\001\001\000\010\013" +
    "\020\014\016\034\u0190\001\001\000\026\013\136\014\016" +
    "\020\u018f\024\131\025\134\026\132\030\133\042\127\043" +
    "\137\044\124\001\001\000\012\014\203\021\u0170\022\204" +
    "\023\200\001\001\000\004\005\035\001\001\000\026\013" +
    "\136\014\016\020\u010f\024\131\025\134\026\132\030\133" +
    "\042\127\043\137\044\124\001\001\000\002\001\001\000" +
    "\026\013\136\014\016\020\334\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\026\013" +
    "\136\014\016\020\333\024\131\025\134\026\132\030\133" +
    "\042\127\043\137\044\124\001\001\000\026\013\136\014" +
    "\016\020\332\024\131\025\134\026\132\030\133\042\127" +
    "\043\137\044\124\001\001\000\026\013\136\014\016\020" +
    "\331\024\131\025\134\026\132\030\133\042\127\043\137" +
    "\044\124\001\001\000\002\001\001\000\026\013\136\014" +
    "\016\020\160\024\131\025\134\026\132\030\133\042\127" +
    "\043\137\044\124\001\001\000\026\013\136\014\016\020" +
    "\157\024\131\025\134\026\132\030\133\042\127\043\137" +
    "\044\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\013\136\014\016\020\170" +
    "\024\131\025\134\026\132\030\133\042\127\043\137\044" +
    "\124\001\001\000\004\027\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\203\021" +
    "\220\022\204\023\200\001\001\000\012\014\203\021\202" +
    "\022\204\023\200\001\001\000\002\001\001\000\004\005" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\203\022\211\001\001\000\006\014\203" +
    "\022\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\203\021\217\022\204\023\200\001\001\000\012" +
    "\014\203\021\216\022\204\023\200\001\001\000\012\014" +
    "\203\021\215\022\204\023\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\203\021\226\022\204\023\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\013\136\014\016\020\235\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\004\027" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\136\014\016\020\250\024\131\025\134\026" +
    "\132\030\133\042\127\043\137\044\124\001\001\000\004" +
    "\027\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\013\136\014\016\020\263\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\004\027\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\013\136\014\016\020\313\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\026\013" +
    "\136\014\016\020\273\024\131\025\134\026\132\030\133" +
    "\042\127\043\137\044\124\001\001\000\004\027\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\136\014\016\020\323\024\131\025\134\026" +
    "\132\030\133\042\127\043\137\044\124\001\001\000\004" +
    "\027\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u016f\001\001\000\010\013\020\014\016\034\u0165\001\001" +
    "\000\004\016\u012f\001\001\000\014\013\020\014\016\016" +
    "\u0115\034\u011a\042\u0117\001\001\000\004\016\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\020\014\016\034\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\020\014\016\034\u0129\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u014b\001\001\000" +
    "\004\016\u0143\001\001\000\002\001\001\000\010\013\020" +
    "\014\016\034\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\020\014\016\034\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\020\014\016\034\u0158\001\001" +
    "\000\010\013\020\014\016\034\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\013\136\014\016" +
    "\020\u0189\024\131\025\134\026\132\030\133\042\127\043" +
    "\137\044\124\001\001\000\026\013\136\014\016\020\u0173" +
    "\024\131\025\134\026\132\030\133\042\127\043\137\044" +
    "\124\001\001\000\004\031\u0175\001\001\000\012\014\203" +
    "\021\u0182\022\204\023\200\001\001\000\004\032\u0177\001" +
    "\001\000\026\013\136\014\016\020\u0181\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\136\014" +
    "\016\020\u0187\024\131\025\134\026\132\030\133\042\127" +
    "\043\137\044\124\001\001\000\026\013\136\014\016\020" +
    "\u0185\024\131\025\134\026\132\030\133\042\127\043\137" +
    "\044\124\001\001\000\004\031\u0186\001\001\000\002\001" +
    "\001\000\004\031\u0188\001\001\000\002\001\001\000\004" +
    "\031\u018a\001\001\000\004\032\u018b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u019c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\013\136\014\016\020\u01be\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\026\013\136\014\016\020\u01ae\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\004\027" +
    "\u01af\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u01bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u01e4\001\001\000" +
    "\004\005\u01d5\001\001\000\002\001\001\000\004\016\u01d7" +
    "\001\001\000\002\001\001\000\022\010\u01da\011\101\012" +
    "\105\013\103\014\016\015\114\033\104\042\106\001\001" +
    "\000\026\013\136\014\016\020\u01e0\024\131\025\134\026" +
    "\132\030\133\042\127\043\137\044\124\001\001\000\002" +
    "\001\001\000\026\013\136\014\016\020\u01dc\024\131\025" +
    "\134\026\132\030\133\042\127\043\137\044\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u0216\001\001\000\004\016\u01e7\001\001\000\002\001\001" +
    "\000\022\010\u020c\011\101\012\105\013\103\014\016\015" +
    "\114\033\104\042\106\001\001\000\022\010\u01ec\011\101" +
    "\012\105\013\103\014\016\015\114\033\104\042\106\001" +
    "\001\000\026\013\136\014\016\020\u0207\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\026\013\136\014\016\020\u01fd\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\002\001" +
    "\001\000\026\013\136\014\016\020\u01f9\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\026\013\136\014\016\020\u01ef\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\013\136\014\016\020\u0212" +
    "\024\131\025\134\026\132\030\133\042\127\043\137\044" +
    "\124\001\001\000\002\001\001\000\026\013\136\014\016" +
    "\020\u020e\024\131\025\134\026\132\030\133\042\127\043" +
    "\137\044\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\u0219\011\101\012\105\013\103\014" +
    "\016\015\114\033\104\042\106\001\001\000\026\013\136" +
    "\014\016\020\u021f\024\131\025\134\026\132\030\133\042" +
    "\127\043\137\044\124\001\001\000\002\001\001\000\026" +
    "\013\136\014\016\020\u021b\024\131\025\134\026\132\030" +
    "\133\042\127\043\137\044\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0232\042\u016f\001\001" +
    "\000\004\016\u022e\001\001\000\016\013\020\014\016\015" +
    "\u022c\016\u022a\034\u011a\042\u0117\001\001\000\002\001\001" +
    "\000\004\005\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0247\001\001\000\004\005\u0239\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\u023d\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\026\013\136\014\016\020\u0243\024\131\025\134\026\132" +
    "\030\133\042\127\043\137\044\124\001\001\000\002\001" +
    "\001\000\026\013\136\014\016\020\u023f\024\131\025\134" +
    "\026\132\030\133\042\127\043\137\044\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\u024c\011\101\012\105\013" +
    "\103\014\016\015\114\033\104\042\106\001\001\000\026" +
    "\013\136\014\016\020\u0252\024\131\025\134\026\132\030" +
    "\133\042\127\043\137\044\124\001\001\000\002\001\001" +
    "\000\026\013\136\014\016\020\u024e\024\131\025\134\026" +
    "\132\030\133\042\127\043\137\044\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u025f\001\001\000\004\016\u025a\001\001\000\002" +
    "\001\001\000\024\004\u025e\010\115\011\101\012\105\013" +
    "\103\014\016\015\114\033\104\042\106\001\001\000\024" +
    "\004\u025d\010\115\011\101\012\105\013\103\014\016\015" +
    "\114\033\104\042\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\u0261\010\115\011" +
    "\101\012\105\013\103\014\016\015\114\033\104\042\106" +
    "\001\001\000\002\001\001\000\004\005\u0263\001\001\000" +
    "\002\001\001\000\024\004\u0265\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\004\016\u0269\001\001\000\024\004\u0268" +
    "\010\115\011\101\012\105\013\103\014\016\015\114\033" +
    "\104\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\u026b\010\115\011\101\012\105\013\103\014" +
    "\016\015\114\033\104\042\106\001\001\000\002\001\001" +
    "\000\004\005\u0274\001\001\000\004\005\u026e\001\001\000" +
    "\002\001\001\000\024\004\u0270\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\024\004\u0272\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\024\004\u027b\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\024\004\u0276\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\002\001\001\000\024\004\u027a\010\115\011\101\012\105" +
    "\013\103\014\016\015\114\033\104\042\106\001\001\000" +
    "\024\004\u0279\010\115\011\101\012\105\013\103\014\016" +
    "\015\114\033\104\042\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
    public static ArrayList<String> ErroresSemanticos = new ArrayList<String>();
    public static ArrayList<String> variablesEnFuncion = new ArrayList<String>();
    public int cont = 0;
    public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("Inicio", parser.cont);
        parser.cont++;

        /*Se añaden el hijo*/
        nodo.AddHijo((Nodo) child1);

        /*Solamente en el cuerpo inicial se le asigna el nodo principal al padre.*/
        parser.padre = (Nodo) nodo;

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_principal ::= PROCEDURE ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal", parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo("PROCEDURE", n1.toString(), parser.cont );
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID",n2.toString(),parser.cont);
                    parser.cont++;

                                        
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_principal ::= error ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_principal ::= PROCEDURE error parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_principal ::= PROCEDURE ID parametros error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_principal ::= PROCEDURE ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal",parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo("PROCEDURE", n1.toString(),parser.cont );
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_principal ::= error ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_principal ::= PROCEDURE error IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_principal ::= PROCEDURE ID error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal",parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo("FUNCTION", n1.toString(),parser.cont );
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo("IS", n4.toString(), parser.cont);
                    parser.cont++;

                    
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    // Tabla de Símbolos
                    Nodo type = (Nodo) child2;
                    try{
                        if(TablaSimbolos.buscar(n2) == null){ //Significa que la variable NO existe
                            TablaSimbolos.crear(n2, type.getValue(), false, true);
                            // TablaSimbolos.insertar(n1, exp.getValue(), false);
                        }else{
                            System.out.println("Error: Función  \""+n2+"\" ya existe.");
                            ErroresSemanticos.add("Error: Función \""+n2+"\" ya existe.");
                        }
                                
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la función");            
                    }

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_principal ::= error ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_principal ::= FUNCTION error parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_principal ::= FUNCTION ID parametros error tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo("comienza_cuerpo_principal",parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            nodo.AddHijo((Nodo) child2);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comienza_cuerpo_principal ::= tipo_declaracion error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comienza_cuerpo_principal ::= BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo("comienza_cuerpo_principal",parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comienza_cuerpo_principal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comienza_cuerpo_principal ::= error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comienza_cuerpo_principal ::= BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comienza_cuerpo_principal ::= BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comienza_cuerpo_principal ::= BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codigo ::= ciclo_for codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codigo ::= ciclo_for 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // codigo ::= ciclo_while codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // codigo ::= ciclo_while 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // codigo ::= ciclo_loop codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // codigo ::= ciclo_loop 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // codigo ::= bloque_if codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // codigo ::= bloque_if 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codigo ::= get codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codigo ::= get 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codigo ::= put codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codigo ::= put 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codigo ::= asignacion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codigo ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // codigo ::= llamar_funcion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // codigo ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // codigo ::= RETURN expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

            Nodo type = (Nodo) child1;
            Nodo nodo = null;
            try {
                if (type.getValue() != null) {
                    nodo = new Nodo("EXPRESION",type.getValue(), parser.cont, type.getTipo());
                    parser.cont++;
                    RESULT = nodo;
                } else {
                    System.out.println("En la expresion es nulo el valor.");
                } 
            } catch (Exception e) {
                System.out.println("No sé cuál es el error.");
            }
            parser.cont++;

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codigo ::= RETURN expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("codigo", parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= PARIZQ datos_parametros PARDER 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("parametros", parser.cont );
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= PARIZQ PARDER 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("parametros", parser.cont );
            parser.cont++;

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("datos_parametros", parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo((Nodo) child4);

                    Nodo type = (Nodo) child3;
                    try{
                        //Validar si la variable existe
                        for(String temporal : variablesEnFuncion){
                            if(TablaSimbolos.buscar(temporal) == null){ //Significa que la variable No existe
                                TablaSimbolos.crear(temporal, type.getValue(),false, false);
                                TablaSimbolos.insertar(temporal, null, false); 
                            }else{
                                System.out.println("Error: Variable \""+temporal+"\" ya existe.");
                                ErroresSemanticos.add("Error: Variable \""+temporal+"\" ya existe.");
                            }
                        }
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la variable");            
                    }



                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // datos_parametros ::= listar_ids error tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable error datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("datos_parametros", parser.cont);
                    parser.cont++;
                
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    Nodo type = (Nodo) child3;
                    try{
                        //Validar si la variable existe
                        for(String temporal : variablesEnFuncion){
                            if(TablaSimbolos.buscar(temporal) == null){ //Significa que la variable No existe
                                TablaSimbolos.crear(temporal, type.getValue(),false, false);
                                TablaSimbolos.insertar(temporal, null, false); 
                            }else{
                                System.out.println("Error: Variable \""+temporal+"\" ya existe.");
                                ErroresSemanticos.add("Error: Variable \""+temporal+"\" ya existe.");
                            }
                        }    
                                 
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la variable");            
                    }
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_parametros ::= listar_ids error tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_parametros ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        Nodo nodo = new Nodo("datos_parametros", parser.cont);
                        parser.cont++;
                        /*Se añaden los hijos*/
                        nodo.AddHijo((Nodo) child1);
                        Nodo type = (Nodo) child1;
                        try {
                            if (type.getValue() == null) {
                                System.out.println("Error: Valor Nulo");
                                ErroresSemanticos.add("Error: Valor Nulo.");
                                   
                            }
                        } catch (Exception e) {
                            System.out.println("Error principal en parametros.");
                        }

                        RESULT = nodo;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_parametro ::= IN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", n1.toString(), parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", n2.toString(), parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_parametro ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_parametro ::= IN OUT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIn = new Nodo("IN",n1.toString(), parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoOut = new Nodo("OUT",n2.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoIn);
                nodo.AddHijo(nodoOut);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_parametro ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont );
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_parametro ::= error OUT 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_parametro ::= IN error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listar_ids ::= ID COMA listar_ids 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("listar_ids", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(),parser.cont );
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo("COMA",n2.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);

            //Obtener lista de los nombres de variables
            variablesEnFuncion = new ArrayList<String>();
            variablesEnFuncion.add(n1);



            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listar_ids ::= error COMA listar_ids 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listar_ids ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("listar_ids", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont );
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
           
            //Obtener lista de los nombres de variables
            variablesEnFuncion = new ArrayList<String>();
            variablesEnFuncion.add(n1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listar_ids ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_declaracion ::= declarar_variable tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_declaracion ::= declarar_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_declaracion ::= declarar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_declaracion ::= declarar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_declaracion ::= declarar_procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_declaracion ::= declarar_procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_declaracion ::= llamar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_declaracion ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_declaracion ::= procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_declaracion ::= procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_declaracion ::= asignacion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);
                        nodo.AddHijo((Nodo) child2);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_declaracion ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarar_procedimiento ::= PROCEDURE ID parametros SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /*Se crea el nodo prinicipal*/
                        Nodo nodo = new Nodo("declarar_procedimiento", parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont );
                        parser.cont++;

                        /*Se añaden los hijos*/
                        nodo.AddHijo(nodoId);
                        nodo.AddHijo((Nodo) child1);

                        /*Asignar el nodo al RESULT para continuar el recorrido*/
                        RESULT = nodo;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declarar_procedimiento ::= PROCEDURE error parametros SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarar_procedimiento ::= PROCEDURE ID parametros error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedimiento ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("procedimiento", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo("ID", n6.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);
                nodo.AddHijo(nodoId2);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedimiento ::= PROCEDURE error parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedimiento ::= PROCEDURE ID parametros IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("procedimiento", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // procedimiento ::= PROCEDURE error parametros IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_funcion", parser.cont);
                    parser.cont++;
                    System.out.println("entraaaa");
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo((Nodo) child4);

                    // Tabla de Símbolos
                    Nodo type = (Nodo) child2;
                    try{
                        Simbolo temporal = null;
                        temporal = TablaSimbolos.buscar(n1);
                        if(temporal == null ){ //Significa que la variable NO existe
                            TablaSimbolos.crear(n1, type.getValue(), false, true);
                            // TablaSimbolos.insertar(n1, exp.getValue(), false);
                        }else{
                            System.out.println("Error: Función  \""+n1+"\" ya existe.");
                            ErroresSemanticos.add("Error: Función \""+n1+"\" ya existe.");
                        }
                                
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la función");            
                    }

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarar_funcion ::= FUNCTION error parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declarar_funcion ::= FUNCTION ID parametros error tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable error tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_funcion", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    
                    // Tabla de Símbolos
                    Nodo type = (Nodo) child2;
                    try{
                        Simbolo temporal = null;
                        temporal = TablaSimbolos.buscar(n1);
                        if(temporal == null ){ //Significa que la variable NO existe
                            TablaSimbolos.crear(n1, type.getValue(), false, true);
                            // TablaSimbolos.insertar(n1, exp.getValue(), false);
                        }else{
                            System.out.println("Error: Función  \""+n1+"\" ya existe.");
                            ErroresSemanticos.add("Error: Función \""+n1+"\" ya existe.");
                        }
                                
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la función");            
                    }

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declarar_funcion ::= FUNCTION error parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declarar_funcion ::= FUNCTION ID parametros error tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable error BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamar_funcion ::= funcion SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("llamar_funcion", parser.cont);
                parser.cont++;
               
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // llamar_funcion ::= funcion error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcion ::= ID parametros 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("funcion", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoId);
        nodo.AddHijo((Nodo) child1);

        //=================================Debe Retornar el valor de retorno de la función====================
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declarar_variable ::= ID COMA declarar_variable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_variable", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declarar_variable ::= ID error declarar_variable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declarar_variable ::= ID DECLARACION tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_variable", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);

                    // Tabla de Símbolos
                    Nodo type = (Nodo) child1;
                    try{
                        //Validar si la variable existe
                        // Simbolo temporal = null;
                        // temporal = TablaSimbolos.buscar(n1);
                        if(TablaSimbolos.buscar(n1) == null){ //Significa que la variable No existe
                            TablaSimbolos.crear(n1, type.getValue(), false, false); 
                        }else{
                            System.out.println("Error: Variable \""+n1+"\" ya existe.");
                            ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                        }
                                 
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.out.println("Error al agregar la variable");            
                    }

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declarar_variable ::= ID error tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declarar_variable ::= ID DECLARACION tipo_variable error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignacion ::= ID COMA asignacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignacion ::= ID error asignacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
//---------------------------------------------------------Puede estar malo----------------------------------------
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            Nodo exp = (Nodo) child2;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, type.getValue(), false, false);
                    TablaSimbolos.insertar(n1, exp.getValue(), false);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }
                           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion ::= ID error tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n4.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, type.getValue(), false, false);
                    TablaSimbolos.insertar(n1, n4, false);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }
                           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }


            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion ::= ID error tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= ID DECLARACION tipo_variable error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            
            Nodo nodoFalse = new Nodo("FALSE", n4.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoFalse);
            
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, type.getValue(), false, false);
                    TablaSimbolos.insertar(n1, n4, false);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }
                           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asignacion ::= ID error tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion ::= ID DECLARACION tipo_variable error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID",n1.toString(), parser.cont);
            parser.cont++;
       
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING", n4.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoString);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, type.getValue(), false, false);
                    TablaSimbolos.insertar(n1, n4, false);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }
                           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignacion ::= ID ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
//--------------------------------Insertar a tabla de simbolos ---------------------------------------------------------------------
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal != null ){ //Significa que la variable ya existe
                    //Verificar el tipo de la variable
                    if(temporal.tipoVariable.equals("INTEGER")){ //Verificar si es float
                        String temp2 = type.getValue();
                        System.out.println("expresion_aritmetica:"+temp2);
                        if(temp2.contains(".")){//Verifica si se trata de asignar un float a un int
                            System.out.println("Error: Tipos Incompatibles. No se puede asignar un Float a Entero.");
                            ErroresSemanticos.add("Error:  Tipos Incompatibles. No se puede asignar un Float a Entero.");
                        }else{
                            //Verificar si es constante o no
                            if(!temporal.tipoConstante){//Verifica si el tipo de dato es constante o no
                                //Al NO ser constante entonces se asigna el valor en la tabla de simbolos
                                TablaSimbolos.insertar(n1, type.getValue(), false);
                            }else{ //Mensaje de error porque se quiere modificar un tipo de variable constante
                                System.out.println("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                                ErroresSemanticos.add("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                            }   
                        }
                    }else if (temporal.tipoVariable.equals("FLOAT")){
                        String temp2 = type.getValue();
                        System.out.println("expresion_aritmetica:"+temp2);
                        if(!temp2.contains(".")){//Verifica si se trata de asignar un float a un int
                            System.out.println("Error: Tipos Incompatibles. No se puede asignar un Entero a Float.");
                            ErroresSemanticos.add("Error:  Tipos Incompatibles. No se puede asignar un Entero a Float.");
                        }else{
                            //Verificar si es constante o no
                            if(!temporal.tipoConstante){//Verifica si el tipo de dato es constante o no
                                //Al NO ser constante entonces se asigna el valor en la tabla de simbolos
                                TablaSimbolos.insertar(n1, type.getValue(), false);
                            }else{ //Mensaje de error porque se quiere modificar un tipo de variable constante
                                System.out.println("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                                ErroresSemanticos.add("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                            }    
                        }
                    }
                }else{
                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                }
                          
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            


            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignacion ::= ID error expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignacion ::= ID ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignacion ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal != null ){ //Significa que la variable ya existe
                    /*Los analizadores lexicos y sintacticos ya validan que este tipo de dato es booleano.*/
                    if(!temporal.tipoConstante){//Verifica si el tipo de dato es constante o no
                        //Al NO ser constante entonces se asigna el valor
                        TablaSimbolos.insertar(n1, String.valueOf(n3), false);
                    }else{ //Mensaje de error porque se quiere modificar un tipo de variable constante
                        System.out.println("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                        ErroresSemanticos.add("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                    }
                    
                }else{
                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                }           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignacion ::= ID error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignacion ::= ID ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= ID ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo("FALSE", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoFalse);

            // Tabla de Símbolos
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal != null ){ //Significa que la variable ya existe
                    /*Los analizadores lexicos y sintacticos ya validan que este tipo de dato es booleano.*/
                    if(!temporal.tipoConstante){//Verifica si el tipo de dato es constante o no
                        //Al NO ser constante entonces se asigna el valor
                        TablaSimbolos.insertar(n1, String.valueOf(n3), false);
                    }else{ //Mensaje de error porque se quiere modificar un tipo de variable constante
                        System.out.println("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                        ErroresSemanticos.add("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                    }
                    
                }else{
                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                }             
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignacion ::= ID error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignacion ::= ID ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignacion ::= ID ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING",n3.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoString);         

            // Tabla de Símbolos
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal != null ){ //Significa que la variable ya existe
                    /*Los analizadores lexicos y sintacticos ya validan que este tipo de dato es String.*/
                    if(!temporal.tipoConstante){//Verifica si el tipo de dato es constante o no
                        //Al NO ser constante entonces se asigna el valor
                        TablaSimbolos.insertar(n1, n3, false);
                    }else{ //Mensaje de error porque se quiere modificar un tipo de variable constante
                        System.out.println("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                        ErroresSemanticos.add("Error: La variable \""+temporal.nombre+"\" es constante por lo tanto no puede ser modificada.");
                    }
                    
                }else{
                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                }        
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            Nodo exp = (Nodo) child2;
            try{
                //System.out.println(exp.getValue() + " exp value");
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, type.getValue(), true, false);
                    TablaSimbolos.insertar(n1, exp.getValue(), true);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n5.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, hijo.getValue(), true, false);
                    TablaSimbolos.insertar(n1, String.valueOf(n5), true); 
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }             
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo("FALSE", n5.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoFalse);
            
            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, hijo.getValue(), true, false);
                    TablaSimbolos.insertar(n1, String.valueOf(n5), true); 
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }            
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING", n5.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoString);

            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{     
                Simbolo temporal = null;
                temporal = TablaSimbolos.buscar(n1);
                if(temporal == null ){ //Significa que la variable NO existe
                    TablaSimbolos.crear(n1, hijo.getValue(), true, false);
                    TablaSimbolos.insertar(n1, String.valueOf(n5), true);
                }else{
                    System.out.println("Error: Variable \""+n1+"\" ya existe.");
                    ErroresSemanticos.add("Error: Variable \""+n1+"\" ya existe.");
                }       
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresion_aritmetica ::= expresion_aritmetica OPSUMA expresion_aritmetica 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo aux = (Nodo) n1;
                                Nodo aux2 = (Nodo) n3;
                                String operacion = "";
                                String resultado = "";
                                String tipo = "";
                                if(aux.getValue() != null && aux2.getValue() != null){
                                    if (n2.equals("+")) {
                                        if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("INTEGER")) {
                                        // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            int cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            int auxi = cant1 + cant2;
                                            resultado = auxi + "";
                                            operacion = "SUMA";
                                            tipo = "INTEGER";
                                        } else if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {                                           
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 + cant2;
                                            resultado = auxi + "";
                                            operacion = "SUMA";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("INTEGER")) {
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            float cant1 = 0;
                                            int cant2 = 0;
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 + cant2;
                                            resultado = auxi + "";
                                            operacion = "SUMA";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            float cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 + cant2;
                                            resultado = auxi + "";
                                            operacion = "SUMA";
                                            tipo = "FLOAT";
                                        }           
                                    } else if (n2.equals("-")) {
                                        if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("INTEGER")) {
                                        // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            int cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    if (identificador.valor != null) {
                                                        cant1 = Integer.valueOf((String)identificador.valor);
                                                    } else {
                                                        System.out.println("El valor 1 es nulo en la resta.");
                                                    }
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    if (identificador.valor != null) {
                                                        cant2 = Integer.valueOf((String)identificador.valor);
                                                    } else {
                                                        System.out.println("El valor 2 es nulo en la resta 2.");
                                                    }
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            if (cant1 != 0 && cant2 != 0) {
                                                int auxi = cant1 - cant2;
                                                resultado = auxi + "";
                                                operacion = "RESTA";
                                                tipo = "INTEGER";
                                            } else {
                                                System.out.println("Hay algun valor nulo en la resta.");
                                            }
                                        
                                        } else if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 - cant2;
                                            resultado = auxi + "";
                                            operacion = "RESTA";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("INTEGER")) {
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            float cant1 = 0;
                                            int cant2 = 0;
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 - cant2;
                                            resultado = auxi + "";
                                            operacion = "RESTA";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            float cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 - cant2;
                                            resultado = auxi + "";
                                            operacion = "RESTA";
                                            tipo = "FLOAT";
                                        }          
                                    }

                                }else{
                                    System.out.println("Error: Valor de funcion aun retorna nulo.");
                                    ErroresSemanticos.add("Error: Valor de funcion aun retorna nulo.");
                                }
                                
                                Nodo nodo = new Nodo(operacion,resultado, parser.cont, tipo);
                                nodo.AddHijo(aux);
                                nodo.AddHijo(aux2);
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresion_aritmetica ::= expresion_aritmetica OPMULTIPLICACION expresion_aritmetica 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo aux = (Nodo) n1;
                                Nodo aux2 = (Nodo) n3;
                                String operacion = "";
                                String resultado = "";
                                String tipo = "";
                                if(aux.getValue() != null && aux2.getValue() != null){
                                
                                    if (n2.equals("*")) {
                                        if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("INTEGER")) {
                                        // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            int cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    if (identificador.valor != null) {
                                                        cant1 = Integer.valueOf((String)identificador.valor);
                                                    } else {
                                                        System.out.println("El valor de la variable es nulo.");
                                                    }                                              
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            int auxi = cant1 * cant2;
                                            resultado = auxi + "";
                                            operacion = "MULTIPLICACION";
                                            tipo = "INTEGER";
                                        } else if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 * cant2;
                                            resultado = auxi + "";
                                            operacion = "MULTIPLICACION";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("INTEGER")) {
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            float cant1 = 0;
                                            int cant2 = 0;
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                            System.out.println("ENtra");
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 * cant2;
                                            resultado = auxi + "";
                                            operacion = "MULTIPLICACION";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            float cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                            System.out.println("ENtra");
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 * cant2;
                                            resultado = auxi + "";
                                            operacion = "MULTIPLICACION";
                                            tipo = "FLOAT";
                                        }           
                                    } else if (n2.equals("/")) {
                                        if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("INTEGER")) {
                                        // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            int cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            int auxi = cant1 / cant2;
                                            resultado = auxi + "";
                                            operacion = "DIVISION";
                                            tipo = "INTEGER";
                                        } else if (aux.getTipo().equals("INTEGER") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            int cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Integer.parseInt(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                            System.out.println("ENtra");
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 / cant2;
                                            resultado = auxi + "";
                                            operacion = "DIVISION";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("INTEGER")) {
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            float cant1 = 0;
                                            int cant2 = 0;
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            try {
                                                cant2 = Integer.parseInt(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                            System.out.println("ENtra");
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Integer.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 / cant2;
                                            resultado = auxi + "";
                                            operacion = "DIVISION";
                                            tipo = "FLOAT";
                                        } else if (aux.getTipo().equals("FLOAT") && aux2.getTipo().equals("FLOAT")) {
                                            // Debemos averiguar si el valor es un id, función o simplemente un número
                                            String valor1 = aux.getValue();
                                            String valor2 = aux2.getValue();
                                            // Nuestros dos valores a operar
                                            float cant1 = 0;
                                            float cant2 = 0;
                                            /* Se asigna el texto a un entero. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant1 = Float.parseFloat(valor1);
                                            } catch (NumberFormatException e) {
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant1 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            /* Se asigna el texto a un float. Si esto falla, significa
                                            que estamos lidiando con un identificador.*/
                                            try {
                                                cant2 = Float.parseFloat(aux2.getValue());
                                            } catch (NumberFormatException e) {
                                            System.out.println("ENtra");
                                                Simbolo identificador = null;
                                                identificador = TablaSimbolos.buscar(aux2.getValue());
                                                if(identificador != null ){ //Significa que la variable ya existe
                                                    cant2 = Float.valueOf((String)identificador.valor);
                                                }else{
                                                    System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                    ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                                }
                                            }
                                            float auxi = (float) cant1 / cant2;
                                            resultado = auxi + "";
                                            operacion = "DIVISION";
                                            tipo = "FLOAT";
                                        }          
                                    }
                                }else{
                                    System.out.println("Error: Valor de funcion aun retorna nulo.");
                                    ErroresSemanticos.add("Error: Valor de funcion aun retorna nulo.");
                                }
                                Nodo nodo = new Nodo(operacion,resultado, parser.cont, tipo);
                                nodo.AddHijo(aux);
                                nodo.AddHijo(aux2);
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expresion_aritmetica ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo nodo = new Nodo("NUM", n1.toString(), parser.cont,"INTEGER");
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expresion_aritmetica ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                String tipo = "";
                                try{
                                    Simbolo identificador = null;
                                    identificador = TablaSimbolos.buscar(n1);
                                    if(identificador != null ){ //Significa que la variable ya existe
                                        tipo = identificador.tipoVariable;
                                    }else{
                                        System.out.println("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                        ErroresSemanticos.add("Error: Variable \""+ n1 +"\" no ha sido declarada.");
                                    }
                                } catch(Exception e) {
                                    e.printStackTrace();
                                    System.out.println("Error al agregar la variable");            
                                }
                                Nodo nodo = new Nodo("ID", n1, parser.cont,tipo);
                                parser.cont++;
                                RESULT = nodo;                  
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expresion_aritmetica ::= NUMFLOAT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo nodo = new Nodo("NUMFLOAT", n1, parser.cont,"FLOAT");
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresion_aritmetica ::= llamar_funcion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Nodo aux = (Nodo) n1;
                                Nodo nodo = new Nodo(aux.tag, aux.value, parser.cont, aux.tipo );
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expresion_aritmetica ::= PARIZQ expresion_aritmetica PARDER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Nodo aux = (Nodo) n1;
                                Nodo nodo = new Nodo(aux.tag,aux.value,parser.cont,aux.tipo);
                                parser.cont++;
                                RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_variable ::= INTEGER 
            {
              Object RESULT =null;
		 
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "INTEGER", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "FLOAT", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_variable ::= BOOLEAN 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "BOOLEAN", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipo_variable ::= STRINGTYPE 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "STRINGTYPE", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("bloque_if", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo((Nodo) child4);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // bloque_if ::= IF condicion error codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else error IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // condicion ::= expresion_booleana OR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoOr = new Nodo("OR", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoOr);
            nodo.AddHijo((Nodo) child2);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condicion ::= expresion_booleana AND condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAnd = new Nodo("AND", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAnd);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condicion ::= expresion_booleana XOR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoXor = new Nodo("XOR", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoXor);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condicion ::= expresion_booleana 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("expresion_booleana", parser.cont);
            parser.cont++;     

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expresion_booleana ::= operando OPREL operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("expresion_booleana", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOPREL = new Nodo("OPREL", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoOPREL);
                    nodo.AddHijo((Nodo) child2);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expresion_booleana ::= operando error operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operando ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("NUM", n1.toString(), parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operando ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operando ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operando ::= funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("operando", parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operando ::= NULL 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("operando", "NULL", parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("bloque_elsif", parser.cont);
                parser.cont++;
                
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bloque_elsif ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // bloque_elsif ::= ELSIF condicion error codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // bloque_else ::= ELSE codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("bloque_else", parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // bloque_else ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_loop", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ciclo_loop ::= LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_while", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ciclo_while ::= WHILE condicion error codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_for", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum = new Nodo("NUM", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum2 = new Nodo("NUM",n5.toString(), parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoNum);
            nodo.AddHijo(nodoNum2);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
    
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ciclo_for ::= FOR error IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ciclo_for ::= FOR ID error NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ciclo_for ::= FOR ID IN error DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ciclo_for ::= FOR ID IN NUM error NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS error LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM error codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // salir_ciclo ::= EXIT WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("salir_ciclo", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // salir_ciclo ::= error WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // salir_ciclo ::= EXIT error condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // put ::= PUT PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoNum = new Nodo("NUM", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoNum);
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // put ::= PUT error NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // put ::= PUT PARIZQ error PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // put ::= PUT PARIZQ NUM error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // put ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;
        
        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoString = new Nodo("STRING", n2.toString().replaceAll("\"", ""), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoString);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // put ::= PUT error STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // put ::= PUT PARIZQ STRING error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // put ::= PUT PARIZQ STRING PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // put ::= PUT PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoTrue = new Nodo("TRUE", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoTrue);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // put ::= PUT error TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // put ::= PUT PARIZQ TRUE error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // put ::= PUT PARIZQ TRUE PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // put ::= PUT PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoFalse = new Nodo("FALSE", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoFalse);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // put ::= PUT error FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // put ::= PUT PARIZQ FALSE error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // put ::= PUT PARIZQ FALSE PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // put ::= PUT PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoID = new Nodo("ID", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoID);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // put ::= PUT error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // put ::= PUT PARIZQ ID error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // put ::= PUT PARIZQ ID PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // get ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo("get", parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont,"STRING");
    parser.cont++;

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoId);
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // get ::= GET error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // get ::= GET PARIZQ error PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // get ::= GET PARIZQ ID error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // get ::= GET PARIZQ ID PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
