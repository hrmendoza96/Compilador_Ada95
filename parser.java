
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\003\011\000\002\003\003" +
    "\000\002\004\010\000\002\004\007\000\002\022\004\000" +
    "\002\022\003\000\002\022\004\000\002\022\003\000\002" +
    "\022\004\000\002\022\003\000\002\022\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\003\000\002\022\004" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\022\004\000\002\022\003\000\002\022\004\000\002" +
    "\022\003\000\002\022\005\000\002\022\004\000\002\022" +
    "\003\000\002\005\005\000\002\005\004\000\002\006\010" +
    "\000\002\006\006\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\002\000\002" +
    "\021\005\000\002\021\003\000\002\010\004\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\011" +
    "\006\000\002\035\014\000\002\012\016\000\002\012\015" +
    "\000\002\013\004\000\002\014\004\000\002\015\005\000" +
    "\002\015\006\000\002\044\005\000\002\044\010\000\002" +
    "\044\010\000\002\044\010\000\002\044\010\000\002\044" +
    "\010\000\002\044\006\000\002\044\006\000\002\044\006" +
    "\000\002\044\006\000\002\044\006\000\002\044\011\000" +
    "\002\044\011\000\002\044\011\000\002\044\011\000\002" +
    "\044\011\000\002\036\003\000\002\037\004\000\002\040" +
    "\005\000\002\040\002\000\002\041\004\000\002\042\005" +
    "\000\002\042\002\000\002\043\003\000\002\043\003\000" +
    "\002\043\005\000\002\043\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\032\013\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\025\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\033\007\000\002\033" +
    "\002\000\002\034\004\000\002\034\002\000\002\026\011" +
    "\000\002\030\013\000\002\027\017\000\002\031\005\000" +
    "\002\046\007\000\002\046\007\000\002\046\007\000\002" +
    "\046\007\000\002\046\007\000\002\046\007\000\002\047" +
    "\007\000\002\047\007\000\002\047\007\000\002\047\007" +
    "\000\002\047\007\000\002\045\007\000\002\017\005\000" +
    "\002\017\003\000\002\017\007\000\002\017\005\000\002" +
    "\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\010\003\006\004\005\005\007\001\002\000" +
    "\004\002\000\001\002\000\004\062\u011f\001\002\000\004" +
    "\002\ufffc\001\002\000\004\062\012\001\002\000\004\002" +
    "\011\001\002\000\004\002\001\001\002\000\004\055\014" +
    "\001\002\000\004\006\067\001\002\000\012\054\024\055" +
    "\022\062\023\063\015\001\002\000\022\013\uffab\016\uffab" +
    "\017\uffab\032\uffab\052\uffab\053\uffab\054\uffab\057\uffab\001" +
    "\002\000\004\057\066\001\002\000\004\050\051\001\002" +
    "\000\020\013\uffb0\016\uffb0\017\uffb0\032\uffb0\053\045\054" +
    "\uffb0\057\uffb0\001\002\000\022\013\uffa9\016\uffa9\017\uffa9" +
    "\032\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\001\002\000" +
    "\010\055\022\062\033\063\015\001\002\000\016\050\uffda" +
    "\052\uffac\053\uffac\054\uffac\055\014\060\040\001\002\000" +
    "\024\006\uffe3\011\uffe3\015\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\051\uffe3\057\uffe3\001\002\000\004\054\uffe0\001" +
    "\002\000\004\054\037\001\002\000\022\013\uffad\016\uffad" +
    "\017\uffad\032\uffad\052\031\053\uffad\054\uffad\057\uffad\001" +
    "\002\000\016\013\uffb3\016\uffb3\017\uffb3\032\uffb3\054\uffb3" +
    "\057\uffb3\001\002\000\010\055\022\062\033\063\015\001" +
    "\002\000\020\013\uffaf\016\uffaf\017\uffaf\032\uffaf\053\uffaf" +
    "\054\uffaf\057\uffaf\001\002\000\024\013\uffac\016\uffac\017" +
    "\uffac\032\uffac\052\uffac\053\uffac\054\uffac\055\014\057\uffac" +
    "\001\002\000\022\013\uffad\016\uffad\017\uffad\032\uffad\052" +
    "\031\053\uffad\054\uffad\057\uffad\001\002\000\020\013\uffae" +
    "\016\uffae\017\uffae\032\uffae\053\uffae\054\uffae\057\uffae\001" +
    "\002\000\020\015\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\051\uffc6\057\uffc6\001\002\000\024\006\uffe4\011\uffe4\015" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\051\uffe4\057\uffe4" +
    "\001\002\000\004\062\041\001\002\000\006\050\uffda\060" +
    "\040\001\002\000\004\050\uffdb\001\002\000\004\054\044" +
    "\001\002\000\022\013\uffaa\016\uffaa\017\uffaa\032\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\057\uffaa\001\002\000\010\055\022" +
    "\062\033\063\015\001\002\000\016\013\uffb2\016\uffb2\017" +
    "\uffb2\032\uffb2\054\uffb2\057\uffb2\001\002\000\020\013\uffb0" +
    "\016\uffb0\017\uffb0\032\uffb0\053\045\054\uffb0\057\uffb0\001" +
    "\002\000\016\013\uffb1\016\uffb1\017\uffb1\032\uffb1\054\uffb1" +
    "\057\uffb1\001\002\000\020\021\053\022\052\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002\000\014\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\001\002\000\016\022" +
    "\065\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002" +
    "\000\014\042\055\043\061\044\060\045\056\046\057\001" +
    "\002\000\012\011\uffa8\047\uffa8\054\uffa8\057\uffa8\001\002" +
    "\000\012\011\uffa4\047\uffa4\054\uffa4\057\uffa4\001\002\000" +
    "\012\011\uffa5\047\uffa5\054\uffa5\057\uffa5\001\002\000\012" +
    "\011\uffa6\047\uffa6\054\uffa6\057\uffa6\001\002\000\012\011" +
    "\uffa7\047\uffa7\054\uffa7\057\uffa7\001\002\000\006\054\uffe1" +
    "\057\063\001\002\000\010\055\022\062\023\063\015\001" +
    "\002\000\004\054\uffe2\001\002\000\014\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\001\002\000\054\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\023\uffc7\024\uffc7\032\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\052\uffc7\053\uffc7\054\uffc7\057\uffc7\062\uffc7" +
    "\001\002\000\014\042\055\043\061\044\060\045\056\046" +
    "\057\001\002\000\004\011\071\001\002\000\012\004\073" +
    "\005\103\012\104\062\101\001\002\000\012\004\073\005" +
    "\103\012\uffd4\062\101\001\002\000\004\062\u0114\001\002" +
    "\000\012\004\073\005\103\012\uffd2\062\101\001\002\000" +
    "\012\004\073\005\103\012\uffd0\062\101\001\002\000\012" +
    "\004\073\005\103\012\uffcc\062\101\001\002\000\012\004" +
    "\073\005\103\012\uffce\062\101\001\002\000\012\004\073" +
    "\005\103\012\uffd6\062\101\001\002\000\012\047\231\050" +
    "\u010a\055\014\060\u0109\001\002\000\004\002\ufffd\001\002" +
    "\000\004\062\371\001\002\000\026\003\126\006\115\014" +
    "\117\020\130\023\111\024\112\035\133\036\122\037\110" +
    "\062\120\001\002\000\012\004\073\005\103\012\uffd8\062" +
    "\101\001\002\000\004\012\107\001\002\000\026\003\126" +
    "\006\115\014\117\020\130\023\111\024\112\035\133\036" +
    "\122\037\110\062\120\001\002\000\004\055\344\001\002" +
    "\000\012\034\160\062\154\063\155\065\163\001\002\000" +
    "\026\003\126\006\115\014\117\020\130\023\111\024\112" +
    "\035\133\036\122\037\110\062\120\001\002\000\036\003" +
    "\126\006\115\013\uffec\014\117\016\uffec\017\uffec\020\130" +
    "\023\111\024\112\032\uffec\035\133\036\122\037\110\062" +
    "\120\001\002\000\004\013\322\001\002\000\010\055\022" +
    "\062\033\063\015\001\002\000\036\003\126\006\115\013" +
    "\uffee\014\117\016\uffee\017\uffee\020\130\023\111\024\112" +
    "\032\uffee\035\133\036\122\037\110\062\120\001\002\000" +
    "\012\034\160\062\154\063\155\065\163\001\002\000\012" +
    "\047\231\050\232\055\014\060\230\001\002\000\036\003" +
    "\126\006\115\013\uffea\014\117\016\uffea\017\uffea\020\130" +
    "\023\111\024\112\032\uffea\035\133\036\122\037\110\062" +
    "\120\001\002\000\004\055\204\001\002\000\036\003\126" +
    "\006\115\013\ufff4\014\117\016\ufff4\017\ufff4\020\130\023" +
    "\111\024\112\032\ufff4\035\133\036\122\037\110\062\120" +
    "\001\002\000\036\003\126\006\115\013\ufff6\014\117\016" +
    "\ufff6\017\ufff6\020\130\023\111\024\112\032\ufff6\035\133" +
    "\036\122\037\110\062\120\001\002\000\036\003\126\006" +
    "\115\013\ufff2\014\117\016\ufff2\017\ufff2\020\130\023\111" +
    "\024\112\032\ufff2\035\133\036\122\037\110\062\120\001" +
    "\002\000\012\013\uffe5\016\uffe5\017\uffe5\032\uffe5\001\002" +
    "\000\036\003\126\006\115\013\ufff8\014\117\016\ufff8\017" +
    "\ufff8\020\130\023\111\024\112\032\ufff8\035\133\036\122" +
    "\037\110\062\120\001\002\000\004\062\142\001\002\000" +
    "\036\003\126\006\115\013\uffe8\014\117\016\uffe8\017\uffe8" +
    "\020\130\023\111\024\112\032\uffe8\035\133\036\122\037" +
    "\110\062\120\001\002\000\036\003\126\006\115\013\ufff0" +
    "\014\117\016\ufff0\017\ufff0\020\130\023\111\024\112\032" +
    "\ufff0\035\133\036\122\037\110\062\120\001\002\000\004" +
    "\055\134\001\002\000\004\062\135\001\002\000\004\054" +
    "\136\001\002\000\004\057\137\001\002\000\036\003\uff85" +
    "\006\uff85\013\uff85\014\uff85\016\uff85\017\uff85\020\uff85\023" +
    "\uff85\024\uff85\032\uff85\035\uff85\036\uff85\037\uff85\062\uff85" +
    "\001\002\000\012\013\ufff1\016\ufff1\017\ufff1\032\ufff1\001" +
    "\002\000\012\013\uffe9\016\uffe9\017\uffe9\032\uffe9\001\002" +
    "\000\004\021\143\001\002\000\004\063\144\001\002\000" +
    "\004\061\145\001\002\000\004\063\146\001\002\000\004" +
    "\024\147\001\002\000\026\003\126\006\115\014\117\020" +
    "\130\023\111\024\112\035\133\036\122\037\110\062\120" +
    "\001\002\000\004\032\152\001\002\000\004\057\174\001" +
    "\002\000\004\033\153\001\002\000\012\034\160\062\154" +
    "\063\155\065\163\001\002\000\022\015\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\051\uff9c\055\014\057\uff9c\001\002" +
    "\000\020\015\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\051" +
    "\uff9d\057\uff9d\001\002\000\016\015\uff9f\024\uff9f\025\166" +
    "\026\170\027\167\057\uff9f\001\002\000\004\057\uff91\001" +
    "\002\000\020\015\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\051\uff99\057\uff99\001\002\000\004\051\164\001\002\000" +
    "\020\015\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\051\uff9b" +
    "\057\uff9b\001\002\000\020\015\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\051\uff9a\057\uff9a\001\002\000\012\034\160" +
    "\062\154\063\155\065\163\001\002\000\016\015\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\057\uff9e\001\002\000\012" +
    "\034\160\062\154\063\155\065\163\001\002\000\012\034" +
    "\160\062\154\063\155\065\163\001\002\000\012\034\160" +
    "\062\154\063\155\065\163\001\002\000\010\015\uffa2\024" +
    "\uffa2\057\uffa2\001\002\000\010\015\uffa0\024\uffa0\057\uffa0" +
    "\001\002\000\010\015\uffa1\024\uffa1\057\uffa1\001\002\000" +
    "\004\013\175\001\002\000\004\024\176\001\002\000\004" +
    "\057\177\001\002\000\036\003\uff92\006\uff92\013\uff92\014" +
    "\uff92\016\uff92\017\uff92\020\uff92\023\uff92\024\uff92\032\uff92" +
    "\035\uff92\036\uff92\037\uff92\062\uff92\001\002\000\012\013" +
    "\ufff9\016\ufff9\017\ufff9\032\ufff9\001\002\000\012\013\ufff3" +
    "\016\ufff3\017\ufff3\032\ufff3\001\002\000\012\013\ufff7\016" +
    "\ufff7\017\ufff7\032\ufff7\001\002\000\012\013\ufff5\016\ufff5" +
    "\017\ufff5\032\ufff5\001\002\000\016\030\211\031\210\062" +
    "\205\063\206\064\207\065\212\001\002\000\004\054\225" +
    "\001\002\000\004\054\223\001\002\000\004\054\221\001" +
    "\002\000\004\054\217\001\002\000\004\054\215\001\002" +
    "\000\004\054\213\001\002\000\004\057\214\001\002\000" +
    "\036\003\uff8e\006\uff8e\013\uff8e\014\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\023\uff8e\024\uff8e\032\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\062\uff8e\001\002\000\004\057\216\001\002\000\036" +
    "\003\uff8c\006\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\023\uff8c\024\uff8c\032\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\062\uff8c\001\002\000\004\057\220\001\002\000\036\003" +
    "\uff8d\006\uff8d\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\023\uff8d\024\uff8d\032\uff8d\035\uff8d\036\uff8d\037\uff8d\062" +
    "\uff8d\001\002\000\004\057\222\001\002\000\036\003\uff8f" +
    "\006\uff8f\013\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f\023" +
    "\uff8f\024\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f\062\uff8f" +
    "\001\002\000\004\057\224\001\002\000\036\003\uff90\006" +
    "\uff90\013\uff90\014\uff90\016\uff90\017\uff90\020\uff90\023\uff90" +
    "\024\uff90\032\uff90\035\uff90\036\uff90\037\uff90\062\uff90\001" +
    "\002\000\004\057\226\001\002\000\036\003\uff8b\006\uff8b" +
    "\013\uff8b\014\uff8b\016\uff8b\017\uff8b\020\uff8b\023\uff8b\024" +
    "\uff8b\032\uff8b\035\uff8b\036\uff8b\037\uff8b\062\uff8b\001\002" +
    "\000\012\013\uffeb\016\uffeb\017\uffeb\032\uffeb\001\002\000" +
    "\004\062\276\001\002\000\020\030\266\031\264\055\022" +
    "\062\033\063\015\064\265\065\270\001\002\000\016\010" +
    "\233\042\055\043\061\044\060\045\056\046\057\001\002" +
    "\000\014\042\055\043\061\044\060\045\056\046\057\001" +
    "\002\000\004\047\235\001\002\000\020\030\240\031\236" +
    "\055\022\062\033\063\015\064\237\065\242\001\002\000" +
    "\004\057\247\001\002\000\004\057\246\001\002\000\004" +
    "\057\245\001\002\000\004\057\244\001\002\000\004\057" +
    "\243\001\002\000\044\003\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\023" +
    "\uffbe\024\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\062\uffbe" +
    "\001\002\000\044\003\uffc2\004\uffc2\005\uffc2\006\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2\023\uffc2" +
    "\024\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2\062\uffc2\001" +
    "\002\000\044\003\uffc0\004\uffc0\005\uffc0\006\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024" +
    "\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\062\uffc0\001\002" +
    "\000\044\003\uffbf\004\uffbf\005\uffbf\006\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\023\uffbf\024\uffbf" +
    "\032\uffbf\035\uffbf\036\uffbf\037\uffbf\062\uffbf\001\002\000" +
    "\044\003\uffc1\004\uffc1\005\uffc1\006\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\016\uffc1\017\uffc1\020\uffc1\023\uffc1\024\uffc1\032" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\062\uffc1\001\002\000\004" +
    "\047\251\001\002\000\020\030\254\031\252\055\022\062" +
    "\033\063\015\064\253\065\256\001\002\000\004\057\263" +
    "\001\002\000\004\057\262\001\002\000\004\057\261\001" +
    "\002\000\004\057\260\001\002\000\004\057\257\001\002" +
    "\000\044\003\uffb4\004\uffb4\005\uffb4\006\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\023\uffb4\024\uffb4" +
    "\032\uffb4\035\uffb4\036\uffb4\037\uffb4\062\uffb4\001\002\000" +
    "\044\003\uffb8\004\uffb8\005\uffb8\006\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\016\uffb8\017\uffb8\020\uffb8\023\uffb8\024\uffb8\032" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\062\uffb8\001\002\000\044" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\024\uffb6\032\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\062\uffb6\001\002\000\044\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\023\uffb5\024\uffb5\032\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\062\uffb5\001\002\000\044\003\uffb7" +
    "\004\uffb7\005\uffb7\006\uffb7\012\uffb7\013\uffb7\014\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\023\uffb7\024\uffb7\032\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\062\uffb7\001\002\000\004\057\275\001" +
    "\002\000\004\057\274\001\002\000\004\057\273\001\002" +
    "\000\004\057\272\001\002\000\004\057\271\001\002\000" +
    "\044\003\uffb9\004\uffb9\005\uffb9\006\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\016\uffb9\017\uffb9\020\uffb9\023\uffb9\024\uffb9\032" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\062\uffb9\001\002\000\044" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\023\uffbd\024\uffbd\032\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\062\uffbd\001\002\000\044\003" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\023\uffbb\024\uffbb\032\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\062\uffbb\001\002\000\044\003\uffba" +
    "\004\uffba\005\uffba\006\uffba\012\uffba\013\uffba\014\uffba\016" +
    "\uffba\017\uffba\020\uffba\023\uffba\024\uffba\032\uffba\035\uffba" +
    "\036\uffba\037\uffba\062\uffba\001\002\000\044\003\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\023\uffbc\024\uffbc\032\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\062\uffbc\001\002\000\010\047\231\050\232" +
    "\060\230\001\002\000\044\003\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\023\uffc3\024\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\062" +
    "\uffc3\001\002\000\004\015\301\001\002\000\026\003\126" +
    "\006\115\014\117\020\130\023\111\024\112\035\133\036" +
    "\122\037\110\062\120\001\002\000\010\013\uff97\016\uff97" +
    "\017\303\001\002\000\012\034\160\062\154\063\155\065" +
    "\163\001\002\000\006\013\uff95\016\305\001\002\000\026" +
    "\003\126\006\115\014\117\020\130\023\111\024\112\035" +
    "\133\036\122\037\110\062\120\001\002\000\004\013\307" +
    "\001\002\000\004\014\310\001\002\000\004\057\311\001" +
    "\002\000\036\003\uffa3\006\uffa3\013\uffa3\014\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\023\uffa3\024\uffa3\032\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\062\uffa3\001\002\000\004\013\uff96\001\002" +
    "\000\004\015\314\001\002\000\026\003\126\006\115\014" +
    "\117\020\130\023\111\024\112\035\133\036\122\037\110" +
    "\062\120\001\002\000\010\013\uff97\016\uff97\017\303\001" +
    "\002\000\006\013\uff98\016\uff98\001\002\000\012\013\uffef" +
    "\016\uffef\017\uffef\032\uffef\001\002\000\014\013\uffe6\016" +
    "\uffe6\017\uffe6\032\uffe6\057\321\001\002\000\012\013\uffe7" +
    "\016\uffe7\017\uffe7\032\uffe7\001\002\000\004\062\323\001" +
    "\002\000\004\057\324\001\002\000\004\002\ufffb\001\002" +
    "\000\012\013\uffed\016\uffed\017\uffed\032\uffed\001\002\000" +
    "\004\032\152\001\002\000\004\057\330\001\002\000\004" +
    "\013\331\001\002\000\004\024\332\001\002\000\004\057" +
    "\333\001\002\000\036\003\uff94\006\uff94\013\uff94\014\uff94" +
    "\016\uff94\017\uff94\020\uff94\023\uff94\024\uff94\032\uff94\035" +
    "\uff94\036\uff94\037\uff94\062\uff94\001\002\000\004\024\335" +
    "\001\002\000\026\003\126\006\115\014\117\020\130\023" +
    "\111\024\112\035\133\036\122\037\110\062\120\001\002" +
    "\000\004\032\152\001\002\000\004\057\340\001\002\000" +
    "\004\013\341\001\002\000\004\024\342\001\002\000\004" +
    "\057\343\001\002\000\036\003\uff93\006\uff93\013\uff93\014" +
    "\uff93\016\uff93\017\uff93\020\uff93\023\uff93\024\uff93\032\uff93" +
    "\035\uff93\036\uff93\037\uff93\062\uff93\001\002\000\014\030" +
    "\350\031\347\063\345\064\346\065\351\001\002\000\004" +
    "\054\362\001\002\000\004\054\360\001\002\000\004\054" +
    "\356\001\002\000\004\054\354\001\002\000\004\054\352" +
    "\001\002\000\004\057\353\001\002\000\036\003\uff88\006" +
    "\uff88\013\uff88\014\uff88\016\uff88\017\uff88\020\uff88\023\uff88" +
    "\024\uff88\032\uff88\035\uff88\036\uff88\037\uff88\062\uff88\001" +
    "\002\000\004\057\355\001\002\000\036\003\uff86\006\uff86" +
    "\013\uff86\014\uff86\016\uff86\017\uff86\020\uff86\023\uff86\024" +
    "\uff86\032\uff86\035\uff86\036\uff86\037\uff86\062\uff86\001\002" +
    "\000\004\057\357\001\002\000\036\003\uff87\006\uff87\013" +
    "\uff87\014\uff87\016\uff87\017\uff87\020\uff87\023\uff87\024\uff87" +
    "\032\uff87\035\uff87\036\uff87\037\uff87\062\uff87\001\002\000" +
    "\004\057\361\001\002\000\036\003\uff89\006\uff89\013\uff89" +
    "\014\uff89\016\uff89\017\uff89\020\uff89\023\uff89\024\uff89\032" +
    "\uff89\035\uff89\036\uff89\037\uff89\062\uff89\001\002\000\004" +
    "\057\363\001\002\000\036\003\uff8a\006\uff8a\013\uff8a\014" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\023\uff8a\024\uff8a\032\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\062\uff8a\001\002\000\004\012" +
    "\uffd9\001\002\000\004\013\366\001\002\000\004\062\367" +
    "\001\002\000\004\057\370\001\002\000\004\002\ufffa\001" +
    "\002\000\004\055\014\001\002\000\004\006\373\001\002" +
    "\000\014\042\055\043\061\044\060\045\056\046\057\001" +
    "\002\000\004\011\375\001\002\000\012\004\073\005\103" +
    "\012\376\062\101\001\002\000\026\003\126\006\115\014" +
    "\117\020\130\023\111\024\112\035\133\036\122\037\110" +
    "\062\120\001\002\000\004\012\u0100\001\002\000\026\003" +
    "\126\006\115\014\117\020\130\023\111\024\112\035\133" +
    "\036\122\037\110\062\120\001\002\000\004\013\u0102\001" +
    "\002\000\004\062\u0103\001\002\000\004\057\u0104\001\002" +
    "\000\012\004\uffc9\005\uffc9\012\uffc9\062\uffc9\001\002\000" +
    "\004\013\u0106\001\002\000\004\062\u0107\001\002\000\004" +
    "\057\u0108\001\002\000\012\004\uffc8\005\uffc8\012\uffc8\062" +
    "\uffc8\001\002\000\004\062\u010d\001\002\000\016\010\233" +
    "\042\055\043\061\044\060\045\056\046\057\001\002\000" +
    "\006\047\235\057\u010c\001\002\000\012\004\uffc4\005\uffc4" +
    "\012\uffc4\062\uffc4\001\002\000\010\047\231\050\u010a\060" +
    "\u0109\001\002\000\012\004\uffc5\005\uffc5\012\uffc5\062\uffc5" +
    "\001\002\000\004\012\uffd7\001\002\000\004\012\uffcf\001" +
    "\002\000\004\012\uffcd\001\002\000\004\012\uffd1\001\002" +
    "\000\004\012\uffd3\001\002\000\004\055\014\001\002\000" +
    "\006\011\u0117\057\u0116\001\002\000\012\004\uffcb\005\uffcb" +
    "\012\uffcb\062\uffcb\001\002\000\010\004\073\005\103\062" +
    "\101\001\002\000\004\012\u0119\001\002\000\026\003\126" +
    "\006\115\014\117\020\130\023\111\024\112\035\133\036" +
    "\122\037\110\062\120\001\002\000\004\013\u011b\001\002" +
    "\000\004\062\u011c\001\002\000\004\057\u011d\001\002\000" +
    "\012\004\uffca\005\uffca\012\uffca\062\uffca\001\002\000\004" +
    "\012\uffd5\001\002\000\006\011\u0121\055\014\001\002\000" +
    "\004\011\u0123\001\002\000\012\004\073\005\103\012\104" +
    "\062\101\001\002\000\004\002\ufffe\001\002\000\012\004" +
    "\073\005\103\012\104\062\101\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\006\002\007\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\012\001" +
    "\001\000\002\001\001\000\022\006\025\013\020\014\015" +
    "\021\016\036\024\037\027\041\017\043\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\045\001\001\000\002\001\001\000\016\013\020\014" +
    "\015\036\042\037\027\041\017\043\026\001\001\000\004" +
    "\005\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\031\001\001\000\002\001\001" +
    "\000\010\013\020\014\015\043\033\001\001\000\002\001" +
    "\001\000\004\005\035\001\001\000\004\042\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\020\014" +
    "\015\041\046\043\026\001\001\000\002\001\001\000\004" +
    "\040\047\001\001\000\002\001\001\000\004\007\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\063\013\020\014\015\021\016\036\024\037" +
    "\027\041\017\043\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\067\001\001\000" +
    "\002\001\001\000\026\004\101\010\105\011\071\012\077" +
    "\013\073\014\015\015\104\016\076\035\074\044\075\001" +
    "\001\000\024\010\u011d\011\071\012\077\013\073\014\015" +
    "\015\104\016\076\035\074\044\075\001\001\000\002\001" +
    "\001\000\024\010\u0112\011\071\012\077\013\073\014\015" +
    "\015\104\016\076\035\074\044\075\001\001\000\024\010" +
    "\u0111\011\071\012\077\013\073\014\015\015\104\016\076" +
    "\035\074\044\075\001\001\000\024\010\u0110\011\071\012" +
    "\077\013\073\014\015\015\104\016\076\035\074\044\075" +
    "\001\001\000\024\010\u010f\011\071\012\077\013\073\014" +
    "\015\015\104\016\076\035\074\044\075\001\001\000\024" +
    "\010\u010e\011\071\012\077\013\073\014\015\015\104\016" +
    "\076\035\074\044\075\001\001\000\004\005\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\013\130\014" +
    "\015\022\364\026\122\027\126\030\123\032\124\044\120" +
    "\045\131\046\115\047\112\001\001\000\024\010\363\011" +
    "\071\012\077\013\073\014\015\015\104\016\076\035\074" +
    "\044\075\001\001\000\002\001\001\000\030\013\130\014" +
    "\015\022\113\026\122\027\126\030\123\032\124\044\120" +
    "\045\131\046\115\047\112\001\001\000\002\001\001\000" +
    "\012\014\161\023\333\024\160\025\155\001\001\000\030" +
    "\013\130\014\015\022\325\026\122\027\126\030\123\032" +
    "\124\044\120\045\131\046\115\047\112\001\001\000\030" +
    "\013\130\014\015\022\324\026\122\027\126\030\123\032" +
    "\124\044\120\045\131\046\115\047\112\001\001\000\002" +
    "\001\001\000\016\013\020\014\015\036\317\037\027\041" +
    "\017\043\026\001\001\000\030\013\130\014\015\022\316" +
    "\026\122\027\126\030\123\032\124\044\120\045\131\046" +
    "\115\047\112\001\001\000\012\014\161\023\277\024\160" +
    "\025\155\001\001\000\004\005\035\001\001\000\030\013" +
    "\130\014\015\022\226\026\122\027\126\030\123\032\124" +
    "\044\120\045\131\046\115\047\112\001\001\000\002\001" +
    "\001\000\030\013\130\014\015\022\202\026\122\027\126" +
    "\030\123\032\124\044\120\045\131\046\115\047\112\001" +
    "\001\000\030\013\130\014\015\022\201\026\122\027\126" +
    "\030\123\032\124\044\120\045\131\046\115\047\112\001" +
    "\001\000\030\013\130\014\015\022\200\026\122\027\126" +
    "\030\123\032\124\044\120\045\131\046\115\047\112\001" +
    "\001\000\002\001\001\000\030\013\130\014\015\022\177" +
    "\026\122\027\126\030\123\032\124\044\120\045\131\046" +
    "\115\047\112\001\001\000\002\001\001\000\030\013\130" +
    "\014\015\022\140\026\122\027\126\030\123\032\124\044" +
    "\120\045\131\046\115\047\112\001\001\000\030\013\130" +
    "\014\015\022\137\026\122\027\126\030\123\032\124\044" +
    "\120\045\131\046\115\047\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\013\130\014\015\022\147" +
    "\026\122\027\126\030\123\032\124\044\120\045\131\046" +
    "\115\047\112\001\001\000\004\031\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\161\023\156\024" +
    "\160\025\155\001\001\000\004\005\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\161\024\164\001\001\000\002\001\001\000" +
    "\012\014\161\023\172\024\160\025\155\001\001\000\012" +
    "\014\161\023\171\024\160\025\155\001\001\000\012\014" +
    "\161\023\170\024\160\025\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\276\001\001\000\016\013\020" +
    "\014\015\036\266\037\027\041\017\043\026\001\001\000" +
    "\004\020\233\001\001\000\004\020\247\001\001\000\002" +
    "\001\001\000\016\013\020\014\015\036\240\037\027\041" +
    "\017\043\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\020\014\015\036\254\037\027\041\017\043\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\130\014\015\022\301\026\122\027\126" +
    "\030\123\032\124\044\120\045\131\046\115\047\112\001" +
    "\001\000\004\033\303\001\001\000\012\014\161\023\312" +
    "\024\160\025\155\001\001\000\004\034\305\001\001\000" +
    "\030\013\130\014\015\022\311\026\122\027\126\030\123" +
    "\032\124\044\120\045\131\046\115\047\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\013" +
    "\130\014\015\022\314\026\122\027\126\030\123\032\124" +
    "\044\120\045\131\046\115\047\112\001\001\000\004\033" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\130\014\015\022\335\026\122\027\126\030" +
    "\123\032\124\044\120\045\131\046\115\047\112\001\001" +
    "\000\004\031\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\371\001\001\000" +
    "\002\001\001\000\004\020\373\001\001\000\002\001\001" +
    "\000\024\010\376\011\071\012\077\013\073\014\015\015" +
    "\104\016\076\035\074\044\075\001\001\000\030\013\130" +
    "\014\015\022\u0104\026\122\027\126\030\123\032\124\044" +
    "\120\045\131\046\115\047\112\001\001\000\002\001\001" +
    "\000\030\013\130\014\015\022\u0100\026\122\027\126\030" +
    "\123\032\124\044\120\045\131\046\115\047\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u010d\044\276\001" +
    "\001\000\004\020\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\u0117\011\071\012\077" +
    "\013\073\014\015\015\104\016\076\035\074\044\075\001" +
    "\001\000\002\001\001\000\030\013\130\014\015\022\u0119" +
    "\026\122\027\126\030\123\032\124\044\120\045\131\046" +
    "\115\047\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u011f\001\001\000\002\001\001\000\026\004\u0121" +
    "\010\105\011\071\012\077\013\073\014\015\015\104\016" +
    "\076\035\074\044\075\001\001\000\002\001\001\000\026" +
    "\004\u0123\010\105\011\071\012\077\013\073\014\015\015" +
    "\104\016\076\035\074\044\075\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
    public int cont = 0;
    /*public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }*/




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("Inicio");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Se añaden el hijo*/
        nodo.AddHijo((Nodo) child1);

        /*Solamente en el cuerpo inicial se le asigna el nodo principal al padre.*/
        parser.padre = (Nodo) nodo;

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_principal ::= PROCEDURE ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(n1.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n3.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_principal ::= PROCEDURE ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(n1.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n3.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(n1.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n2.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(n3.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(n4.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_principal ::= error 
            {
              Object RESULT =null;
		System.out.println("Hay un error en procedure");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(n1.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(n2.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(n3.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(n4.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            //nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child2);
                            //nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            //nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comienza_cuerpo_principal ::= BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(n1.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(n2.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(n3.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(n4.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            //nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child1);
                            //nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            //nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= ciclo_for codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= ciclo_for 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= ciclo_while codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= ciclo_while 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ciclo_loop codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= ciclo_loop 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= bloque_if codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= bloque_if 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= get codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= get 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= put codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo ::= put 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo ::= put_line codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigo ::= put_line 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codigo ::= asignacion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // codigo ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // codigo ::= llamar_funcion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // codigo ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codigo ::= RETURN expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("codigo");
            nodo.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codigo ::= RETURN expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("codigo");
            nodo.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // codigo ::= error 
            {
              Object RESULT =null;
		System.out.println("Hay un error en el codigo.")
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= PARIZQ datos_parametros PARDER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(n1.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(n2.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= PARIZQ PARDER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(n1.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(n2.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n1.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoSemicolon);
                    nodo.AddHijo((Nodo) child4);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n1.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datos_parametros ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setTag("datos_parametros");
                        nodo.setId(parser.cont);
                        parser.cont++;
                        
                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_parametro ::= IN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue(n1.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue(n2.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_parametro ::= IN OUT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIn = new Nodo();
                nodoIn.setTag("IN");
                nodoIn.setValue(n1.toString());
                nodoIn.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoOut = new Nodo();
                nodoOut.setTag("OUT");
                nodoOut.setValue(n2.toString());
                nodoOut.setId(parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoIn);
                nodo.AddHijo(nodoOut);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_parametro ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                //nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listar_ids ::= ID COMA listar_ids 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(n2.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listar_ids ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;


            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_declaracion ::= declarar_variable tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_declaracion ::= declarar_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_declaracion ::= declarar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_declaracion ::= declarar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_declaracion ::= declarar_procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_declaracion ::= declarar_procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_declaracion ::= llamar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_declaracion ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_declaracion ::= procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_declaracion ::= procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_declaracion ::= declaracion_arreglo tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_declaracion ::= declaracion_arreglo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_declaracion ::= asignacion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setTag("tipo_declaracion");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);
                        nodo.AddHijo((Nodo) child2);

                        RESULT = nodo;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_declaracion ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setTag("tipo_declaracion");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarar_procedimiento ::= PROCEDURE ID parametros SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /*Se crea el nodo prinicipal*/
                        Nodo nodo = new Nodo();
                        nodo.setTag("declarar_procedimiento");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoProcedure = new Nodo();
                        nodoProcedure.setTag("PROCEDURE");
                        nodoProcedure.setValue(n1.toString());
                        nodoProcedure.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoId = new Nodo();
                        nodoId.setTag("ID");
                        nodoId.setValue(n2.toString());
                        nodoId.setId(parser.cont);
                        parser.cont++;

                         /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoSemicolon = new Nodo();
                        nodoSemicolon.setTag("SEMICOLON");
                        nodoSemicolon.setValue(nodoSemicolon.toString());
                        nodoSemicolon.setId(parser.cont);
                        parser.cont++;


                        /*Se añaden los hijos*/
                        nodo.AddHijo(nodoProcedure);
                        nodo.AddHijo(nodoId);
                        nodo.AddHijo((Nodo) child1);
                       // nodo.AddHijo(nodoSemicolon);

                        /*Asignar el nodo al RESULT para continuar el recorrido*/
                        RESULT = nodo;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedimiento ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("procedimiento");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoProcedure = new Nodo();
                nodoProcedure.setTag("PROCEDURE");
                nodoProcedure.setValue(nodoProcedure.toString());
                nodoProcedure.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo();
                nodoId.setTag("ID");
                nodoId.setValue(n2.toString());
                nodoId.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo();
                nodoId2.setTag("ID");
                nodoId2.setValue(n6.toString());
                nodoId2.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIs = new Nodo();
                nodoIs.setTag("IS");
                nodoIs.setValue(nodoIs.toString());
                nodoIs.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoBegin = new Nodo();
                nodoBegin.setTag("BEGIN");
                nodoBegin.setValue(nodoBegin.toString());
                nodoBegin.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoEnd = new Nodo();
                nodoEnd.setTag("END");
                nodoEnd.setValue(nodoEnd.toString());
                nodoEnd.setId(parser.cont);
                parser.cont++;
                

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;


                /*Se añaden los hijos*/
                nodo.AddHijo(nodoProcedure);
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoIs);
                nodo.AddHijo((Nodo) child2);
                //nodo.AddHijo(nodoBegin);
                nodo.AddHijo((Nodo) child3);
                //nodo.AddHijo(nodoEnd);
                nodo.AddHijo(nodoId2);
                //nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(n2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child4);
                    //nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    //nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(n2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoIs);
                    //nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child3);
                    //nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    //nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamar_funcion ::= funcion SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("llamar_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcion ::= ID parametros 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("funcion");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoId = new Nodo();
        nodoId.setTag("ID");
        nodoId.setValue(n1.toString());
        nodoId.setId(parser.cont);
        parser.cont++;

        
        /*Se añaden los hijos*/
        nodo.AddHijo(nodoId);
        nodo.AddHijo((Nodo) child1);
        

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declarar_variable ::= ID COMA declarar_variable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n2.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declarar_variable ::= ID DECLARACION tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n2.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                   

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoSemicolon);

                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= ID COMA asignacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(n2.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(n4.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n4.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n4.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n4.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n3.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n4.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion ::= ID ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child1);
           // nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n3.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n3.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion ::= ID ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n3.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= ID ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n2.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n3.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
           // nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(n5.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(n5.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(n5.toString().replaceAll("\"", ""));
            nodoString.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(n2.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(n3.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(n4.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(n5.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            //nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_aritmetica ::= E 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("expresion_aritmetica");
                            nodo.setId(parser.cont);
                            parser.cont++;

                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            
                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= T E_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("E");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E_prima ::= OPSUMA T E_prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo();
            nodo.setTag("E_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoOPSUMA = new Nodo();
            nodoOPSUMA.setTag("OPSUMA");
            nodoOPSUMA.setValue(n1.toString());
            nodoOPSUMA.setId(parser.cont);
            parser.cont++;


            nodo.AddHijo(nodoOPSUMA);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo();
            nodo.setId(parser.cont);
            nodo.setTag("VACIO");
            parser.cont++;

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T ::= F T_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("T");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T_prima ::= OPMULTIPLICACION F T_prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo();
            nodo.setTag("T_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoMult = new Nodo();
            nodoMult.setTag("OPMULTIPLICACION");
            nodoMult.setValue(n1.toString());
            nodoMult.setId(parser.cont);
            parser.cont++;

            nodo.AddHijo(nodoMult);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo();
            nodo.setTag("VACIO");
            nodo.setId(parser.cont);
            parser.cont++;

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // F ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setTag("ID");
        nodo.setValue(n1.toString());
        nodo.setId(parser.cont);
        parser.cont++;

        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("NUM");
        //nodo.setValue("NUM");
        nodo.setValue(n1.toString());
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= PARIZQ expresion_aritmetica PARDER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n2.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo(nodoParder);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // F ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.AddHijo((Nodo) child1);

        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_variable ::= INTEGER 
            {
              Object RESULT =null;
		 
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("FLOAT");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_variable ::= BOOLEAN 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("BOOLEAN");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_variable ::= STRINGTYPE 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("STRINGTYPE");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_variable ::= CHARACTER 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("CHARACTER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_if");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf = new Nodo();
            nodoIf.setTag("IF");
            nodoIf.setValue(nodoIf.toString());
            nodoIf.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf2 = new Nodo();
            nodoIf2.setTag("IF");
            nodoIf2.setValue(nodoIf2.toString());
            nodoIf2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoThen = new Nodo();
            nodoThen.setTag("THEN");
            nodoThen.setValue(nodoThen.toString());
            nodoThen.setId(parser.cont);
            parser.cont++;


            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoIf);
            nodo.AddHijo((Nodo) child1);
            //nodo.AddHijo(nodoThen);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo((Nodo) child4);
            //nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoIf2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion ::= expresion_booleana OR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoOr = new Nodo();
            nodoOr.setTag("OR");
            nodoOr.setValue(n1.toString());
            nodoOr.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoOr);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion ::= expresion_booleana AND condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAnd = new Nodo();
            nodoAnd.setTag("AND");
            nodoAnd.setValue(n1.toString());
            nodoAnd.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAnd);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion ::= expresion_booleana XOR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoXor = new Nodo();
            nodoXor.setTag("XOR");
            nodoXor.setValue(n1.toString());
            nodoXor.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoXor);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion ::= expresion_booleana 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("expresion_booleana");
            nodo.setId(parser.cont);
            parser.cont++;     

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_booleana ::= operando OPREL operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("expresion_booleana");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOPREL = new Nodo();
                    nodoOPREL.setTag("OPREL");
                    nodoOPREL.setValue(n1.toString());
                    nodoOPREL.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoOPREL);
                    nodo.AddHijo((Nodo) child2);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operando ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("NUM");
            nodo.setValue(n1.toString());
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operando ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ID");
            nodo.setValue(n1.toString());
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operando ::= funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operando ::= CHAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setTag("CHAR");
                nodo.setValue(n1.toString());
                parser.cont++;

                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operando ::= NULL 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setValue("NULL");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("bloque_elsif");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoElsif = new Nodo();
                nodoElsif.setTag("ELSIF");
                nodoElsif.setValue(nodoElsif.toString());
                nodoElsif.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoThen = new Nodo();
                nodoThen.setTag("THEN");
                nodoThen.setValue(nodoThen.toString());
                nodoThen.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                //nodo.AddHijo(nodoElsif);
                nodo.AddHijo((Nodo) child1);
                //nodo.AddHijo(nodoThen);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bloque_elsif ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloque_else ::= ELSE codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_else");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoElse = new Nodo();
            nodoElse.setTag("ELSE");
            nodoElse.setValue(nodoElse.toString());
            nodoElse.setId(parser.cont);
            parser.cont++;

            

            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoElse);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bloque_else ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("VACIO");
                //nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_loop");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_while");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhile = new Nodo();
            nodoWhile.setTag("WHILE");
            nodoWhile.setValue(nodoWhile.toString());
            nodoWhile.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoWhile);
            nodo.AddHijo((Nodo) child1);
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
            //nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_for");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFor = new Nodo();
            nodoFor.setTag("FOR");
            nodoFor.setValue(nodoFor.toString());
            nodoFor.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(n1.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIn = new Nodo();
            nodoIn.setTag("IN");
            nodoIn.setValue(n2.toString());
            nodoIn.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum = new Nodo();
            nodoNum.setTag("NUM");
            nodoNum.setValue(n3.toString());
            nodoNum.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum2 = new Nodo();
            nodoNum2.setTag("NUM");
            nodoNum2.setValue(n5.toString());
            nodoNum2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDosPuntos = new Nodo();
            nodoDosPuntos.setTag("DOSPUNTOS");
            nodoDosPuntos.setValue(n4.toString());
            nodoDosPuntos.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoFor);
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoIn);
            nodo.AddHijo(nodoNum);
            nodo.AddHijo(nodoDosPuntos);
            nodo.AddHijo(nodoNum2);
            //nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            //nodo.AddHijo(nodoEnd);
            //nodo.AddHijo(nodoLoop2);
           // nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // salir_ciclo ::= EXIT WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("salir_ciclo");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoExit = new Nodo();
            nodoExit.setTag("EXIT");
            nodoExit.setValue(nodoExit.toString());
            nodoExit.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhen = new Nodo();
            nodoWhen.setTag("WHEN");
            nodoWhen.setValue(nodoWhen.toString());
            nodoWhen.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            //nodo.AddHijo(nodoExit);
            //nodo.AddHijo(nodoWhen);
            nodo.AddHijo((Nodo) child1);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // put ::= PUT PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoNum = new Nodo();
    nodoNum.setTag("NUM");
    nodoNum.setValue(n2.toString());
    nodoNum.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoNum);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // put ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoString = new Nodo();
    nodoString.setTag("STRING");
    nodoString.setValue(n2.toString().replaceAll("\"", ""));
    nodoString.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoString);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // put ::= PUT PARIZQ CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoChar = new Nodo();
    nodoChar.setTag("CHAR");
    nodoChar.setValue(n2.toString());
    nodoChar.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoChar);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // put ::= PUT PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

     /*Nuevo Nodo: TERMINAL*/
    Nodo nodoTrue = new Nodo();
    nodoTrue.setTag("TRUE");
    nodoTrue.setValue(n2.toString());
    nodoTrue.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoTrue);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // put ::= PUT PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoFalse = new Nodo();
    nodoFalse.setTag("FALSE");
    nodoFalse.setValue(n2.toString());
    nodoFalse.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoFalse);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // put ::= PUT PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(n2.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // put_line ::= PUT_LINE PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoNum = new Nodo();
        nodoNum.setTag("NUM");
        nodoNum.setValue(n2.toString());
        nodoNum.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoNum);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // put_line ::= PUT_LINE PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoString = new Nodo();
        nodoString.setTag("STRING");
        nodoString.setValue(n2.toString().replaceAll("\"", ""));
        nodoString.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoString);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // put_line ::= PUT_LINE PARIZQ CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoChar = new Nodo();
        nodoChar.setTag("CHAR");
        nodoChar.setValue(n2.toString());
        nodoChar.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoChar);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // put_line ::= PUT_LINE PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoTrue = new Nodo();
        nodoTrue.setTag("TRUE");
        nodoTrue.setValue(n2.toString());
        nodoTrue.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoTrue);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // put_line ::= PUT_LINE PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(n1.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoFalse = new Nodo();
        nodoFalse.setTag("FALSE");
        nodoFalse.setValue(n2.toString());
        nodoFalse.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(n3.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        //nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoFalse);
        nodo.AddHijo(nodoParder);
        //nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // get ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("get");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoGet = new Nodo();
    nodoGet.setTag("GET");
    nodoGet.setValue(nodoGet.toString());
    nodoGet.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(n1.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(n2.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(n3.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    //nodo.AddHijo(nodoGet);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    //nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

	;

/*==================================================ARREGLOS=========================================*/
declaracion_arreglo ::= ID:n1 DECLARACION:n2 ARRAY PARIZQ:n3 dimension_arreglo:child1 PARDER:n4 OF tipo_variable:child2 SEMICOLON {:
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declaracion_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(n1.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(n2.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoArray = new Nodo();
                    nodoArray.setTag("ARRAY");
                    nodoArray.setValue(nodoArray.toString());
                    nodoArray.setId(parser.cont);
                    parser.cont++;

                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParizq = new Nodo();
                    nodoParizq.setTag("PARIZQ");
                    nodoParizq.setValue(n3.toString());
                    nodoParizq.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParder = new Nodo();
                    nodoParder.setTag("PARDER");
                    nodoParder.setValue(n4.toString());
                    nodoParder.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOF = new Nodo();
                    nodoOF.setTag("OF");
                    nodoOF.setValue(nodoOF.toString());
                    nodoOF.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    //nodo.AddHijo(nodoArray);
                    nodo.AddHijo(nodoParizq);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoParder);
                   // nodo.AddHijo(nodoOF);
                    nodo.AddHijo((Nodo) child2);
                    //nodo.AddHijo(nodoSemicolon);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // dimension_arreglo ::= tipo_variable COMA dimension_arreglo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n1.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dimension_arreglo ::= tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dimension_arreglo ::= NUM DOSPUNTOS NUM COMA dimension_arreglo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(n1.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(n3.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(n2.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(n4.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    


                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dimension_arreglo ::= NUM DOSPUNTOS NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(n1.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(n3.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(n2.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dimension_arreglo ::= tipo_variable RANGE CAJA 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoRange = new Nodo();
                    nodoRange.setTag("RANGE");
                    nodoRange.setValue(nodoRange.toString());
                    nodoRange.setId(parser.cont);
                    parser.cont++;


                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoCaja = new Nodo();
                    nodoCaja.setTag("CAJA");
                    nodoCaja.setValue(nodoCaja.toString());
                    nodoCaja.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    //nodo.AddHijo(nodoRange);
                    //nodo.AddHijo(nodoCaja);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
