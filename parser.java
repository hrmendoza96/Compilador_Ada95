
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\366\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\007" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\007\000\002\004\002\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\020\004\000\002\020\003\000\002\020" +
    "\004\000\002\020\003\000\002\020\004\000\002\020\003" +
    "\000\002\020\004\000\002\020\003\000\002\020\004\000" +
    "\002\020\003\000\002\020\004\000\002\020\003\000\002" +
    "\020\004\000\002\020\003\000\002\020\004\000\002\020" +
    "\003\000\002\020\005\000\002\020\004\000\002\005\005" +
    "\000\002\005\004\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\006\000\002\006\006\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\002\000\002\007\004" +
    "\000\002\007\004\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\004\000\002\010\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\033\014\000\002\033\014\000\002\033" +
    "\013\000\002\033\013\000\002\012\016\000\002\012\016" +
    "\000\002\012\016\000\002\012\016\000\002\012\016\000" +
    "\002\012\016\000\002\012\016\000\002\012\016\000\002" +
    "\012\015\000\002\012\015\000\002\012\015\000\002\012" +
    "\015\000\002\012\015\000\002\012\015\000\002\012\015" +
    "\000\002\012\015\000\002\013\004\000\002\013\004\000" +
    "\002\014\004\000\002\015\005\000\002\015\005\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\042" +
    "\005\000\002\042\005\000\002\042\010\000\002\042\010" +
    "\000\002\042\010\000\002\042\010\000\002\042\010\000" +
    "\002\042\010\000\002\042\010\000\002\042\010\000\002" +
    "\042\010\000\002\042\010\000\002\042\010\000\002\042" +
    "\010\000\002\042\010\000\002\042\010\000\002\042\010" +
    "\000\002\042\010\000\002\042\006\000\002\042\006\000" +
    "\002\042\006\000\002\042\006\000\002\042\006\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\042" +
    "\006\000\002\042\006\000\002\042\006\000\002\042\006" +
    "\000\002\042\006\000\002\042\011\000\002\042\011\000" +
    "\002\042\011\000\002\042\011\000\002\042\011\000\002" +
    "\042\011\000\002\042\011\000\002\042\011\000\002\042" +
    "\011\000\002\042\011\000\002\042\011\000\002\042\011" +
    "\000\002\042\011\000\002\042\011\000\002\042\011\000" +
    "\002\042\011\000\002\042\011\000\002\034\003\000\002" +
    "\035\004\000\002\036\005\000\002\036\002\000\002\037" +
    "\004\000\002\040\005\000\002\040\002\000\002\041\003" +
    "\000\002\041\003\000\002\041\005\000\002\041\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\030\013\000\002\030\013\000\002\030" +
    "\013\000\002\030\013\000\002\030\013\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\023\005\000\002\023\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\031\007\000\002\031\002" +
    "\000\002\031\007\000\002\032\004\000\002\032\002\000" +
    "\002\024\011\000\002\024\011\000\002\024\011\000\002" +
    "\024\011\000\002\024\011\000\002\026\013\000\002\026" +
    "\013\000\002\026\013\000\002\026\013\000\002\026\013" +
    "\000\002\026\013\000\002\025\017\000\002\025\017\000" +
    "\002\025\017\000\002\025\017\000\002\025\017\000\002" +
    "\025\017\000\002\025\017\000\002\025\017\000\002\025" +
    "\017\000\002\025\017\000\002\025\017\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\007\000\002\044" +
    "\007\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\007\000\002\044" +
    "\007\000\002\044\007\000\002\044\007\000\002\044\007" +
    "\000\002\044\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\007\000\002\043\007\000\002\043\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0294\000\010\003\006\004\005\005\007\001\002\000" +
    "\004\002\000\001\002\000\006\003\u0288\055\u0287\001\002" +
    "\000\004\055\u027d\001\002\000\006\003\013\055\012\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\004\051\015\001\002\000\004\051\015\001\002\000" +
    "\004\006\105\001\002\000\014\003\025\050\027\051\023" +
    "\055\024\056\016\001\002\000\024\003\uff5f\012\uff5f\015" +
    "\uff5f\016\uff5f\031\uff5f\046\uff5f\047\uff5f\050\uff5f\052\uff5f" +
    "\001\002\000\006\003\104\052\103\001\002\000\006\003" +
    "\056\044\055\001\002\000\022\003\uff64\012\uff64\015\uff64" +
    "\016\uff64\031\uff64\047\051\050\uff64\052\uff64\001\002\000" +
    "\024\003\uff5d\012\uff5d\015\uff5d\016\uff5d\031\uff5d\046\uff5d" +
    "\047\uff5d\050\uff5d\052\uff5d\001\002\000\010\051\023\055" +
    "\035\056\016\001\002\000\020\003\uffc4\044\uffc4\046\uff60" +
    "\047\uff60\050\uff60\051\015\053\045\001\002\000\010\003" +
    "\uffc3\044\uffc3\053\042\001\002\000\004\050\uffce\001\002" +
    "\000\026\003\uffd4\006\uffd4\010\uffd4\014\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\045\uffd4\052\uffd4\001\002\000\004" +
    "\050\041\001\002\000\024\003\uff61\012\uff61\015\uff61\016" +
    "\uff61\031\uff61\046\033\047\uff61\050\uff61\052\uff61\001\002" +
    "\000\020\003\uff67\012\uff67\015\uff67\016\uff67\031\uff67\050" +
    "\uff67\052\uff67\001\002\000\010\051\023\055\035\056\016" +
    "\001\002\000\022\003\uff63\012\uff63\015\uff63\016\uff63\031" +
    "\uff63\047\uff63\050\uff63\052\uff63\001\002\000\026\003\uff60" +
    "\012\uff60\015\uff60\016\uff60\031\uff60\046\uff60\047\uff60\050" +
    "\uff60\051\015\052\uff60\001\002\000\024\003\uff61\012\uff61" +
    "\015\uff61\016\uff61\031\uff61\046\033\047\uff61\050\uff61\052" +
    "\uff61\001\002\000\022\003\uff62\012\uff62\015\uff62\016\uff62" +
    "\031\uff62\047\uff62\050\uff62\052\uff62\001\002\000\022\003" +
    "\uff9d\014\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\045\uff9d" +
    "\052\uff9d\001\002\000\026\003\uffd5\006\uffd5\010\uffd5\014" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\045\uffd5\052\uffd5" +
    "\001\002\000\006\003\025\055\043\001\002\000\010\003" +
    "\uffc4\044\uffc4\053\045\001\002\000\006\003\uffc5\044\uffc5" +
    "\001\002\000\006\003\025\055\043\001\002\000\006\003" +
    "\uffc6\044\uffc6\001\002\000\004\050\050\001\002\000\024" +
    "\003\uff5e\012\uff5e\015\uff5e\016\uff5e\031\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\052\uff5e\001\002\000\010\051\023\055\035" +
    "\056\016\001\002\000\020\003\uff66\012\uff66\015\uff66\016" +
    "\uff66\031\uff66\050\uff66\052\uff66\001\002\000\022\003\uff64" +
    "\012\uff64\015\uff64\016\uff64\031\uff64\047\051\050\uff64\052" +
    "\uff64\001\002\000\020\003\uff65\012\uff65\015\uff65\016\uff65" +
    "\031\uff65\050\uff65\052\uff65\001\002\000\020\003\061\020" +
    "\060\021\057\036\uffc9\037\uffc9\040\uffc9\042\uffc9\001\002" +
    "\000\020\003\061\020\060\021\057\036\uffc9\037\uffc9\040" +
    "\uffc9\042\uffc9\001\002\000\012\036\uffcc\037\uffcc\040\uffcc" +
    "\042\uffcc\001\002\000\016\003\074\021\073\036\uffcd\037" +
    "\uffcd\040\uffcd\042\uffcd\001\002\000\014\021\072\036\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\001\002\000\012\036\063\037" +
    "\065\040\067\042\064\001\002\000\014\003\uff5c\010\uff5c" +
    "\043\uff5c\050\uff5c\052\uff5c\001\002\000\014\003\uff59\010" +
    "\uff59\043\uff59\050\uff59\052\uff59\001\002\000\014\003\uff5b" +
    "\010\uff5b\043\uff5b\050\uff5b\052\uff5b\001\002\000\006\050" +
    "\uffcf\052\070\001\002\000\014\003\uff5a\010\uff5a\043\uff5a" +
    "\050\uff5a\052\uff5a\001\002\000\012\003\025\051\023\055" +
    "\024\056\016\001\002\000\004\050\uffd2\001\002\000\012" +
    "\036\uffc8\037\uffc8\040\uffc8\042\uffc8\001\002\000\012\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\001\002\000\012\036\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\001\002\000\012\036\063\037" +
    "\065\040\067\042\064\001\002\000\010\003\100\050\uffd0" +
    "\052\077\001\002\000\012\003\025\051\023\055\024\056" +
    "\016\001\002\000\012\003\025\051\023\055\024\056\016" +
    "\001\002\000\004\050\uffd1\001\002\000\004\050\uffd3\001" +
    "\002\000\052\003\uff9f\004\uff9f\005\uff9f\006\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\022\uff9f\023" +
    "\uff9f\031\uff9f\034\uff9f\035\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\052\uff9f\055\uff9f\001\002\000\052\003\uff9e\004\uff9e\005" +
    "\uff9e\006\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\022\uff9e\023\uff9e\031\uff9e\034\uff9e\035\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\052\uff9e\055\uff9e\001\002\000\012" +
    "\036\063\037\065\040\067\042\064\001\002\000\004\010" +
    "\107\001\002\000\016\002\uffec\003\117\004\111\005\121" +
    "\011\122\055\116\001\002\000\014\003\uffbd\004\111\005" +
    "\121\011\uffbd\055\116\001\002\000\006\003\u0253\055\u0252" +
    "\001\002\000\014\003\uffbb\004\111\005\121\011\uffbb\055" +
    "\116\001\002\000\014\003\uffb9\004\111\005\121\011\uffb9" +
    "\055\116\001\002\000\014\003\uffbf\004\111\005\121\011" +
    "\uffbf\055\116\001\002\000\014\003\uffb7\004\111\005\121" +
    "\011\uffb7\055\116\001\002\000\014\003\u0244\043\u0122\044" +
    "\u0243\051\015\053\u0242\001\002\000\022\006\132\013\134" +
    "\017\144\022\127\023\130\034\147\035\137\055\135\001" +
    "\002\000\004\002\ufff5\001\002\000\006\003\u01ef\055\u01ee" +
    "\001\002\000\022\006\132\013\134\017\144\022\127\023" +
    "\130\034\147\035\137\055\135\001\002\000\014\003\uffc1" +
    "\004\111\005\121\011\uffc1\055\116\001\002\000\006\003" +
    "\125\011\126\001\002\000\022\006\132\013\134\017\144" +
    "\022\127\023\130\034\147\035\137\055\135\001\002\000" +
    "\022\006\132\013\134\017\144\022\127\023\130\034\147" +
    "\035\137\055\135\001\002\000\014\003\212\033\207\055" +
    "\210\056\205\060\215\001\002\000\022\006\132\013\134" +
    "\017\144\022\127\023\130\034\147\035\137\055\135\001" +
    "\002\000\006\003\u01ad\012\u01ae\001\002\000\010\051\023" +
    "\055\035\056\016\001\002\000\034\003\uffdc\006\132\012" +
    "\uffdc\013\134\015\uffdc\016\uffdc\017\144\022\127\023\130" +
    "\031\uffdc\034\147\035\137\055\135\001\002\000\014\003" +
    "\212\033\207\055\210\056\205\060\215\001\002\000\014" +
    "\003\u0124\043\u0122\044\u0123\051\015\053\u0121\001\002\000" +
    "\034\003\uffda\006\132\012\uffda\013\134\015\uffda\016\uffda" +
    "\017\144\022\127\023\130\031\uffda\034\147\035\137\055" +
    "\135\001\002\000\006\003\345\051\346\001\002\000\034" +
    "\003\uffe2\006\132\012\uffe2\013\134\015\uffe2\016\uffe2\017" +
    "\144\022\127\023\130\031\uffe2\034\147\035\137\055\135" +
    "\001\002\000\034\003\uffe4\006\132\012\uffe4\013\134\015" +
    "\uffe4\016\uffe4\017\144\022\127\023\130\031\uffe4\034\147" +
    "\035\137\055\135\001\002\000\034\003\uffe0\006\132\012" +
    "\uffe0\013\134\015\uffe0\016\uffe0\017\144\022\127\023\130" +
    "\031\uffe0\034\147\035\137\055\135\001\002\000\034\003" +
    "\uffe6\006\132\012\uffe6\013\134\015\uffe6\016\uffe6\017\144" +
    "\022\127\023\130\031\uffe6\034\147\035\137\055\135\001" +
    "\002\000\006\003\171\055\170\001\002\000\034\003\uffd8" +
    "\006\132\012\uffd8\013\134\015\uffd8\016\uffd8\017\144\022" +
    "\127\023\130\031\uffd8\034\147\035\137\055\135\001\002" +
    "\000\034\003\uffde\006\132\012\uffde\013\134\015\uffde\016" +
    "\uffde\017\144\022\127\023\130\031\uffde\034\147\035\137" +
    "\055\135\001\002\000\006\003\150\051\151\001\002\000" +
    "\004\055\163\001\002\000\006\003\153\055\152\001\002" +
    "\000\006\003\156\050\157\001\002\000\004\050\154\001" +
    "\002\000\004\052\155\001\002\000\034\003\uff0e\006\uff0e" +
    "\012\uff0e\013\uff0e\015\uff0e\016\uff0e\017\uff0e\022\uff0e\023" +
    "\uff0e\031\uff0e\034\uff0e\035\uff0e\055\uff0e\001\002\000\004" +
    "\052\162\001\002\000\006\003\161\052\160\001\002\000" +
    "\034\003\uff10\006\uff10\012\uff10\013\uff10\015\uff10\016\uff10" +
    "\017\uff10\022\uff10\023\uff10\031\uff10\034\uff10\035\uff10\055" +
    "\uff10\001\002\000\034\003\uff0c\006\uff0c\012\uff0c\013\uff0c" +
    "\015\uff0c\016\uff0c\017\uff0c\022\uff0c\023\uff0c\031\uff0c\034" +
    "\uff0c\035\uff0c\055\uff0c\001\002\000\034\003\uff0d\006\uff0d" +
    "\012\uff0d\013\uff0d\015\uff0d\016\uff0d\017\uff0d\022\uff0d\023" +
    "\uff0d\031\uff0d\034\uff0d\035\uff0d\055\uff0d\001\002\000\004" +
    "\050\164\001\002\000\004\052\165\001\002\000\034\003" +
    "\uff0f\006\uff0f\012\uff0f\013\uff0f\015\uff0f\016\uff0f\017\uff0f" +
    "\022\uff0f\023\uff0f\031\uff0f\034\uff0f\035\uff0f\055\uff0f\001" +
    "\002\000\014\003\uffdf\012\uffdf\015\uffdf\016\uffdf\031\uffdf" +
    "\001\002\000\014\003\uffd9\012\uffd9\015\uffd9\016\uffd9\031" +
    "\uffd9\001\002\000\006\003\240\020\237\001\002\000\004" +
    "\020\172\001\002\000\004\056\173\001\002\000\004\054" +
    "\174\001\002\000\004\056\175\001\002\000\004\023\176" +
    "\001\002\000\022\006\132\013\134\017\144\022\127\023" +
    "\130\034\147\035\137\055\135\001\002\000\006\003\201" +
    "\031\202\001\002\000\004\052\233\001\002\000\004\032" +
    "\231\001\002\000\006\003\203\032\204\001\002\000\014" +
    "\003\212\033\207\055\210\056\205\060\215\001\002\000" +
    "\014\003\212\033\207\055\210\056\205\060\215\001\002" +
    "\000\022\003\uff4d\014\uff4d\023\uff4d\024\uff4d\025\uff4d\026" +
    "\uff4d\045\uff4d\052\uff4d\001\002\000\022\003\uff4a\014\uff4a" +
    "\023\uff4a\024\uff4a\025\uff4a\026\uff4a\045\uff4a\052\uff4a\001" +
    "\002\000\022\003\uff48\014\uff48\023\uff48\024\uff48\025\uff48" +
    "\026\uff48\045\uff48\052\uff48\001\002\000\024\003\uff4c\014" +
    "\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\045\uff4c\051\015" +
    "\052\uff4c\001\002\000\006\003\uff2c\052\uff2c\001\002\000" +
    "\022\003\uff4b\014\uff4b\023\uff4b\024\uff4b\025\uff4b\026\uff4b" +
    "\045\uff4b\052\uff4b\001\002\000\006\003\225\045\224\001" +
    "\002\000\020\003\uff50\014\uff50\023\uff50\024\216\025\220" +
    "\026\217\052\uff50\001\002\000\022\003\uff49\014\uff49\023" +
    "\uff49\024\uff49\025\uff49\026\uff49\045\uff49\052\uff49\001\002" +
    "\000\014\003\212\033\207\055\210\056\205\060\215\001" +
    "\002\000\014\003\212\033\207\055\210\056\205\060\215" +
    "\001\002\000\014\003\212\033\207\055\210\056\205\060" +
    "\215\001\002\000\012\003\uff53\014\uff53\023\uff53\052\uff53" +
    "\001\002\000\012\003\uff51\014\uff51\023\uff51\052\uff51\001" +
    "\002\000\012\003\uff52\014\uff52\023\uff52\052\uff52\001\002" +
    "\000\014\003\212\033\207\055\210\056\205\060\215\001" +
    "\002\000\014\003\212\033\207\055\210\056\205\060\215" +
    "\001\002\000\020\003\uff4e\014\uff4e\023\uff4e\024\uff4e\025" +
    "\uff4e\026\uff4e\052\uff4e\001\002\000\020\003\uff4f\014\uff4f" +
    "\023\uff4f\024\uff4f\025\uff4f\026\uff4f\052\uff4f\001\002\000" +
    "\006\003\uff2a\052\uff2a\001\002\000\014\003\212\033\207" +
    "\055\210\056\205\060\215\001\002\000\006\003\uff2b\052" +
    "\uff2b\001\002\000\004\012\234\001\002\000\004\023\235" +
    "\001\002\000\004\052\236\001\002\000\034\003\uff36\006" +
    "\uff36\012\uff36\013\uff36\015\uff36\016\uff36\017\uff36\022\uff36" +
    "\023\uff36\031\uff36\034\uff36\035\uff36\055\uff36\001\002\000" +
    "\006\003\254\056\253\001\002\000\004\056\241\001\002" +
    "\000\004\054\242\001\002\000\004\056\243\001\002\000" +
    "\004\023\244\001\002\000\022\006\132\013\134\017\144" +
    "\022\127\023\130\034\147\035\137\055\135\001\002\000" +
    "\006\003\201\031\202\001\002\000\004\052\247\001\002" +
    "\000\004\012\250\001\002\000\004\023\251\001\002\000" +
    "\004\052\252\001\002\000\034\003\uff35\006\uff35\012\uff35" +
    "\013\uff35\015\uff35\016\uff35\017\uff35\022\uff35\023\uff35\031" +
    "\uff35\034\uff35\035\uff35\055\uff35\001\002\000\006\003\266" +
    "\054\267\001\002\000\004\054\255\001\002\000\004\056" +
    "\256\001\002\000\004\023\257\001\002\000\022\006\132" +
    "\013\134\017\144\022\127\023\130\034\147\035\137\055" +
    "\135\001\002\000\006\003\201\031\202\001\002\000\004" +
    "\052\262\001\002\000\004\012\263\001\002\000\004\023" +
    "\264\001\002\000\004\052\265\001\002\000\034\003\uff34" +
    "\006\uff34\012\uff34\013\uff34\015\uff34\016\uff34\017\uff34\022" +
    "\uff34\023\uff34\031\uff34\034\uff34\035\uff34\055\uff34\001\002" +
    "\000\004\056\331\001\002\000\006\003\271\056\270\001" +
    "\002\000\006\003\301\023\302\001\002\000\004\023\272" +
    "\001\002\000\022\006\132\013\134\017\144\022\127\023" +
    "\130\034\147\035\137\055\135\001\002\000\006\003\201" +
    "\031\202\001\002\000\004\052\275\001\002\000\004\012" +
    "\276\001\002\000\004\023\277\001\002\000\004\052\300" +
    "\001\002\000\034\003\uff32\006\uff32\012\uff32\013\uff32\015" +
    "\uff32\016\uff32\017\uff32\022\uff32\023\uff32\031\uff32\034\uff32" +
    "\035\uff32\055\uff32\001\002\000\022\006\132\013\134\017" +
    "\144\022\127\023\130\034\147\035\137\055\135\001\002" +
    "\000\022\006\132\013\134\017\144\022\127\023\130\034" +
    "\147\035\137\055\135\001\002\000\006\003\201\031\202" +
    "\001\002\000\006\003\306\052\305\001\002\000\006\003" +
    "\312\012\313\001\002\000\004\012\307\001\002\000\004" +
    "\023\310\001\002\000\004\052\311\001\002\000\034\003" +
    "\uff30\006\uff30\012\uff30\013\uff30\015\uff30\016\uff30\017\uff30" +
    "\022\uff30\023\uff30\031\uff30\034\uff30\035\uff30\055\uff30\001" +
    "\002\000\004\023\321\001\002\000\006\003\314\023\315" +
    "\001\002\000\004\052\320\001\002\000\006\003\317\052" +
    "\316\001\002\000\034\003\uff37\006\uff37\012\uff37\013\uff37" +
    "\015\uff37\016\uff37\017\uff37\022\uff37\023\uff37\031\uff37\034" +
    "\uff37\035\uff37\055\uff37\001\002\000\034\003\uff2d\006\uff2d" +
    "\012\uff2d\013\uff2d\015\uff2d\016\uff2d\017\uff2d\022\uff2d\023" +
    "\uff2d\031\uff2d\034\uff2d\035\uff2d\055\uff2d\001\002\000\034" +
    "\003\uff2e\006\uff2e\012\uff2e\013\uff2e\015\uff2e\016\uff2e\017" +
    "\uff2e\022\uff2e\023\uff2e\031\uff2e\034\uff2e\035\uff2e\055\uff2e" +
    "\001\002\000\004\052\322\001\002\000\034\003\uff2f\006" +
    "\uff2f\012\uff2f\013\uff2f\015\uff2f\016\uff2f\017\uff2f\022\uff2f" +
    "\023\uff2f\031\uff2f\034\uff2f\035\uff2f\055\uff2f\001\002\000" +
    "\006\003\201\031\202\001\002\000\004\052\325\001\002" +
    "\000\004\012\326\001\002\000\004\023\327\001\002\000" +
    "\004\052\330\001\002\000\034\003\uff31\006\uff31\012\uff31" +
    "\013\uff31\015\uff31\016\uff31\017\uff31\022\uff31\023\uff31\031" +
    "\uff31\034\uff31\035\uff31\055\uff31\001\002\000\004\023\332" +
    "\001\002\000\022\006\132\013\134\017\144\022\127\023" +
    "\130\034\147\035\137\055\135\001\002\000\006\003\201" +
    "\031\202\001\002\000\004\052\335\001\002\000\004\012" +
    "\336\001\002\000\004\023\337\001\002\000\004\052\340" +
    "\001\002\000\034\003\uff33\006\uff33\012\uff33\013\uff33\015" +
    "\uff33\016\uff33\017\uff33\022\uff33\023\uff33\031\uff33\034\uff33" +
    "\035\uff33\055\uff33\001\002\000\014\003\uffe7\012\uffe7\015" +
    "\uffe7\016\uffe7\031\uffe7\001\002\000\014\003\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\031\uffe1\001\002\000\014\003\uffe5\012" +
    "\uffe5\015\uffe5\016\uffe5\031\uffe5\001\002\000\014\003\uffe3" +
    "\012\uffe3\015\uffe3\016\uffe3\031\uffe3\001\002\000\016\027" +
    "\u0112\030\u0111\055\u010f\056\u010e\057\u0110\060\u0113\001\002" +
    "\000\020\003\352\027\354\030\353\055\347\056\350\057" +
    "\351\060\355\001\002\000\006\003\u0109\050\u010a\001\002" +
    "\000\006\003\u0105\050\u0104\001\002\000\006\003\377\050" +
    "\u0100\001\002\000\004\050\375\001\002\000\006\003\370" +
    "\050\371\001\002\000\006\003\364\050\363\001\002\000" +
    "\006\003\357\050\356\001\002\000\006\003\362\052\361" +
    "\001\002\000\004\052\360\001\002\000\034\003\uff1e\006" +
    "\uff1e\012\uff1e\013\uff1e\015\uff1e\016\uff1e\017\uff1e\022\uff1e" +
    "\023\uff1e\031\uff1e\034\uff1e\035\uff1e\055\uff1e\001\002\000" +
    "\034\003\uff20\006\uff20\012\uff20\013\uff20\015\uff20\016\uff20" +
    "\017\uff20\022\uff20\023\uff20\031\uff20\034\uff20\035\uff20\055" +
    "\uff20\001\002\000\034\003\uff1d\006\uff1d\012\uff1d\013\uff1d" +
    "\015\uff1d\016\uff1d\017\uff1d\022\uff1d\023\uff1d\031\uff1d\034" +
    "\uff1d\035\uff1d\055\uff1d\001\002\000\006\003\367\052\366" +
    "\001\002\000\004\052\365\001\002\000\034\003\uff16\006" +
    "\uff16\012\uff16\013\uff16\015\uff16\016\uff16\017\uff16\022\uff16" +
    "\023\uff16\031\uff16\034\uff16\035\uff16\055\uff16\001\002\000" +
    "\034\003\uff18\006\uff18\012\uff18\013\uff18\015\uff18\016\uff18" +
    "\017\uff18\022\uff18\023\uff18\031\uff18\034\uff18\035\uff18\055" +
    "\uff18\001\002\000\034\003\uff15\006\uff15\012\uff15\013\uff15" +
    "\015\uff15\016\uff15\017\uff15\022\uff15\023\uff15\031\uff15\034" +
    "\uff15\035\uff15\055\uff15\001\002\000\004\052\374\001\002" +
    "\000\006\003\373\052\372\001\002\000\034\003\uff1c\006" +
    "\uff1c\012\uff1c\013\uff1c\015\uff1c\016\uff1c\017\uff1c\022\uff1c" +
    "\023\uff1c\031\uff1c\034\uff1c\035\uff1c\055\uff1c\001\002\000" +
    "\034\003\uff19\006\uff19\012\uff19\013\uff19\015\uff19\016\uff19" +
    "\017\uff19\022\uff19\023\uff19\031\uff19\034\uff19\035\uff19\055" +
    "\uff19\001\002\000\034\003\uff1a\006\uff1a\012\uff1a\013\uff1a" +
    "\015\uff1a\016\uff1a\017\uff1a\022\uff1a\023\uff1a\031\uff1a\034" +
    "\uff1a\035\uff1a\055\uff1a\001\002\000\004\052\376\001\002" +
    "\000\034\003\uff27\006\uff27\012\uff27\013\uff27\015\uff27\016" +
    "\uff27\017\uff27\022\uff27\023\uff27\031\uff27\034\uff27\035\uff27" +
    "\055\uff27\001\002\000\004\052\u0103\001\002\000\006\003" +
    "\u0102\052\u0101\001\002\000\034\003\uff24\006\uff24\012\uff24" +
    "\013\uff24\015\uff24\016\uff24\017\uff24\022\uff24\023\uff24\031" +
    "\uff24\034\uff24\035\uff24\055\uff24\001\002\000\034\003\uff21" +
    "\006\uff21\012\uff21\013\uff21\015\uff21\016\uff21\017\uff21\022" +
    "\uff21\023\uff21\031\uff21\034\uff21\035\uff21\055\uff21\001\002" +
    "\000\034\003\uff22\006\uff22\012\uff22\013\uff22\015\uff22\016" +
    "\uff22\017\uff22\022\uff22\023\uff22\031\uff22\034\uff22\035\uff22" +
    "\055\uff22\001\002\000\006\003\u0108\052\u0107\001\002\000" +
    "\004\052\u0106\001\002\000\034\003\uff26\006\uff26\012\uff26" +
    "\013\uff26\015\uff26\016\uff26\017\uff26\022\uff26\023\uff26\031" +
    "\uff26\034\uff26\035\uff26\055\uff26\001\002\000\034\003\uff29" +
    "\006\uff29\012\uff29\013\uff29\015\uff29\016\uff29\017\uff29\022" +
    "\uff29\023\uff29\031\uff29\034\uff29\035\uff29\055\uff29\001\002" +
    "\000\034\003\uff25\006\uff25\012\uff25\013\uff25\015\uff25\016" +
    "\uff25\017\uff25\022\uff25\023\uff25\031\uff25\034\uff25\035\uff25" +
    "\055\uff25\001\002\000\004\052\u010d\001\002\000\006\003" +
    "\u010c\052\u010b\001\002\000\034\003\uff14\006\uff14\012\uff14" +
    "\013\uff14\015\uff14\016\uff14\017\uff14\022\uff14\023\uff14\031" +
    "\uff14\034\uff14\035\uff14\055\uff14\001\002\000\034\003\uff11" +
    "\006\uff11\012\uff11\013\uff11\015\uff11\016\uff11\017\uff11\022" +
    "\uff11\023\uff11\031\uff11\034\uff11\035\uff11\055\uff11\001\002" +
    "\000\034\003\uff12\006\uff12\012\uff12\013\uff12\015\uff12\016" +
    "\uff12\017\uff12\022\uff12\023\uff12\031\uff12\034\uff12\035\uff12" +
    "\055\uff12\001\002\000\004\050\u011e\001\002\000\004\050" +
    "\u011c\001\002\000\004\050\u011a\001\002\000\004\050\u0118" +
    "\001\002\000\004\050\u0116\001\002\000\004\050\u0114\001" +
    "\002\000\004\052\u0115\001\002\000\034\003\uff1f\006\uff1f" +
    "\012\uff1f\013\uff1f\015\uff1f\016\uff1f\017\uff1f\022\uff1f\023" +
    "\uff1f\031\uff1f\034\uff1f\035\uff1f\055\uff1f\001\002\000\004" +
    "\052\u0117\001\002\000\034\003\uff17\006\uff17\012\uff17\013" +
    "\uff17\015\uff17\016\uff17\017\uff17\022\uff17\023\uff17\031\uff17" +
    "\034\uff17\035\uff17\055\uff17\001\002\000\004\052\u0119\001" +
    "\002\000\034\003\uff1b\006\uff1b\012\uff1b\013\uff1b\015\uff1b" +
    "\016\uff1b\017\uff1b\022\uff1b\023\uff1b\031\uff1b\034\uff1b\035" +
    "\uff1b\055\uff1b\001\002\000\004\052\u011b\001\002\000\034" +
    "\003\uff23\006\uff23\012\uff23\013\uff23\015\uff23\016\uff23\017" +
    "\uff23\022\uff23\023\uff23\031\uff23\034\uff23\035\uff23\055\uff23" +
    "\001\002\000\004\052\u011d\001\002\000\034\003\uff13\006" +
    "\uff13\012\uff13\013\uff13\015\uff13\016\uff13\017\uff13\022\uff13" +
    "\023\uff13\031\uff13\034\uff13\035\uff13\055\uff13\001\002\000" +
    "\004\052\u011f\001\002\000\034\003\uff28\006\uff28\012\uff28" +
    "\013\uff28\015\uff28\016\uff28\017\uff28\022\uff28\023\uff28\031" +
    "\uff28\034\uff28\035\uff28\055\uff28\001\002\000\014\003\uffdb" +
    "\012\uffdb\015\uffdb\016\uffdb\031\uffdb\001\002\000\004\055" +
    "\u0189\001\002\000\022\003\u017d\027\u017c\030\u017a\051\023" +
    "\055\035\056\016\057\u017b\060\u017f\001\002\000\016\003" +
    "\u0143\007\u0142\036\063\037\065\040\067\042\064\001\002" +
    "\000\030\007\u0126\027\u012b\030\u0127\036\063\037\065\040" +
    "\067\042\064\051\023\055\u0128\056\016\060\u0125\001\002" +
    "\000\004\052\u0141\001\002\000\012\036\063\037\065\040" +
    "\067\042\064\001\002\000\004\052\u0138\001\002\000\022" +
    "\003\u0124\043\u0122\044\u0123\046\uff60\047\uff60\051\015\052" +
    "\uff60\053\u0121\001\002\000\042\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96\017" +
    "\uff96\022\uff96\023\uff96\031\uff96\034\uff96\035\uff96\055\uff96" +
    "\001\002\000\004\043\u012f\001\002\000\004\052\u012e\001" +
    "\002\000\004\052\u012d\001\002\000\042\003\uff84\004\uff84" +
    "\005\uff84\006\uff84\011\uff84\012\uff84\013\uff84\015\uff84\016" +
    "\uff84\017\uff84\022\uff84\023\uff84\031\uff84\034\uff84\035\uff84" +
    "\055\uff84\001\002\000\042\003\uff7d\004\uff7d\005\uff7d\006" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\015\uff7d\016\uff7d\017\uff7d" +
    "\022\uff7d\023\uff7d\031\uff7d\034\uff7d\035\uff7d\055\uff7d\001" +
    "\002\000\016\027\u0131\030\u0130\051\023\055\035\056\016" +
    "\060\u0133\001\002\000\004\052\u0137\001\002\000\004\052" +
    "\u0136\001\002\000\004\052\u0135\001\002\000\004\052\u0134" +
    "\001\002\000\042\003\uff88\004\uff88\005\uff88\006\uff88\011" +
    "\uff88\012\uff88\013\uff88\015\uff88\016\uff88\017\uff88\022\uff88" +
    "\023\uff88\031\uff88\034\uff88\035\uff88\055\uff88\001\002\000" +
    "\042\003\uff94\004\uff94\005\uff94\006\uff94\011\uff94\012\uff94" +
    "\013\uff94\015\uff94\016\uff94\017\uff94\022\uff94\023\uff94\031" +
    "\uff94\034\uff94\035\uff94\055\uff94\001\002\000\042\003\uff8c" +
    "\004\uff8c\005\uff8c\006\uff8c\011\uff8c\012\uff8c\013\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\022\uff8c\023\uff8c\031\uff8c\034\uff8c" +
    "\035\uff8c\055\uff8c\001\002\000\042\003\uff91\004\uff91\005" +
    "\uff91\006\uff91\011\uff91\012\uff91\013\uff91\015\uff91\016\uff91" +
    "\017\uff91\022\uff91\023\uff91\031\uff91\034\uff91\035\uff91\055" +
    "\uff91\001\002\000\042\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\011\uff81\012\uff81\013\uff81\015\uff81\016\uff81\017\uff81\022" +
    "\uff81\023\uff81\031\uff81\034\uff81\035\uff81\055\uff81\001\002" +
    "\000\004\043\u013a\001\002\000\014\027\u013c\030\u013b\051" +
    "\023\055\035\056\016\001\002\000\004\052\u0140\001\002" +
    "\000\004\052\u013f\001\002\000\004\052\u013e\001\002\000" +
    "\042\003\uff77\004\uff77\005\uff77\006\uff77\011\uff77\012\uff77" +
    "\013\uff77\015\uff77\016\uff77\017\uff77\022\uff77\023\uff77\031" +
    "\uff77\034\uff77\035\uff77\055\uff77\001\002\000\042\003\uff6c" +
    "\004\uff6c\005\uff6c\006\uff6c\011\uff6c\012\uff6c\013\uff6c\015" +
    "\uff6c\016\uff6c\017\uff6c\022\uff6c\023\uff6c\031\uff6c\034\uff6c" +
    "\035\uff6c\055\uff6c\001\002\000\042\003\uff72\004\uff72\005" +
    "\uff72\006\uff72\011\uff72\012\uff72\013\uff72\015\uff72\016\uff72" +
    "\017\uff72\022\uff72\023\uff72\031\uff72\034\uff72\035\uff72\055" +
    "\uff72\001\002\000\042\003\uff7a\004\uff7a\005\uff7a\006\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\015\uff7a\016\uff7a\017\uff7a\022" +
    "\uff7a\023\uff7a\031\uff7a\034\uff7a\035\uff7a\055\uff7a\001\002" +
    "\000\012\036\063\037\065\040\067\042\064\001\002\000" +
    "\012\036\063\037\065\040\067\042\064\001\002\000\006" +
    "\003\u0146\043\u0145\001\002\000\022\003\u0150\027\u014f\030" +
    "\u014d\051\023\055\035\056\016\057\u014e\060\u0152\001\002" +
    "\000\010\027\u0148\030\u0147\060\u0149\001\002\000\004\052" +
    "\u014c\001\002\000\004\052\u014b\001\002\000\004\052\u014a" +
    "\001\002\000\042\003\uff87\004\uff87\005\uff87\006\uff87\011" +
    "\uff87\012\uff87\013\uff87\015\uff87\016\uff87\017\uff87\022\uff87" +
    "\023\uff87\031\uff87\034\uff87\035\uff87\055\uff87\001\002\000" +
    "\042\003\uff8b\004\uff8b\005\uff8b\006\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\015\uff8b\016\uff8b\017\uff8b\022\uff8b\023\uff8b\031" +
    "\uff8b\034\uff8b\035\uff8b\055\uff8b\001\002\000\042\003\uff90" +
    "\004\uff90\005\uff90\006\uff90\011\uff90\012\uff90\013\uff90\015" +
    "\uff90\016\uff90\017\uff90\022\uff90\023\uff90\031\uff90\034\uff90" +
    "\035\uff90\055\uff90\001\002\000\006\003\u015b\052\u015a\001" +
    "\002\000\004\052\u0159\001\002\000\006\003\u0158\052\u0157" +
    "\001\002\000\004\052\u0156\001\002\000\006\003\u0155\052" +
    "\u0154\001\002\000\004\003\u0153\001\002\000\042\003\uff86" +
    "\004\uff86\005\uff86\006\uff86\011\uff86\012\uff86\013\uff86\015" +
    "\uff86\016\uff86\017\uff86\022\uff86\023\uff86\031\uff86\034\uff86" +
    "\035\uff86\055\uff86\001\002\000\042\003\uff95\004\uff95\005" +
    "\uff95\006\uff95\011\uff95\012\uff95\013\uff95\015\uff95\016\uff95" +
    "\017\uff95\022\uff95\023\uff95\031\uff95\034\uff95\035\uff95\055" +
    "\uff95\001\002\000\042\003\uff93\004\uff93\005\uff93\006\uff93" +
    "\011\uff93\012\uff93\013\uff93\015\uff93\016\uff93\017\uff93\022" +
    "\uff93\023\uff93\031\uff93\034\uff93\035\uff93\055\uff93\001\002" +
    "\000\042\003\uff8f\004\uff8f\005\uff8f\006\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\015\uff8f\016\uff8f\017\uff8f\022\uff8f\023\uff8f" +
    "\031\uff8f\034\uff8f\035\uff8f\055\uff8f\001\002\000\042\003" +
    "\uff8d\004\uff8d\005\uff8d\006\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\022\uff8d\023\uff8d\031\uff8d\034" +
    "\uff8d\035\uff8d\055\uff8d\001\002\000\042\003\uff8a\004\uff8a" +
    "\005\uff8a\006\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\022\uff8a\023\uff8a\031\uff8a\034\uff8a\035\uff8a" +
    "\055\uff8a\001\002\000\042\003\uff89\004\uff89\005\uff89\006" +
    "\uff89\011\uff89\012\uff89\013\uff89\015\uff89\016\uff89\017\uff89" +
    "\022\uff89\023\uff89\031\uff89\034\uff89\035\uff89\055\uff89\001" +
    "\002\000\042\003\uff92\004\uff92\005\uff92\006\uff92\011\uff92" +
    "\012\uff92\013\uff92\015\uff92\016\uff92\017\uff92\022\uff92\023" +
    "\uff92\031\uff92\034\uff92\035\uff92\055\uff92\001\002\000\042" +
    "\003\uff8e\004\uff8e\005\uff8e\006\uff8e\011\uff8e\012\uff8e\013" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\022\uff8e\023\uff8e\031\uff8e" +
    "\034\uff8e\035\uff8e\055\uff8e\001\002\000\004\043\u015d\001" +
    "\002\000\014\027\u015f\030\u015e\051\023\055\035\056\016" +
    "\001\002\000\004\052\u0163\001\002\000\004\052\u0162\001" +
    "\002\000\004\052\u0161\001\002\000\042\003\uff76\004\uff76" +
    "\005\uff76\006\uff76\011\uff76\012\uff76\013\uff76\015\uff76\016" +
    "\uff76\017\uff76\022\uff76\023\uff76\031\uff76\034\uff76\035\uff76" +
    "\055\uff76\001\002\000\042\003\uff6b\004\uff6b\005\uff6b\006" +
    "\uff6b\011\uff6b\012\uff6b\013\uff6b\015\uff6b\016\uff6b\017\uff6b" +
    "\022\uff6b\023\uff6b\031\uff6b\034\uff6b\035\uff6b\055\uff6b\001" +
    "\002\000\042\003\uff71\004\uff71\005\uff71\006\uff71\011\uff71" +
    "\012\uff71\013\uff71\015\uff71\016\uff71\017\uff71\022\uff71\023" +
    "\uff71\031\uff71\034\uff71\035\uff71\055\uff71\001\002\000\006" +
    "\003\u0166\043\u0165\001\002\000\020\003\u0170\027\u016f\030" +
    "\u016d\051\023\055\035\056\016\057\u016e\001\002\000\014" +
    "\027\u0168\030\u0167\051\023\055\035\056\016\001\002\000" +
    "\004\052\u016c\001\002\000\004\052\u016b\001\002\000\004" +
    "\052\u016a\001\002\000\042\003\uff75\004\uff75\005\uff75\006" +
    "\uff75\011\uff75\012\uff75\013\uff75\015\uff75\016\uff75\017\uff75" +
    "\022\uff75\023\uff75\031\uff75\034\uff75\035\uff75\055\uff75\001" +
    "\002\000\042\003\uff6a\004\uff6a\005\uff6a\006\uff6a\011\uff6a" +
    "\012\uff6a\013\uff6a\015\uff6a\016\uff6a\017\uff6a\022\uff6a\023" +
    "\uff6a\031\uff6a\034\uff6a\035\uff6a\055\uff6a\001\002\000\042" +
    "\003\uff70\004\uff70\005\uff70\006\uff70\011\uff70\012\uff70\013" +
    "\uff70\015\uff70\016\uff70\017\uff70\022\uff70\023\uff70\031\uff70" +
    "\034\uff70\035\uff70\055\uff70\001\002\000\006\003\u0179\052" +
    "\u0178\001\002\000\004\052\u0177\001\002\000\006\003\u0176" +
    "\052\u0175\001\002\000\004\052\u0174\001\002\000\006\003" +
    "\u0173\052\u0172\001\002\000\042\003\uff78\004\uff78\005\uff78" +
    "\006\uff78\011\uff78\012\uff78\013\uff78\015\uff78\016\uff78\017" +
    "\uff78\022\uff78\023\uff78\031\uff78\034\uff78\035\uff78\055\uff78" +
    "\001\002\000\042\003\uff74\004\uff74\005\uff74\006\uff74\011" +
    "\uff74\012\uff74\013\uff74\015\uff74\016\uff74\017\uff74\022\uff74" +
    "\023\uff74\031\uff74\034\uff74\035\uff74\055\uff74\001\002\000" +
    "\042\003\uff6f\004\uff6f\005\uff6f\006\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\015\uff6f\016\uff6f\017\uff6f\022\uff6f\023\uff6f\031" +
    "\uff6f\034\uff6f\035\uff6f\055\uff6f\001\002\000\042\003\uff6d" +
    "\004\uff6d\005\uff6d\006\uff6d\011\uff6d\012\uff6d\013\uff6d\015" +
    "\uff6d\016\uff6d\017\uff6d\022\uff6d\023\uff6d\031\uff6d\034\uff6d" +
    "\035\uff6d\055\uff6d\001\002\000\042\003\uff69\004\uff69\005" +
    "\uff69\006\uff69\011\uff69\012\uff69\013\uff69\015\uff69\016\uff69" +
    "\017\uff69\022\uff69\023\uff69\031\uff69\034\uff69\035\uff69\055" +
    "\uff69\001\002\000\042\003\uff68\004\uff68\005\uff68\006\uff68" +
    "\011\uff68\012\uff68\013\uff68\015\uff68\016\uff68\017\uff68\022" +
    "\uff68\023\uff68\031\uff68\034\uff68\035\uff68\055\uff68\001\002" +
    "\000\042\003\uff73\004\uff73\005\uff73\006\uff73\011\uff73\012" +
    "\uff73\013\uff73\015\uff73\016\uff73\017\uff73\022\uff73\023\uff73" +
    "\031\uff73\034\uff73\035\uff73\055\uff73\001\002\000\042\003" +
    "\uff6e\004\uff6e\005\uff6e\006\uff6e\011\uff6e\012\uff6e\013\uff6e" +
    "\015\uff6e\016\uff6e\017\uff6e\022\uff6e\023\uff6e\031\uff6e\034" +
    "\uff6e\035\uff6e\055\uff6e\001\002\000\006\003\u0188\052\u0187" +
    "\001\002\000\004\052\u0186\001\002\000\006\003\u0185\052" +
    "\u0184\001\002\000\004\052\u0183\001\002\000\006\003\u0182" +
    "\052\u0181\001\002\000\004\003\u0180\001\002\000\042\003" +
    "\uff79\004\uff79\005\uff79\006\uff79\011\uff79\012\uff79\013\uff79" +
    "\015\uff79\016\uff79\017\uff79\022\uff79\023\uff79\031\uff79\034" +
    "\uff79\035\uff79\055\uff79\001\002\000\042\003\uff85\004\uff85" +
    "\005\uff85\006\uff85\011\uff85\012\uff85\013\uff85\015\uff85\016" +
    "\uff85\017\uff85\022\uff85\023\uff85\031\uff85\034\uff85\035\uff85" +
    "\055\uff85\001\002\000\042\003\uff83\004\uff83\005\uff83\006" +
    "\uff83\011\uff83\012\uff83\013\uff83\015\uff83\016\uff83\017\uff83" +
    "\022\uff83\023\uff83\031\uff83\034\uff83\035\uff83\055\uff83\001" +
    "\002\000\042\003\uff80\004\uff80\005\uff80\006\uff80\011\uff80" +
    "\012\uff80\013\uff80\015\uff80\016\uff80\017\uff80\022\uff80\023" +
    "\uff80\031\uff80\034\uff80\035\uff80\055\uff80\001\002\000\042" +
    "\003\uff7e\004\uff7e\005\uff7e\006\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\022\uff7e\023\uff7e\031\uff7e" +
    "\034\uff7e\035\uff7e\055\uff7e\001\002\000\042\003\uff7c\004" +
    "\uff7c\005\uff7c\006\uff7c\011\uff7c\012\uff7c\013\uff7c\015\uff7c" +
    "\016\uff7c\017\uff7c\022\uff7c\023\uff7c\031\uff7c\034\uff7c\035" +
    "\uff7c\055\uff7c\001\002\000\042\003\uff7b\004\uff7b\005\uff7b" +
    "\006\uff7b\011\uff7b\012\uff7b\013\uff7b\015\uff7b\016\uff7b\017" +
    "\uff7b\022\uff7b\023\uff7b\031\uff7b\034\uff7b\035\uff7b\055\uff7b" +
    "\001\002\000\042\003\uff82\004\uff82\005\uff82\006\uff82\011" +
    "\uff82\012\uff82\013\uff82\015\uff82\016\uff82\017\uff82\022\uff82" +
    "\023\uff82\031\uff82\034\uff82\035\uff82\055\uff82\001\002\000" +
    "\042\003\uff7f\004\uff7f\005\uff7f\006\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\015\uff7f\016\uff7f\017\uff7f\022\uff7f\023\uff7f\031" +
    "\uff7f\034\uff7f\035\uff7f\055\uff7f\001\002\000\012\003\u0124" +
    "\043\u0122\044\u0123\053\u0121\001\002\000\042\003\uff97\004" +
    "\uff97\005\uff97\006\uff97\011\uff97\012\uff97\013\uff97\015\uff97" +
    "\016\uff97\017\uff97\022\uff97\023\uff97\031\uff97\034\uff97\035" +
    "\uff97\055\uff97\001\002\000\006\003\u018c\014\u018d\001\002" +
    "\000\022\006\132\013\134\017\144\022\127\023\130\034" +
    "\147\035\137\055\135\001\002\000\022\006\132\013\134" +
    "\017\144\022\127\023\130\034\147\035\137\055\135\001" +
    "\002\000\012\003\uff46\012\uff46\015\uff46\016\u018f\001\002" +
    "\000\014\003\212\033\207\055\210\056\205\060\215\001" +
    "\002\000\010\003\uff43\012\uff43\015\u0191\001\002\000\022" +
    "\006\132\013\134\017\144\022\127\023\130\034\147\035" +
    "\137\055\135\001\002\000\006\003\u0193\012\u0194\001\002" +
    "\000\004\013\u019a\001\002\000\006\003\u0195\013\u0196\001" +
    "\002\000\004\052\u0199\001\002\000\006\003\u0198\052\u0197" +
    "\001\002\000\034\003\uff58\006\uff58\012\uff58\013\uff58\015" +
    "\uff58\016\uff58\017\uff58\022\uff58\023\uff58\031\uff58\034\uff58" +
    "\035\uff58\055\uff58\001\002\000\034\003\uff54\006\uff54\012" +
    "\uff54\013\uff54\015\uff54\016\uff54\017\uff54\022\uff54\023\uff54" +
    "\031\uff54\034\uff54\035\uff54\055\uff54\001\002\000\034\003" +
    "\uff55\006\uff55\012\uff55\013\uff55\015\uff55\016\uff55\017\uff55" +
    "\022\uff55\023\uff55\031\uff55\034\uff55\035\uff55\055\uff55\001" +
    "\002\000\004\052\u019b\001\002\000\034\003\uff56\006\uff56" +
    "\012\uff56\013\uff56\015\uff56\016\uff56\017\uff56\022\uff56\023" +
    "\uff56\031\uff56\034\uff56\035\uff56\055\uff56\001\002\000\006" +
    "\003\uff44\012\uff44\001\002\000\006\003\u019e\014\u019f\001" +
    "\002\000\022\006\132\013\134\017\144\022\127\023\130" +
    "\034\147\035\137\055\135\001\002\000\022\006\132\013" +
    "\134\017\144\022\127\023\130\034\147\035\137\055\135" +
    "\001\002\000\012\003\uff46\012\uff46\015\uff46\016\u018f\001" +
    "\002\000\010\003\uff47\012\uff47\015\uff47\001\002\000\012" +
    "\003\uff46\012\uff46\015\uff46\016\u018f\001\002\000\010\003" +
    "\uff45\012\uff45\015\uff45\001\002\000\010\012\uff46\015\uff46" +
    "\016\u018f\001\002\000\006\012\uff43\015\u0191\001\002\000" +
    "\004\012\u01a7\001\002\000\004\013\u01a8\001\002\000\004" +
    "\052\u01a9\001\002\000\034\003\uff57\006\uff57\012\uff57\013" +
    "\uff57\015\uff57\016\uff57\017\uff57\022\uff57\023\uff57\031\uff57" +
    "\034\uff57\035\uff57\055\uff57\001\002\000\014\003\uffdd\012" +
    "\uffdd\015\uffdd\016\uffdd\031\uffdd\001\002\000\016\003\uffd6" +
    "\012\uffd6\015\uffd6\016\uffd6\031\uffd6\052\u01ac\001\002\000" +
    "\014\003\uffd7\012\uffd7\015\uffd7\016\uffd7\031\uffd7\001\002" +
    "\000\004\055\u01b4\001\002\000\006\003\u01b0\055\u01af\001" +
    "\002\000\006\003\u01b3\052\u01b2\001\002\000\004\052\u01b1" +
    "\001\002\000\004\002\uffef\001\002\000\004\002\ufff2\001" +
    "\002\000\004\002\uffee\001\002\000\004\052\u01b5\001\002" +
    "\000\004\002\ufff0\001\002\000\006\003\201\031\202\001" +
    "\002\000\006\003\u01b9\052\u01b8\001\002\000\006\003\u01bd" +
    "\012\u01be\001\002\000\004\012\u01ba\001\002\000\004\023" +
    "\u01bb\001\002\000\004\052\u01bc\001\002\000\034\003\uff41" +
    "\006\uff41\012\uff41\013\uff41\015\uff41\016\uff41\017\uff41\022" +
    "\uff41\023\uff41\031\uff41\034\uff41\035\uff41\055\uff41\001\002" +
    "\000\004\023\u01c4\001\002\000\006\003\u01bf\023\u01c0\001" +
    "\002\000\004\052\u01c3\001\002\000\006\003\u01c2\052\u01c1" +
    "\001\002\000\034\003\uff42\006\uff42\012\uff42\013\uff42\015" +
    "\uff42\016\uff42\017\uff42\022\uff42\023\uff42\031\uff42\034\uff42" +
    "\035\uff42\055\uff42\001\002\000\034\003\uff3e\006\uff3e\012" +
    "\uff3e\013\uff3e\015\uff3e\016\uff3e\017\uff3e\022\uff3e\023\uff3e" +
    "\031\uff3e\034\uff3e\035\uff3e\055\uff3e\001\002\000\034\003" +
    "\uff3f\006\uff3f\012\uff3f\013\uff3f\015\uff3f\016\uff3f\017\uff3f" +
    "\022\uff3f\023\uff3f\031\uff3f\034\uff3f\035\uff3f\055\uff3f\001" +
    "\002\000\004\052\u01c5\001\002\000\034\003\uff40\006\uff40" +
    "\012\uff40\013\uff40\015\uff40\016\uff40\017\uff40\022\uff40\023" +
    "\uff40\031\uff40\034\uff40\035\uff40\055\uff40\001\002\000\006" +
    "\003\u01c7\023\u01c8\001\002\000\022\006\132\013\134\017" +
    "\144\022\127\023\130\034\147\035\137\055\135\001\002" +
    "\000\022\006\132\013\134\017\144\022\127\023\130\034" +
    "\147\035\137\055\135\001\002\000\006\003\201\031\202" +
    "\001\002\000\006\003\u01cc\052\u01cb\001\002\000\006\003" +
    "\u01d0\012\u01d1\001\002\000\004\012\u01cd\001\002\000\004" +
    "\023\u01ce\001\002\000\004\052\u01cf\001\002\000\034\003" +
    "\uff3b\006\uff3b\012\uff3b\013\uff3b\015\uff3b\016\uff3b\017\uff3b" +
    "\022\uff3b\023\uff3b\031\uff3b\034\uff3b\035\uff3b\055\uff3b\001" +
    "\002\000\004\023\u01d7\001\002\000\006\003\u01d2\023\u01d3" +
    "\001\002\000\004\052\u01d6\001\002\000\006\003\u01d5\052" +
    "\u01d4\001\002\000\034\003\uff3d\006\uff3d\012\uff3d\013\uff3d" +
    "\015\uff3d\016\uff3d\017\uff3d\022\uff3d\023\uff3d\031\uff3d\034" +
    "\uff3d\035\uff3d\055\uff3d\001\002\000\034\003\uff38\006\uff38" +
    "\012\uff38\013\uff38\015\uff38\016\uff38\017\uff38\022\uff38\023" +
    "\uff38\031\uff38\034\uff38\035\uff38\055\uff38\001\002\000\034" +
    "\003\uff39\006\uff39\012\uff39\013\uff39\015\uff39\016\uff39\017" +
    "\uff39\022\uff39\023\uff39\031\uff39\034\uff39\035\uff39\055\uff39" +
    "\001\002\000\004\052\u01d8\001\002\000\034\003\uff3a\006" +
    "\uff3a\012\uff3a\013\uff3a\015\uff3a\016\uff3a\017\uff3a\022\uff3a" +
    "\023\uff3a\031\uff3a\034\uff3a\035\uff3a\055\uff3a\001\002\000" +
    "\006\003\201\031\202\001\002\000\004\052\u01db\001\002" +
    "\000\004\012\u01dc\001\002\000\004\023\u01dd\001\002\000" +
    "\004\052\u01de\001\002\000\034\003\uff3c\006\uff3c\012\uff3c" +
    "\013\uff3c\015\uff3c\016\uff3c\017\uff3c\022\uff3c\023\uff3c\031" +
    "\uff3c\034\uff3c\035\uff3c\055\uff3c\001\002\000\004\012\u01e0" +
    "\001\002\000\004\055\u01e1\001\002\000\004\052\u01e2\001" +
    "\002\000\004\002\ufff1\001\002\000\006\003\uffc2\011\uffc2" +
    "\001\002\000\006\003\u01e5\012\u01e6\001\002\000\004\055" +
    "\u01ec\001\002\000\006\003\u01e8\055\u01e7\001\002\000\006" +
    "\003\u01eb\052\u01ea\001\002\000\004\052\u01e9\001\002\000" +
    "\004\002\uffe9\001\002\000\004\002\uffed\001\002\000\004" +
    "\002\uffe8\001\002\000\004\052\u01ed\001\002\000\004\002" +
    "\uffea\001\002\000\004\051\015\001\002\000\004\051\015" +
    "\001\002\000\004\006\u01f1\001\002\000\012\036\063\037" +
    "\065\040\067\042\064\001\002\000\004\010\u01f3\001\002" +
    "\000\012\004\111\005\121\011\u01f4\055\116\001\002\000" +
    "\022\006\132\013\134\017\144\022\127\023\130\034\147" +
    "\035\137\055\135\001\002\000\004\011\u01f6\001\002\000" +
    "\022\006\132\013\134\017\144\022\127\023\130\034\147" +
    "\035\137\055\135\001\002\000\004\012\u01f8\001\002\000" +
    "\004\055\u01f9\001\002\000\004\052\u01fa\001\002\000\014" +
    "\003\uffae\004\uffae\005\uffae\011\uffae\055\uffae\001\002\000" +
    "\004\012\u01fc\001\002\000\004\055\u01fd\001\002\000\004" +
    "\052\u01fe\001\002\000\014\003\uffa6\004\uffa6\005\uffa6\011" +
    "\uffa6\055\uffa6\001\002\000\006\003\u0200\006\u0201\001\002" +
    "\000\012\036\063\037\065\040\067\042\064\001\002\000" +
    "\012\036\063\037\065\040\067\042\064\001\002\000\006" +
    "\003\u0203\010\u0204\001\002\000\012\004\111\005\121\011" +
    "\u0226\055\116\001\002\000\014\003\u0205\004\111\005\121" +
    "\011\u0206\055\116\001\002\000\022\006\132\013\134\017" +
    "\144\022\127\023\130\034\147\035\137\055\135\001\002" +
    "\000\022\006\132\013\134\017\144\022\127\023\130\034" +
    "\147\035\137\055\135\001\002\000\006\003\u0208\011\u0209" +
    "\001\002\000\022\006\132\013\134\017\144\022\127\023" +
    "\130\034\147\035\137\055\135\001\002\000\022\006\132" +
    "\013\134\017\144\022\127\023\130\034\147\035\137\055" +
    "\135\001\002\000\006\003\u020b\012\u020c\001\002\000\004" +
    "\055\u0212\001\002\000\006\003\u020e\055\u020d\001\002\000" +
    "\006\003\u0211\052\u0210\001\002\000\004\052\u020f\001\002" +
    "\000\014\003\uffa9\004\uffa9\005\uffa9\011\uffa9\055\uffa9\001" +
    "\002\000\014\003\uffaf\004\uffaf\005\uffaf\011\uffaf\055\uffaf" +
    "\001\002\000\014\003\uffa8\004\uffa8\005\uffa8\011\uffa8\055" +
    "\uffa8\001\002\000\004\052\u0213\001\002\000\014\003\uffaa" +
    "\004\uffaa\005\uffaa\011\uffaa\055\uffaa\001\002\000\004\012" +
    "\u0215\001\002\000\004\055\u0216\001\002\000\004\052\u0217" +
    "\001\002\000\014\003\uffab\004\uffab\005\uffab\011\uffab\055" +
    "\uffab\001\002\000\006\003\u0219\012\u021a\001\002\000\004" +
    "\055\u0220\001\002\000\006\003\u021c\055\u021b\001\002\000" +
    "\006\003\u021f\052\u021e\001\002\000\004\052\u021d\001\002" +
    "\000\014\003\uffa1\004\uffa1\005\uffa1\011\uffa1\055\uffa1\001" +
    "\002\000\014\003\uffa7\004\uffa7\005\uffa7\011\uffa7\055\uffa7" +
    "\001\002\000\014\003\uffa0\004\uffa0\005\uffa0\011\uffa0\055" +
    "\uffa0\001\002\000\004\052\u0221\001\002\000\014\003\uffa2" +
    "\004\uffa2\005\uffa2\011\uffa2\055\uffa2\001\002\000\004\012" +
    "\u0223\001\002\000\004\055\u0224\001\002\000\004\052\u0225" +
    "\001\002\000\014\003\uffa3\004\uffa3\005\uffa3\011\uffa3\055" +
    "\uffa3\001\002\000\022\006\132\013\134\017\144\022\127" +
    "\023\130\034\147\035\137\055\135\001\002\000\004\011" +
    "\u0228\001\002\000\022\006\132\013\134\017\144\022\127" +
    "\023\130\034\147\035\137\055\135\001\002\000\004\012" +
    "\u022a\001\002\000\004\055\u022b\001\002\000\004\052\u022c" +
    "\001\002\000\014\003\uffac\004\uffac\005\uffac\011\uffac\055" +
    "\uffac\001\002\000\004\012\u022e\001\002\000\004\055\u022f" +
    "\001\002\000\004\052\u0230\001\002\000\014\003\uffa4\004" +
    "\uffa4\005\uffa4\011\uffa4\055\uffa4\001\002\000\004\010\u0232" +
    "\001\002\000\012\004\111\005\121\011\u0233\055\116\001" +
    "\002\000\022\006\132\013\134\017\144\022\127\023\130" +
    "\034\147\035\137\055\135\001\002\000\004\011\u0235\001" +
    "\002\000\022\006\132\013\134\017\144\022\127\023\130" +
    "\034\147\035\137\055\135\001\002\000\004\012\u0237\001" +
    "\002\000\004\055\u0238\001\002\000\004\052\u0239\001\002" +
    "\000\014\003\uffad\004\uffad\005\uffad\011\uffad\055\uffad\001" +
    "\002\000\004\012\u023b\001\002\000\004\055\u023c\001\002" +
    "\000\004\052\u023d\001\002\000\014\003\uffa5\004\uffa5\005" +
    "\uffa5\011\uffa5\055\uffa5\001\002\000\004\012\u023f\001\002" +
    "\000\004\055\u0240\001\002\000\004\052\u0241\001\002\000" +
    "\004\002\uffeb\001\002\000\004\055\u024c\001\002\000\016" +
    "\003\u0143\007\u0142\036\063\037\065\040\067\042\064\001" +
    "\002\000\030\007\u0126\027\u012b\030\u0127\036\063\037\065" +
    "\040\067\042\064\051\023\055\u0245\056\016\060\u0125\001" +
    "\002\000\022\003\u0244\043\u0122\044\u0243\046\uff60\047\uff60" +
    "\051\015\052\uff60\053\u0242\001\002\000\006\043\u012f\052" +
    "\u0248\001\002\000\014\003\uff9b\004\uff9b\005\uff9b\011\uff9b" +
    "\055\uff9b\001\002\000\014\003\uff99\004\uff99\005\uff99\011" +
    "\uff99\055\uff99\001\002\000\010\003\u024b\043\u0145\052\u024a" +
    "\001\002\000\014\003\uff9a\004\uff9a\005\uff9a\011\uff9a\055" +
    "\uff9a\001\002\000\022\003\uff98\004\uff98\005\uff98\011\uff98" +
    "\027\u0148\030\u0147\055\uff98\060\u0149\001\002\000\012\003" +
    "\u0244\043\u0122\044\u0243\053\u0242\001\002\000\014\003\uff9c" +
    "\004\uff9c\005\uff9c\011\uff9c\055\uff9c\001\002\000\006\003" +
    "\uffb8\011\uffb8\001\002\000\006\003\uffc0\011\uffc0\001\002" +
    "\000\006\003\uffba\011\uffba\001\002\000\006\003\uffbc\011" +
    "\uffbc\001\002\000\004\051\015\001\002\000\004\051\015" +
    "\001\002\000\006\010\u0256\052\u0255\001\002\000\014\003" +
    "\uffb5\004\uffb5\005\uffb5\011\uffb5\055\uffb5\001\002\000\012" +
    "\004\111\005\121\011\u0257\055\116\001\002\000\022\006" +
    "\132\013\134\017\144\022\127\023\130\034\147\035\137" +
    "\055\135\001\002\000\004\011\u0259\001\002\000\022\006" +
    "\132\013\134\017\144\022\127\023\130\034\147\035\137" +
    "\055\135\001\002\000\004\012\u025b\001\002\000\004\055" +
    "\u025c\001\002\000\004\052\u025d\001\002\000\014\003\uffb2" +
    "\004\uffb2\005\uffb2\011\uffb2\055\uffb2\001\002\000\004\012" +
    "\u025f\001\002\000\004\055\u0260\001\002\000\004\052\u0261" +
    "\001\002\000\014\003\uffb0\004\uffb0\005\uffb0\011\uffb0\055" +
    "\uffb0\001\002\000\010\003\u0264\010\u0265\052\u0263\001\002" +
    "\000\014\003\uffb6\004\uffb6\005\uffb6\011\uffb6\055\uffb6\001" +
    "\002\000\014\003\uffb4\004\uffb4\005\uffb4\011\uffb4\055\uffb4" +
    "\001\002\000\012\004\111\005\121\011\u0266\055\116\001" +
    "\002\000\022\006\132\013\134\017\144\022\127\023\130" +
    "\034\147\035\137\055\135\001\002\000\004\011\u0268\001" +
    "\002\000\022\006\132\013\134\017\144\022\127\023\130" +
    "\034\147\035\137\055\135\001\002\000\004\012\u026a\001" +
    "\002\000\004\055\u026b\001\002\000\004\052\u026c\001\002" +
    "\000\014\003\uffb3\004\uffb3\005\uffb3\011\uffb3\055\uffb3\001" +
    "\002\000\004\012\u026e\001\002\000\004\055\u026f\001\002" +
    "\000\004\052\u0270\001\002\000\014\003\uffb1\004\uffb1\005" +
    "\uffb1\011\uffb1\055\uffb1\001\002\000\006\003\uffbe\011\uffbe" +
    "\001\002\000\006\003\u0273\006\u0274\001\002\000\012\036" +
    "\063\037\065\040\067\042\064\001\002\000\012\036\063" +
    "\037\065\040\067\042\064\001\002\000\006\003\u0276\010" +
    "\u0277\001\002\000\016\002\uffec\003\117\004\111\005\121" +
    "\011\122\055\116\001\002\000\016\002\uffec\003\117\004" +
    "\111\005\121\011\122\055\116\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\ufff3\001\002\000\004\010\u027b\001" +
    "\002\000\016\002\uffec\003\117\004\111\005\121\011\122" +
    "\055\116\001\002\000\004\002\ufff4\001\002\000\006\010" +
    "\u027f\051\015\001\002\000\006\006\u0281\010\u0282\001\002" +
    "\000\016\002\uffec\003\117\004\111\005\121\011\122\055" +
    "\116\001\002\000\004\002\ufffa\001\002\000\012\036\063" +
    "\037\065\040\067\042\064\001\002\000\016\002\uffec\003" +
    "\117\004\111\005\121\011\122\055\116\001\002\000\004" +
    "\002\ufffe\001\002\000\004\010\u0285\001\002\000\016\002" +
    "\uffec\003\117\004\111\005\121\011\122\055\116\001\002" +
    "\000\004\002\ufff6\001\002\000\010\003\u028e\010\u0290\051" +
    "\015\001\002\000\006\010\u028a\051\015\001\002\000\004" +
    "\010\u028c\001\002\000\016\002\uffec\003\117\004\111\005" +
    "\121\011\122\055\116\001\002\000\004\002\ufff9\001\002" +
    "\000\016\002\uffec\003\117\004\111\005\121\011\122\055" +
    "\116\001\002\000\004\002\ufffd\001\002\000\016\002\uffec" +
    "\003\117\004\111\005\121\011\122\055\116\001\002\000" +
    "\006\003\u0292\010\u0293\001\002\000\016\002\uffec\003\117" +
    "\004\111\005\121\011\122\055\116\001\002\000\004\002" +
    "\ufffb\001\002\000\016\002\uffec\003\117\004\111\005\121" +
    "\011\122\055\116\001\002\000\016\002\uffec\003\117\004" +
    "\111\005\121\011\122\055\116\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0294\000\006\002\007\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0271\001" +
    "\001\000\004\005\013\001\001\000\002\001\001\000\022" +
    "\006\027\013\021\014\016\017\017\034\025\035\031\037" +
    "\020\041\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\051\001\001\000\002\001" +
    "\001\000\016\013\021\014\016\034\046\035\031\037\020" +
    "\041\030\001\001\000\004\005\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\033\001\001\000\002\001\001\000\010\013" +
    "\021\014\016\041\035\001\001\000\002\001\001\000\004" +
    "\005\037\001\001\000\004\040\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\021\014\016\037\052\041\030\001" +
    "\001\000\002\001\001\000\004\036\053\001\001\000\002" +
    "\001\001\000\004\007\074\001\001\000\004\007\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\070\013\021\014\016\017\017\034\025\035" +
    "\031\037\020\041\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\075\001\001\000\002\001\001\000\022\006\101\013\021" +
    "\014\016\017\017\034\025\035\031\037\020\041\030\001" +
    "\001\000\022\006\100\013\021\014\016\017\017\034\025" +
    "\035\031\037\020\041\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\105\001\001\000\002\001\001\000\024\004\117\010" +
    "\123\011\107\012\113\013\111\014\016\015\122\033\112" +
    "\042\114\001\001\000\022\010\u0270\011\107\012\113\013" +
    "\111\014\016\015\122\033\112\042\114\001\001\000\002" +
    "\001\001\000\022\010\u0250\011\107\012\113\013\111\014" +
    "\016\015\122\033\112\042\114\001\001\000\022\010\u024f" +
    "\011\107\012\113\013\111\014\016\015\122\033\112\042" +
    "\114\001\001\000\022\010\u024e\011\107\012\113\013\111" +
    "\014\016\015\122\033\112\042\114\001\001\000\022\010" +
    "\u024d\011\107\012\113\013\111\014\016\015\122\033\112" +
    "\042\114\001\001\000\004\005\037\001\001\000\026\013" +
    "\144\014\016\020\u023d\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\013\144\014\016\020\u01e3\024\137" +
    "\025\142\026\140\030\141\042\135\043\145\044\132\001" +
    "\001\000\022\010\u01e2\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\026\013\144\014\016\020\u01de\024\137\025\142\026\140" +
    "\030\141\042\135\043\145\044\132\001\001\000\026\013" +
    "\144\014\016\020\130\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\012\014\205\021" +
    "\u01c5\022\212\023\213\001\001\000\026\013\144\014\016" +
    "\020\u01b5\024\137\025\142\026\140\030\141\042\135\043" +
    "\145\044\132\001\001\000\002\001\001\000\016\013\021" +
    "\014\016\034\u01aa\035\031\037\020\041\030\001\001\000" +
    "\026\013\144\014\016\020\u01a9\024\137\025\142\026\140" +
    "\030\141\042\135\043\145\044\132\001\001\000\012\014" +
    "\205\021\u018a\022\212\023\213\001\001\000\004\005\037" +
    "\001\001\000\026\013\144\014\016\020\u011f\024\137\025" +
    "\142\026\140\030\141\042\135\043\145\044\132\001\001" +
    "\000\002\001\001\000\026\013\144\014\016\020\343\024" +
    "\137\025\142\026\140\030\141\042\135\043\145\044\132" +
    "\001\001\000\026\013\144\014\016\020\342\024\137\025" +
    "\142\026\140\030\141\042\135\043\145\044\132\001\001" +
    "\000\026\013\144\014\016\020\341\024\137\025\142\026" +
    "\140\030\141\042\135\043\145\044\132\001\001\000\026" +
    "\013\144\014\016\020\340\024\137\025\142\026\140\030" +
    "\141\042\135\043\145\044\132\001\001\000\002\001\001" +
    "\000\026\013\144\014\016\020\166\024\137\025\142\026" +
    "\140\030\141\042\135\043\145\044\132\001\001\000\026" +
    "\013\144\014\016\020\165\024\137\025\142\026\140\030" +
    "\141\042\135\043\145\044\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\013" +
    "\144\014\016\020\176\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\004\027\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\205\021\227\022\212\023\213\001\001\000" +
    "\012\014\205\021\210\022\212\023\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\205\021\222\022\212\023\213\001\001\000\012\014\205" +
    "\021\221\022\212\023\213\001\001\000\012\014\205\021" +
    "\220\022\212\023\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\205\022\226\001" +
    "\001\000\006\014\205\022\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\205\021" +
    "\231\022\212\023\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\144\014" +
    "\016\020\244\024\137\025\142\026\140\030\141\042\135" +
    "\043\145\044\132\001\001\000\004\027\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\144" +
    "\014\016\020\257\024\137\025\142\026\140\030\141\042" +
    "\135\043\145\044\132\001\001\000\004\027\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\013" +
    "\144\014\016\020\272\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\004\027\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\144\014" +
    "\016\020\322\024\137\025\142\026\140\030\141\042\135" +
    "\043\145\044\132\001\001\000\026\013\144\014\016\020" +
    "\302\024\137\025\142\026\140\030\141\042\135\043\145" +
    "\044\132\001\001\000\004\027\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\144" +
    "\014\016\020\332\024\137\025\142\026\140\030\141\042" +
    "\135\043\145\044\132\001\001\000\004\027\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0189\001\001\000\016\013\021" +
    "\014\016\034\u017d\035\031\037\020\041\030\001\001\000" +
    "\004\016\u0143\001\001\000\022\013\021\014\016\016\u0129" +
    "\034\u012b\035\031\037\020\041\030\042\u0128\001\001\000" +
    "\002\001\001\000\004\016\u0138\001\001\000\002\001\001" +
    "\000\004\005\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\021\014\016\034\u0131\035" +
    "\031\037\020\041\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\021\014" +
    "\016\034\u013c\035\031\037\020\041\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0163\001\001\000\004\016\u015b\001\001\000" +
    "\002\001\001\000\016\013\021\014\016\034\u0150\035\031" +
    "\037\020\041\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\021\014\016" +
    "\034\u015f\035\031\037\020\041\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\021\014\016\034\u0170\035\031\037\020\041\030" +
    "\001\001\000\016\013\021\014\016\034\u0168\035\031\037" +
    "\020\041\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\013" +
    "\144\014\016\020\u01a3\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\026\013\144\014" +
    "\016\020\u018d\024\137\025\142\026\140\030\141\042\135" +
    "\043\145\044\132\001\001\000\004\031\u018f\001\001\000" +
    "\012\014\205\021\u019c\022\212\023\213\001\001\000\004" +
    "\032\u0191\001\001\000\026\013\144\014\016\020\u019b\024" +
    "\137\025\142\026\140\030\141\042\135\043\145\044\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\144\014\016\020\u01a1\024\137\025\142\026\140\030" +
    "\141\042\135\043\145\044\132\001\001\000\026\013\144" +
    "\014\016\020\u019f\024\137\025\142\026\140\030\141\042" +
    "\135\043\145\044\132\001\001\000\004\031\u01a0\001\001" +
    "\000\002\001\001\000\004\031\u01a2\001\001\000\002\001" +
    "\001\000\004\031\u01a4\001\001\000\004\032\u01a5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u01b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\144\014\016\020\u01d8\024" +
    "\137\025\142\026\140\030\141\042\135\043\145\044\132" +
    "\001\001\000\026\013\144\014\016\020\u01c8\024\137\025" +
    "\142\026\140\030\141\042\135\043\145\044\132\001\001" +
    "\000\004\027\u01c9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u01fe" +
    "\001\001\000\004\005\u01ef\001\001\000\002\001\001\000" +
    "\004\016\u01f1\001\001\000\002\001\001\000\022\010\u01f4" +
    "\011\107\012\113\013\111\014\016\015\122\033\112\042" +
    "\114\001\001\000\026\013\144\014\016\020\u01fa\024\137" +
    "\025\142\026\140\030\141\042\135\043\145\044\132\001" +
    "\001\000\002\001\001\000\026\013\144\014\016\020\u01f6" +
    "\024\137\025\142\026\140\030\141\042\135\043\145\044" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0230\001\001\000\004\016\u0201\001\001\000" +
    "\002\001\001\000\022\010\u0226\011\107\012\113\013\111" +
    "\014\016\015\122\033\112\042\114\001\001\000\022\010" +
    "\u0206\011\107\012\113\013\111\014\016\015\122\033\112" +
    "\042\114\001\001\000\026\013\144\014\016\020\u0221\024" +
    "\137\025\142\026\140\030\141\042\135\043\145\044\132" +
    "\001\001\000\026\013\144\014\016\020\u0217\024\137\025" +
    "\142\026\140\030\141\042\135\043\145\044\132\001\001" +
    "\000\002\001\001\000\026\013\144\014\016\020\u0213\024" +
    "\137\025\142\026\140\030\141\042\135\043\145\044\132" +
    "\001\001\000\026\013\144\014\016\020\u0209\024\137\025" +
    "\142\026\140\030\141\042\135\043\145\044\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\144\014" +
    "\016\020\u022c\024\137\025\142\026\140\030\141\042\135" +
    "\043\145\044\132\001\001\000\002\001\001\000\026\013" +
    "\144\014\016\020\u0228\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\u0233\011\107\012\113" +
    "\013\111\014\016\015\122\033\112\042\114\001\001\000" +
    "\026\013\144\014\016\020\u0239\024\137\025\142\026\140" +
    "\030\141\042\135\043\145\044\132\001\001\000\002\001" +
    "\001\000\026\013\144\014\016\020\u0235\024\137\025\142" +
    "\026\140\030\141\042\135\043\145\044\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u024c\042" +
    "\u0189\001\001\000\004\016\u0248\001\001\000\024\013\021" +
    "\014\016\015\u0246\016\u0245\034\u012b\035\031\037\020\041" +
    "\030\042\u0128\001\001\000\004\005\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0261\001\001" +
    "\000\004\005\u0253\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\u0257\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\026\013\144\014" +
    "\016\020\u025d\024\137\025\142\026\140\030\141\042\135" +
    "\043\145\044\132\001\001\000\002\001\001\000\026\013" +
    "\144\014\016\020\u0259\024\137\025\142\026\140\030\141" +
    "\042\135\043\145\044\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\u0266\011\107\012\113\013\111\014\016\015" +
    "\122\033\112\042\114\001\001\000\026\013\144\014\016" +
    "\020\u026c\024\137\025\142\026\140\030\141\042\135\043" +
    "\145\044\132\001\001\000\002\001\001\000\026\013\144" +
    "\014\016\020\u0268\024\137\025\142\026\140\030\141\042" +
    "\135\043\145\044\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0279\001" +
    "\001\000\004\016\u0274\001\001\000\002\001\001\000\024" +
    "\004\u0278\010\123\011\107\012\113\013\111\014\016\015" +
    "\122\033\112\042\114\001\001\000\024\004\u0277\010\123" +
    "\011\107\012\113\013\111\014\016\015\122\033\112\042" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\u027b\010\123\011\107\012\113\013" +
    "\111\014\016\015\122\033\112\042\114\001\001\000\002" +
    "\001\001\000\004\005\u027d\001\001\000\002\001\001\000" +
    "\024\004\u027f\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\004\016\u0283\001\001\000\024\004\u0282\010\123\011\107" +
    "\012\113\013\111\014\016\015\122\033\112\042\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\u0285" +
    "\010\123\011\107\012\113\013\111\014\016\015\122\033" +
    "\112\042\114\001\001\000\002\001\001\000\004\005\u028e" +
    "\001\001\000\004\005\u0288\001\001\000\002\001\001\000" +
    "\024\004\u028a\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\024\004\u028c\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\024\004\u0295\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\024\004\u0290\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\002\001\001\000" +
    "\024\004\u0294\010\123\011\107\012\113\013\111\014\016" +
    "\015\122\033\112\042\114\001\001\000\024\004\u0293\010" +
    "\123\011\107\012\113\013\111\014\016\015\122\033\112" +
    "\042\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
    public int cont = 0;
    public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("Inicio", parser.cont);
        parser.cont++;

        /*Se añaden el hijo*/
        nodo.AddHijo((Nodo) child1);

        /*Solamente en el cuerpo inicial se le asigna el nodo principal al padre.*/
        parser.padre = (Nodo) nodo;

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_principal ::= PROCEDURE ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal", parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo("PROCEDURE", n1.toString(), parser.cont );
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID",n2.toString(),parser.cont);
                    parser.cont++;

                                        
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_principal ::= error ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_principal ::= PROCEDURE error parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_principal ::= PROCEDURE ID parametros error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_principal ::= PROCEDURE ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal",parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo("PROCEDURE", n1.toString(),parser.cont );
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_principal ::= error ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_principal ::= PROCEDURE error IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_principal ::= PROCEDURE ID error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("cuerpo_principal",parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo("FUNCTION", n1.toString(),parser.cont );
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo("IS", n4.toString(), parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_principal ::= error ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_principal ::= FUNCTION error parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_principal ::= FUNCTION ID parametros error tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable error comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo("comienza_cuerpo_principal",parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            nodo.AddHijo((Nodo) child2);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comienza_cuerpo_principal ::= tipo_declaracion error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comienza_cuerpo_principal ::= BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo("comienza_cuerpo_principal",parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comienza_cuerpo_principal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comienza_cuerpo_principal ::= error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comienza_cuerpo_principal ::= BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comienza_cuerpo_principal ::= BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comienza_cuerpo_principal ::= BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codigo ::= ciclo_for codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codigo ::= ciclo_for 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // codigo ::= ciclo_while codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // codigo ::= ciclo_while 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // codigo ::= ciclo_loop codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // codigo ::= ciclo_loop 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // codigo ::= bloque_if codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo",parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // codigo ::= bloque_if 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codigo ::= get codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codigo ::= get 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codigo ::= put codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codigo ::= put 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codigo ::= asignacion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codigo ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // codigo ::= llamar_funcion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // codigo ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("codigo", parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // codigo ::= RETURN expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("codigo", parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codigo ::= RETURN expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("codigo", parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= PARIZQ datos_parametros PARDER 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("parametros", parser.cont );
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= PARIZQ PARDER 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("parametros", parser.cont );
            parser.cont++;

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("datos_parametros", parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo((Nodo) child4);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // datos_parametros ::= listar_ids error tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable error datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("datos_parametros", parser.cont);
                    parser.cont++;
                
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // datos_parametros ::= listar_ids error tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datos_parametros ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo("datos_parametros", parser.cont);
                        parser.cont++;
                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_parametro ::= IN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", n1.toString(), parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", n2.toString(), parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_parametro ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_parametro ::= IN OUT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_parametro", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIn = new Nodo("IN",n1.toString(), parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoOut = new Nodo("OUT",n2.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoIn);
                nodo.AddHijo(nodoOut);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_parametro ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont );
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_parametro ::= error OUT 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_parametro ::= IN error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listar_ids ::= ID COMA listar_ids 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("listar_ids", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(),parser.cont );
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo("COMA",n2.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listar_ids ::= error COMA listar_ids 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listar_ids ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("listar_ids", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont );
            parser.cont++;


            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listar_ids ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_declaracion ::= declarar_variable tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_declaracion ::= declarar_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_declaracion ::= declarar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_declaracion ::= declarar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_declaracion ::= declarar_procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_declaracion ::= declarar_procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_declaracion ::= llamar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_declaracion ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_declaracion ::= procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_declaracion ::= procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_declaracion ::= asignacion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);
                        nodo.AddHijo((Nodo) child2);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_declaracion ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo("tipo_declaracion", parser.cont);
                        parser.cont++;

                        nodo.AddHijo((Nodo) child1);

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarar_procedimiento ::= PROCEDURE ID parametros SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /*Se crea el nodo prinicipal*/
                        Nodo nodo = new Nodo("declarar_procedimiento", parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont );
                        parser.cont++;

                        /*Se añaden los hijos*/
                        nodo.AddHijo(nodoId);
                        nodo.AddHijo((Nodo) child1);

                        /*Asignar el nodo al RESULT para continuar el recorrido*/
                        RESULT = nodo;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declarar_procedimiento ::= PROCEDURE error parametros SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarar_procedimiento ::= PROCEDURE ID parametros error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedimiento ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("procedimiento", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo("ID", n6.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);
                nodo.AddHijo(nodoId2);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedimiento ::= PROCEDURE error parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedimiento ::= PROCEDURE ID parametros IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("procedimiento", parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // procedimiento ::= PROCEDURE error parametros IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_funcion", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo((Nodo) child4);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarar_funcion ::= FUNCTION error parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declarar_funcion ::= FUNCTION ID parametros error tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable error tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_funcion", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declarar_funcion ::= FUNCTION error parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declarar_funcion ::= FUNCTION ID parametros error tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable error BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS error codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo error ID SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // llamar_funcion ::= funcion SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("llamar_funcion", parser.cont);
                parser.cont++;
               
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // llamar_funcion ::= funcion error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcion ::= ID parametros 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("funcion", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoId);
        nodo.AddHijo((Nodo) child1);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declarar_variable ::= ID COMA declarar_variable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_variable", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declarar_variable ::= ID error declarar_variable 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declarar_variable ::= ID DECLARACION tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("declarar_variable", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declarar_variable ::= ID error tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declarar_variable ::= ID DECLARACION tipo_variable error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asignacion ::= ID COMA asignacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asignacion ::= ID error asignacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
//---------------------------------------------------------Puede estar malo----------------------------------------
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            Nodo exp = (Nodo) child2;
            try{
                TablaSimbolos.crear(n1, type.getValue(), false);
                TablaSimbolos.insertar(n1, exp.getValue(), false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion ::= ID error tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n4.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, type.getValue(), false);
                TablaSimbolos.insertar(n1, n4, false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }


            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion ::= ID error tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= ID DECLARACION tipo_variable error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            
            Nodo nodoFalse = new Nodo("FALSE", n4.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoFalse);
            
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, type.getValue(), false);
                TablaSimbolos.insertar(n1, n4, false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asignacion ::= ID error tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion ::= ID DECLARACION tipo_variable error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID",n1.toString(), parser.cont);
            parser.cont++;
       
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING", n4.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoString);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, type.getValue(), false);
                TablaSimbolos.insertar(n1, n4, false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignacion ::= ID error tipo_variable ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignacion ::= ID DECLARACION tipo_variable error CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION CHAR error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignacion ::= ID ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo((Nodo) child1);
//--------------------------------Puede estar malo este metodo ---------------------------------------------------------------------
            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, type.getValue(), false);
                TablaSimbolos.insertar(n1, type.getValue(), false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            


            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignacion ::= ID error expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignacion ::= ID ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            try{
                TablaSimbolos.crear(n1, "Boolean", false);
                TablaSimbolos.insertar(n1, String.valueOf(n3), false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion ::= ID error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignacion ::= ID ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignacion ::= ID ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asignacion ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo("FALSE", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoFalse);

            // Tabla de Símbolos
            try{
                TablaSimbolos.crear(n1, "Boolean", false);
                TablaSimbolos.insertar(n1, String.valueOf(n3), false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignacion ::= ID error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignacion ::= ID ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asignacion ::= ID ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING",n3.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoString);         

            // Tabla de Símbolos
            try{
                TablaSimbolos.crear(n1, String.valueOf(n3), false);
                TablaSimbolos.insertar(n1, n3, false);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // asignacion ::= ID error CHAR SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asignacion ::= ID ASIGNACION CHAR error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            // Tabla de Símbolos
            Nodo type = (Nodo) child1;
            Nodo exp = (Nodo) child2;
            try{
                System.out.println(exp.getValue() + " exp value");
                TablaSimbolos.crear(n1, type.getValue(), true);
                TablaSimbolos.insertar(n1, exp.getValue(), true);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo("TRUE", n5.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoTrue);

            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, hijo.getValue(), true);
                TablaSimbolos.insertar(n1, String.valueOf(n5), true);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error TRUE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo("FALSE", n5.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoFalse);
            
            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, hijo.getValue(), true);
                TablaSimbolos.insertar(n1, String.valueOf(n5), true);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // asignacion ::= ID error CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // asignacion ::= ID DECLARACION error tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // asignacion ::= ID DECLARACION CONSTANT tipo_variable error FALSE SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("asignacion", parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo("CONSTANT", n3.toString(), parser.cont);
            parser.cont++;
            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo("STRING", n5.toString().replaceAll("\"", ""), parser.cont);
            parser.cont++;
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoString);

            // Tabla de Símbolos
            Nodo hijo = (Nodo) child1;
            try{
                TablaSimbolos.crear(n1, hijo.getValue(), true);
                TablaSimbolos.insertar(n1, String.valueOf(n5), true);           
            } catch(Exception e) {
                e.printStackTrace();
                System.out.println("Error al agregar la variable");            
            }

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresion_aritmetica ::= E 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo("expresion_aritmetica", parser.cont);
                            parser.cont++;

                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            
                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= T E_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("E", parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E_prima ::= OPSUMA T E_prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("E_prima", parser.cont);
            parser.cont++;
            
            Nodo nodoOPSUMA = new Nodo("OPSUMA", n1.toString(), parser.cont);
            parser.cont++;

            nodo.AddHijo(nodoOPSUMA);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo("VACIO", parser.cont);
            parser.cont++;
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // T ::= F T_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("T", parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // T_prima ::= OPMULTIPLICACION F T_prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("T_prima", parser.cont);
            parser.cont++;
            
            Nodo nodoMult = new Nodo("OPMULTIPLICACION", n1.toString(), parser.cont);
            parser.cont++;

            nodo.AddHijo(nodoMult);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // T_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo("VACIO", parser.cont);
            parser.cont++;

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // F ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("ID", n1.toString(), parser.cont);
        parser.cont++;

        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // F ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("NUM", n1.toString(), parser.cont);
        parser.cont++;
        

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // F ::= PARIZQ expresion_aritmetica PARDER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("F", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo("PARIZQ", n1.toString(), parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo("PARDER", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo(nodoParder);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // F ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("F", parser.cont);
        parser.cont++;

        nodo.AddHijo((Nodo) child1);

        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipo_variable ::= INTEGER 
            {
              Object RESULT =null;
		 
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "INTEGER", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "FLOAT", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tipo_variable ::= BOOLEAN 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "BOOLEAN", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // tipo_variable ::= STRINGTYPE 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("tipo_variable", "STRINGTYPE", parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("bloque_if", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo((Nodo) child4);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // bloque_if ::= IF condicion error codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else error IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condicion ::= expresion_booleana OR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoOr = new Nodo("OR", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoOr);
            nodo.AddHijo((Nodo) child2);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condicion ::= expresion_booleana AND condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAnd = new Nodo("AND", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAnd);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= expresion_booleana XOR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("condicion", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoXor = new Nodo("XOR", n1.toString(), parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoXor);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicion ::= expresion_booleana 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("expresion_booleana", parser.cont);
            parser.cont++;     

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expresion_booleana ::= operando OPREL operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo("expresion_booleana", parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOPREL = new Nodo("OPREL", n1.toString(), parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoOPREL);
                    nodo.AddHijo((Nodo) child2);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expresion_booleana ::= operando error operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // operando ::= NUM 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("NUM", n1.toString(), parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // operando ::= ID 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // operando ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // operando ::= funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("operando", parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // operando ::= CHAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CHAR", n1.toString());
                parser.cont++;

                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // operando ::= NULL 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("operando", "NULL", parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("bloque_elsif", parser.cont);
                parser.cont++;
                
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // bloque_elsif ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // bloque_elsif ::= ELSIF condicion error codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // bloque_else ::= ELSE codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("bloque_else", parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bloque_else ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo("VACIO", parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_loop", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ciclo_loop ::= LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ciclo_loop ::= LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_while", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ciclo_while ::= WHILE condicion error codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("ciclo_for", parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo("ID", n1.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum = new Nodo("NUM", n3.toString(), parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum2 = new Nodo("NUM",n5.toString(), parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoNum);
            nodo.AddHijo(nodoNum2);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
    
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ciclo_for ::= FOR error IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ciclo_for ::= FOR ID error NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ciclo_for ::= FOR ID IN error DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ciclo_for ::= FOR ID IN NUM error NUM LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS error LOOP codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM error codigo salir_ciclo SEMICOLON END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo error END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON error LOOP SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo SEMICOLON END LOOP error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // salir_ciclo ::= EXIT WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo("salir_ciclo", parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // salir_ciclo ::= error WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // salir_ciclo ::= EXIT error condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // put ::= PUT PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoNum = new Nodo("NUM", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoNum);
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // put ::= PUT error NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // put ::= PUT PARIZQ error PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // put ::= PUT PARIZQ NUM error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // put ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;
        
        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoString = new Nodo("STRING", n2.toString().replaceAll("\"", ""), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoString);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // put ::= PUT error STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // put ::= PUT PARIZQ STRING error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // put ::= PUT PARIZQ STRING PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // put ::= PUT PARIZQ CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoChar = new Nodo("CHAR", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoChar);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // put ::= PUT error CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // put ::= PUT PARIZQ CHAR error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // put ::= PUT PARIZQ CHAR PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // put ::= PUT PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoTrue = new Nodo("TRUE", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoTrue);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // put ::= PUT error TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // put ::= PUT PARIZQ TRUE error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // put ::= PUT PARIZQ TRUE PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // put ::= PUT PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoFalse = new Nodo("FALSE", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoFalse);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // put ::= PUT error FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // put ::= PUT PARIZQ FALSE error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // put ::= PUT PARIZQ FALSE PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // put ::= PUT PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo("PUT", parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoID = new Nodo("ID", n2.toString(), parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoID);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // put ::= PUT error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // put ::= PUT PARIZQ ID error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // put ::= PUT PARIZQ ID PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // get ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo("get", parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo("ID", n2.toString(), parser.cont);
    parser.cont++;

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoId);
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // get ::= GET error ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // get ::= GET PARIZQ error PARDER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // get ::= GET PARIZQ ID error SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // get ::= GET PARIZQ ID PARDER error 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
