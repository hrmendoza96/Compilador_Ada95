
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\003\006\000\002\003\011\000\002\004\010" +
    "\000\002\004\010\000\002\004\007\000\002\022\004\000" +
    "\002\022\003\000\002\022\004\000\002\022\003\000\002" +
    "\022\004\000\002\022\003\000\002\022\004\000\002\022" +
    "\003\000\002\022\004\000\002\022\003\000\002\022\004" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\022\004\000\002\022\003\000\002\022\004\000\002" +
    "\022\003\000\002\005\005\000\002\005\004\000\002\006" +
    "\010\000\002\006\006\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\002\000\002\021\005\000" +
    "\002\021\003\000\002\010\004\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\004\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\011\006\000\002\035\014\000\002\012\016\000\002" +
    "\012\015\000\002\013\004\000\002\014\004\000\002\015" +
    "\005\000\002\015\006\000\002\044\005\000\002\044\010" +
    "\000\002\044\010\000\002\044\010\000\002\044\010\000" +
    "\002\044\010\000\002\044\006\000\002\044\006\000\002" +
    "\044\006\000\002\044\006\000\002\044\006\000\002\044" +
    "\011\000\002\044\011\000\002\044\011\000\002\044\011" +
    "\000\002\044\011\000\002\036\003\000\002\037\004\000" +
    "\002\040\005\000\002\040\002\000\002\041\004\000\002" +
    "\042\005\000\002\042\002\000\002\043\003\000\002\043" +
    "\003\000\002\043\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\032\013\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\025\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\033\007\000\002\033\002\000\002\034\004\000" +
    "\002\034\002\000\002\026\010\000\002\030\012\000\002" +
    "\027\016\000\002\031\005\000\002\046\007\000\002\046" +
    "\007\000\002\046\007\000\002\046\007\000\002\046\007" +
    "\000\002\046\007\000\002\047\007\000\002\047\007\000" +
    "\002\047\007\000\002\047\007\000\002\047\007\000\002" +
    "\045\007\000\002\016\013\000\002\017\005\000\002\017" +
    "\003\000\002\017\007\000\002\017\005\000\002\017\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\006\004\005\005\006\001\002\000\004\002" +
    "\000\001\002\000\004\062\u012f\001\002\000\004\062\011" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\055\013\001\002\000\004\006\040\001\002" +
    "\000\006\054\015\062\014\001\002\000\006\050\uffde\060" +
    "\036\001\002\000\026\006\uffe6\011\uffe6\013\uffe6\015\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\051\uffe6\057\uffe6\001" +
    "\002\000\004\050\021\001\002\000\004\054\020\001\002" +
    "\000\026\006\uffe7\011\uffe7\013\uffe7\015\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\051\uffe7\057\uffe7\001\002\000\020" +
    "\021\023\022\022\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\001\002\000\014\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\001\002\000\016\022\035\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\001\002\000\014\042\025\043\030" +
    "\044\031\045\026\046\027\001\002\000\016\011\uffaf\040" +
    "\uffaf\047\uffaf\054\uffaf\057\uffaf\060\uffaf\001\002\000\016" +
    "\011\uffab\040\uffab\047\uffab\054\uffab\057\uffab\060\uffab\001" +
    "\002\000\016\011\uffac\040\uffac\047\uffac\054\uffac\057\uffac" +
    "\060\uffac\001\002\000\016\011\uffae\040\uffae\047\uffae\054" +
    "\uffae\057\uffae\060\uffae\001\002\000\016\011\uffad\040\uffad" +
    "\047\uffad\054\uffad\057\uffad\060\uffad\001\002\000\006\054" +
    "\uffe4\057\033\001\002\000\004\062\014\001\002\000\004" +
    "\054\uffe5\001\002\000\014\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\001\002\000\004\062\014\001\002\000\004" +
    "\050\uffdf\001\002\000\014\042\025\043\030\044\031\045" +
    "\026\046\027\001\002\000\004\011\042\001\002\000\012" +
    "\004\045\005\055\012\056\062\053\001\002\000\004\057" +
    "\u012e\001\002\000\012\004\045\005\055\012\uffd8\062\347" +
    "\001\002\000\004\062\u0123\001\002\000\012\004\045\005" +
    "\055\012\uffd6\062\347\001\002\000\012\004\045\005\055" +
    "\012\uffd4\062\347\001\002\000\012\004\045\005\055\012" +
    "\uffda\062\347\001\002\000\004\012\u011b\001\002\000\012" +
    "\004\045\005\055\012\uffd2\062\347\001\002\000\012\047" +
    "\200\050\u0116\055\013\060\u0115\001\002\000\004\002\ufffd" +
    "\001\002\000\004\062\u0105\001\002\000\022\014\070\020" +
    "\100\023\063\024\064\035\103\036\073\037\062\062\071" +
    "\001\002\000\012\004\045\005\055\012\uffdc\062\347\001" +
    "\002\000\004\012\061\001\002\000\022\014\070\020\100" +
    "\023\063\024\064\035\103\036\073\037\062\062\071\001" +
    "\002\000\004\055\327\001\002\000\010\034\132\062\125" +
    "\063\124\001\002\000\022\014\070\020\100\023\063\024" +
    "\064\035\103\036\073\037\062\062\071\001\002\000\032" +
    "\013\uffec\014\070\016\uffec\017\uffec\020\100\023\063\024" +
    "\064\032\uffec\035\103\036\073\037\062\062\071\001\002" +
    "\000\004\013\307\001\002\000\032\013\uffee\014\070\016" +
    "\uffee\017\uffee\020\100\023\063\024\064\032\uffee\035\103" +
    "\036\073\037\062\062\071\001\002\000\010\034\132\062" +
    "\125\063\124\001\002\000\012\047\200\050\201\055\013" +
    "\060\177\001\002\000\032\013\uffea\014\070\016\uffea\017" +
    "\uffea\020\100\023\063\024\064\032\uffea\035\103\036\073" +
    "\037\062\062\071\001\002\000\004\055\153\001\002\000" +
    "\032\013\ufff4\014\070\016\ufff4\017\ufff4\020\100\023\063" +
    "\024\064\032\ufff4\035\103\036\073\037\062\062\071\001" +
    "\002\000\032\013\ufff6\014\070\016\ufff6\017\ufff6\020\100" +
    "\023\063\024\064\032\ufff6\035\103\036\073\037\062\062" +
    "\071\001\002\000\032\013\ufff2\014\070\016\ufff2\017\ufff2" +
    "\020\100\023\063\024\064\032\ufff2\035\103\036\073\037" +
    "\062\062\071\001\002\000\032\013\ufff8\014\070\016\ufff8" +
    "\017\ufff8\020\100\023\063\024\064\032\ufff8\035\103\036" +
    "\073\037\062\062\071\001\002\000\004\062\112\001\002" +
    "\000\032\013\uffe8\014\070\016\uffe8\017\uffe8\020\100\023" +
    "\063\024\064\032\uffe8\035\103\036\073\037\062\062\071" +
    "\001\002\000\032\013\ufff0\014\070\016\ufff0\017\ufff0\020" +
    "\100\023\063\024\064\032\ufff0\035\103\036\073\037\062" +
    "\062\071\001\002\000\004\055\104\001\002\000\004\062" +
    "\105\001\002\000\004\054\106\001\002\000\004\057\107" +
    "\001\002\000\032\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\023\uff8d\024\uff8d\032\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\062\uff8d\001\002\000\012\013\ufff1\016\ufff1\017\ufff1\032" +
    "\ufff1\001\002\000\012\013\uffe9\016\uffe9\017\uffe9\032\uffe9" +
    "\001\002\000\004\021\113\001\002\000\004\063\114\001" +
    "\002\000\004\061\115\001\002\000\004\063\116\001\002" +
    "\000\004\024\117\001\002\000\022\014\070\020\100\023" +
    "\063\024\064\035\103\036\073\037\062\062\071\001\002" +
    "\000\004\032\122\001\002\000\004\013\144\001\002\000" +
    "\004\033\123\001\002\000\010\034\132\062\125\063\124" +
    "\001\002\000\020\013\uffa4\015\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\051\uffa4\001\002\000\022\013\uffa3\015\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\051\uffa3\055\013\001" +
    "\002\000\016\013\uffa6\015\uffa6\024\uffa6\025\135\026\136" +
    "\027\137\001\002\000\004\013\uff99\001\002\000\004\051" +
    "\133\001\002\000\020\013\uffa2\015\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\051\uffa2\001\002\000\020\013\uffa1\015" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\051\uffa1\001\002" +
    "\000\010\034\132\062\125\063\124\001\002\000\016\013" +
    "\uffa5\015\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\001\002" +
    "\000\010\034\132\062\125\063\124\001\002\000\010\034" +
    "\132\062\125\063\124\001\002\000\010\034\132\062\125" +
    "\063\124\001\002\000\010\013\uffa7\015\uffa7\024\uffa7\001" +
    "\002\000\010\013\uffa9\015\uffa9\024\uffa9\001\002\000\010" +
    "\013\uffa8\015\uffa8\024\uffa8\001\002\000\022\013\uffcc\015" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\051\uffcc\057\uffcc" +
    "\001\002\000\004\024\145\001\002\000\004\057\146\001" +
    "\002\000\032\013\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\023\uff9a\024\uff9a\032\uff9a\035\uff9a\036\uff9a\037\uff9a\062" +
    "\uff9a\001\002\000\012\013\ufff9\016\ufff9\017\ufff9\032\ufff9" +
    "\001\002\000\012\013\ufff3\016\ufff3\017\ufff3\032\ufff3\001" +
    "\002\000\012\013\ufff7\016\ufff7\017\ufff7\032\ufff7\001\002" +
    "\000\012\013\ufff5\016\ufff5\017\ufff5\032\ufff5\001\002\000" +
    "\016\030\160\031\157\062\154\063\155\064\156\065\161" +
    "\001\002\000\004\054\174\001\002\000\004\054\172\001" +
    "\002\000\004\054\170\001\002\000\004\054\166\001\002" +
    "\000\004\054\164\001\002\000\004\054\162\001\002\000" +
    "\004\057\163\001\002\000\032\013\uff96\014\uff96\016\uff96" +
    "\017\uff96\020\uff96\023\uff96\024\uff96\032\uff96\035\uff96\036" +
    "\uff96\037\uff96\062\uff96\001\002\000\004\057\165\001\002" +
    "\000\032\013\uff94\014\uff94\016\uff94\017\uff94\020\uff94\023" +
    "\uff94\024\uff94\032\uff94\035\uff94\036\uff94\037\uff94\062\uff94" +
    "\001\002\000\004\057\167\001\002\000\032\013\uff95\014" +
    "\uff95\016\uff95\017\uff95\020\uff95\023\uff95\024\uff95\032\uff95" +
    "\035\uff95\036\uff95\037\uff95\062\uff95\001\002\000\004\057" +
    "\171\001\002\000\032\013\uff97\014\uff97\016\uff97\017\uff97" +
    "\020\uff97\023\uff97\024\uff97\032\uff97\035\uff97\036\uff97\037" +
    "\uff97\062\uff97\001\002\000\004\057\173\001\002\000\032" +
    "\013\uff98\014\uff98\016\uff98\017\uff98\020\uff98\023\uff98\024" +
    "\uff98\032\uff98\035\uff98\036\uff98\037\uff98\062\uff98\001\002" +
    "\000\004\057\175\001\002\000\032\013\uff93\014\uff93\016" +
    "\uff93\017\uff93\020\uff93\023\uff93\024\uff93\032\uff93\035\uff93" +
    "\036\uff93\037\uff93\062\uff93\001\002\000\012\013\uffeb\016" +
    "\uffeb\017\uffeb\032\uffeb\001\002\000\004\062\265\001\002" +
    "\000\020\030\255\031\253\055\212\062\213\063\205\064" +
    "\254\065\257\001\002\000\016\010\202\042\025\043\030" +
    "\044\031\045\026\046\027\001\002\000\014\042\025\043" +
    "\030\044\031\045\026\046\027\001\002\000\004\047\204" +
    "\001\002\000\020\030\211\031\206\055\212\062\213\063" +
    "\205\064\210\065\217\001\002\000\012\052\uffb1\053\uffb1" +
    "\054\uffb1\057\uffb1\001\002\000\004\057\236\001\002\000" +
    "\010\053\232\054\uffb6\057\uffb6\001\002\000\004\057\231" +
    "\001\002\000\004\057\230\001\002\000\010\055\212\062" +
    "\213\063\205\001\002\000\012\052\uffb2\053\uffb2\054\uffb2" +
    "\057\uffb2\001\002\000\004\057\225\001\002\000\012\052" +
    "\221\053\uffb3\054\uffb3\057\uffb3\001\002\000\006\054\uffb9" +
    "\057\uffb9\001\002\000\004\057\220\001\002\000\034\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\023\uffc4" +
    "\024\uffc4\032\uffc4\035\uffc4\036\uffc4\037\uffc4\062\uffc4\001" +
    "\002\000\010\055\212\062\213\063\205\001\002\000\010" +
    "\053\uffb5\054\uffb5\057\uffb5\001\002\000\012\052\221\053" +
    "\uffb3\054\uffb3\057\uffb3\001\002\000\010\053\uffb4\054\uffb4" +
    "\057\uffb4\001\002\000\034\012\uffc8\013\uffc8\014\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8\032\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\062\uffc8\001\002\000\004\054\227\001" +
    "\002\000\012\052\uffb0\053\uffb0\054\uffb0\057\uffb0\001\002" +
    "\000\034\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\032\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\062\uffc6\001\002\000\034\012\uffc5\013\uffc5\014\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\023\uffc5\024\uffc5\032\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\062\uffc5\001\002\000\010\055\212\062" +
    "\213\063\205\001\002\000\006\054\uffb8\057\uffb8\001\002" +
    "\000\010\053\232\054\uffb6\057\uffb6\001\002\000\006\054" +
    "\uffb7\057\uffb7\001\002\000\034\012\uffc7\013\uffc7\014\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\023\uffc7\024\uffc7\032\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\062\uffc7\001\002\000\004\047\240" +
    "\001\002\000\020\030\243\031\241\055\212\062\213\063" +
    "\205\064\242\065\245\001\002\000\004\057\252\001\002" +
    "\000\004\057\251\001\002\000\004\057\250\001\002\000" +
    "\004\057\247\001\002\000\004\057\246\001\002\000\034" +
    "\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\020\uffba\023" +
    "\uffba\024\uffba\032\uffba\035\uffba\036\uffba\037\uffba\062\uffba" +
    "\001\002\000\034\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\023\uffbe\024\uffbe\032\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\062\uffbe\001\002\000\034\012\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\023\uffbc\024\uffbc\032\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\062\uffbc\001\002\000\034\012" +
    "\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\023\uffbb" +
    "\024\uffbb\032\uffbb\035\uffbb\036\uffbb\037\uffbb\062\uffbb\001" +
    "\002\000\034\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\023\uffbd\024\uffbd\032\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\062\uffbd\001\002\000\004\057\264\001\002\000\004" +
    "\057\263\001\002\000\004\057\262\001\002\000\004\057" +
    "\261\001\002\000\004\057\260\001\002\000\034\012\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\023\uffbf\024" +
    "\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\062\uffbf\001\002" +
    "\000\034\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\023\uffc3\024\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\062\uffc3\001\002\000\034\012\uffc1\013\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\023\uffc1\024\uffc1\032\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\062\uffc1\001\002\000\034\012\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0" +
    "\032\uffc0\035\uffc0\036\uffc0\037\uffc0\062\uffc0\001\002\000" +
    "\034\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\023\uffc2\024\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2\062" +
    "\uffc2\001\002\000\010\047\200\050\201\060\177\001\002" +
    "\000\034\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\023\uffc9\024\uffc9\032\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\062\uffc9\001\002\000\004\015\270\001\002\000\022\014" +
    "\070\020\100\023\063\024\064\035\103\036\073\037\062" +
    "\062\071\001\002\000\010\013\uff9f\016\uff9f\017\272\001" +
    "\002\000\010\034\132\062\125\063\124\001\002\000\006" +
    "\013\uff9d\016\274\001\002\000\022\014\070\020\100\023" +
    "\063\024\064\035\103\036\073\037\062\062\071\001\002" +
    "\000\004\013\276\001\002\000\004\014\277\001\002\000" +
    "\004\057\300\001\002\000\032\013\uffaa\014\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\023\uffaa\024\uffaa\032\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\062\uffaa\001\002\000\004\013\uff9e\001\002" +
    "\000\004\015\303\001\002\000\022\014\070\020\100\023" +
    "\063\024\064\035\103\036\073\037\062\062\071\001\002" +
    "\000\010\013\uff9f\016\uff9f\017\272\001\002\000\006\013" +
    "\uffa0\016\uffa0\001\002\000\012\013\uffef\016\uffef\017\uffef" +
    "\032\uffef\001\002\000\004\062\310\001\002\000\004\057" +
    "\311\001\002\000\004\002\ufffc\001\002\000\012\013\uffed" +
    "\016\uffed\017\uffed\032\uffed\001\002\000\004\032\122\001" +
    "\002\000\004\013\315\001\002\000\004\024\316\001\002" +
    "\000\004\057\317\001\002\000\032\013\uff9c\014\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\023\uff9c\024\uff9c\032\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\062\uff9c\001\002\000\004\024\321\001" +
    "\002\000\022\014\070\020\100\023\063\024\064\035\103" +
    "\036\073\037\062\062\071\001\002\000\004\032\122\001" +
    "\002\000\004\013\324\001\002\000\004\024\325\001\002" +
    "\000\004\057\326\001\002\000\032\013\uff9b\014\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\023\uff9b\024\uff9b\032\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\062\uff9b\001\002\000\014\030\333\031" +
    "\332\063\330\064\331\065\334\001\002\000\004\054\345" +
    "\001\002\000\004\054\343\001\002\000\004\054\341\001" +
    "\002\000\004\054\337\001\002\000\004\054\335\001\002" +
    "\000\004\057\336\001\002\000\032\013\uff90\014\uff90\016" +
    "\uff90\017\uff90\020\uff90\023\uff90\024\uff90\032\uff90\035\uff90" +
    "\036\uff90\037\uff90\062\uff90\001\002\000\004\057\340\001" +
    "\002\000\032\013\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\023\uff8e\024\uff8e\032\uff8e\035\uff8e\036\uff8e\037\uff8e\062" +
    "\uff8e\001\002\000\004\057\342\001\002\000\032\013\uff8f" +
    "\014\uff8f\016\uff8f\017\uff8f\020\uff8f\023\uff8f\024\uff8f\032" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\062\uff8f\001\002\000\004" +
    "\057\344\001\002\000\032\013\uff91\014\uff91\016\uff91\017" +
    "\uff91\020\uff91\023\uff91\024\uff91\032\uff91\035\uff91\036\uff91" +
    "\037\uff91\062\uff91\001\002\000\004\057\346\001\002\000" +
    "\032\013\uff92\014\uff92\016\uff92\017\uff92\020\uff92\023\uff92" +
    "\024\uff92\032\uff92\035\uff92\036\uff92\037\uff92\062\uff92\001" +
    "\002\000\010\050\352\055\013\060\351\001\002\000\004" +
    "\012\uffdd\001\002\000\004\062\376\001\002\000\016\007" +
    "\354\042\025\043\030\044\031\045\026\046\027\001\002" +
    "\000\004\057\375\001\002\000\004\055\355\001\002\000" +
    "\016\042\025\043\030\044\031\045\026\046\027\063\356" +
    "\001\002\000\004\061\371\001\002\000\004\054\365\001" +
    "\002\000\010\040\362\054\uff8a\060\361\001\002\000\016" +
    "\042\025\043\030\044\031\045\026\046\027\063\356\001" +
    "\002\000\004\056\363\001\002\000\004\054\uff87\001\002" +
    "\000\004\054\uff8b\001\002\000\004\041\366\001\002\000" +
    "\014\042\025\043\030\044\031\045\026\046\027\001\002" +
    "\000\004\057\370\001\002\000\012\004\uff8c\005\uff8c\012" +
    "\uff8c\062\uff8c\001\002\000\004\063\372\001\002\000\006" +
    "\054\uff88\060\373\001\002\000\016\042\025\043\030\044" +
    "\031\045\026\046\027\063\356\001\002\000\004\054\uff89" +
    "\001\002\000\012\004\uffca\005\uffca\012\uffca\062\uffca\001" +
    "\002\000\006\050\u0100\060\351\001\002\000\012\004\uffcb" +
    "\005\uffcb\012\uffcb\062\uffcb\001\002\000\014\042\025\043" +
    "\030\044\031\045\026\046\027\001\002\000\004\013\u0102" +
    "\001\002\000\004\062\u0103\001\002\000\004\057\u0104\001" +
    "\002\000\004\002\ufffa\001\002\000\004\055\013\001\002" +
    "\000\004\006\u0107\001\002\000\014\042\025\043\030\044" +
    "\031\045\026\046\027\001\002\000\004\011\u0109\001\002" +
    "\000\012\004\045\005\055\012\u010a\062\347\001\002\000" +
    "\022\014\070\020\100\023\063\024\064\035\103\036\073" +
    "\037\062\062\071\001\002\000\004\012\u010c\001\002\000" +
    "\022\014\070\020\100\023\063\024\064\035\103\036\073" +
    "\037\062\062\071\001\002\000\004\013\u010e\001\002\000" +
    "\004\062\u010f\001\002\000\004\057\u0110\001\002\000\012" +
    "\004\uffcf\005\uffcf\012\uffcf\062\uffcf\001\002\000\004\013" +
    "\u0112\001\002\000\004\062\u0113\001\002\000\004\057\u0114" +
    "\001\002\000\012\004\uffce\005\uffce\012\uffce\062\uffce\001" +
    "\002\000\004\062\u0118\001\002\000\020\007\354\010\202" +
    "\042\025\043\030\044\031\045\026\046\027\001\002\000" +
    "\006\047\204\057\375\001\002\000\010\047\200\050\u0119" +
    "\060\u0115\001\002\000\016\010\202\042\025\043\030\044" +
    "\031\045\026\046\027\001\002\000\004\012\uffd3\001\002" +
    "\000\022\014\070\020\100\023\063\024\064\035\103\036" +
    "\073\037\062\062\071\001\002\000\004\013\u011d\001\002" +
    "\000\004\062\u011e\001\002\000\004\057\u011f\001\002\000" +
    "\004\002\ufffb\001\002\000\004\012\uffdb\001\002\000\004" +
    "\012\uffd5\001\002\000\004\012\uffd7\001\002\000\004\055" +
    "\013\001\002\000\006\011\u0126\057\u0125\001\002\000\012" +
    "\004\uffd1\005\uffd1\012\uffd1\062\uffd1\001\002\000\010\004" +
    "\045\005\055\062\347\001\002\000\004\012\u0128\001\002" +
    "\000\022\014\070\020\100\023\063\024\064\035\103\036" +
    "\073\037\062\062\071\001\002\000\004\013\u012a\001\002" +
    "\000\004\062\u012b\001\002\000\004\057\u012c\001\002\000" +
    "\012\004\uffd0\005\uffd0\012\uffd0\062\uffd0\001\002\000\004" +
    "\012\uffd9\001\002\000\040\004\uffcd\005\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\023\uffcd\024\uffcd" +
    "\032\uffcd\035\uffcd\036\uffcd\037\uffcd\062\uffcd\001\002\000" +
    "\006\011\u0131\055\013\001\002\000\004\011\u0133\001\002" +
    "\000\012\004\045\005\055\012\056\062\053\001\002\000" +
    "\004\002\ufffe\001\002\000\012\004\045\005\055\012\056" +
    "\062\053\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\006\006\016\021\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\033\021" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\036\001\001\000\002\001\001\000\004\020\040\001" +
    "\001\000\002\001\001\000\026\004\053\010\057\011\043" +
    "\012\047\013\045\014\042\015\056\016\051\035\046\044" +
    "\050\001\001\000\002\001\001\000\022\010\u012c\011\043" +
    "\012\047\013\045\014\042\015\056\016\051\035\046\001" +
    "\001\000\002\001\001\000\022\010\u0121\011\043\012\047" +
    "\013\045\014\042\015\056\016\051\035\046\001\001\000" +
    "\022\010\u0120\011\043\012\047\013\045\014\042\015\056" +
    "\016\051\035\046\001\001\000\022\010\u011f\011\043\012" +
    "\047\013\045\014\042\015\056\016\051\035\046\001\001" +
    "\000\002\001\001\000\022\010\u0119\011\043\012\047\013" +
    "\045\014\042\015\056\016\051\035\046\001\001\000\004" +
    "\005\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\013\100\014\042\022\u0100\026\073\027\076\030\074" +
    "\032\075\044\071\045\101\046\066\047\064\001\001\000" +
    "\022\010\347\011\043\012\047\013\045\014\042\015\056" +
    "\016\051\035\046\001\001\000\002\001\001\000\030\013" +
    "\100\014\042\022\065\026\073\027\076\030\074\032\075" +
    "\044\071\045\101\046\066\047\064\001\001\000\002\001" +
    "\001\000\012\014\130\023\317\024\127\025\125\001\001" +
    "\000\030\013\100\014\042\022\312\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\030\013\100\014\042\022\311\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\002\001\001\000\030\013\100\014\042\022\305\026" +
    "\073\027\076\030\074\032\075\044\071\045\101\046\066" +
    "\047\064\001\001\000\012\014\130\023\266\024\127\025" +
    "\125\001\001\000\004\005\142\001\001\000\030\013\100" +
    "\014\042\022\175\026\073\027\076\030\074\032\075\044" +
    "\071\045\101\046\066\047\064\001\001\000\002\001\001" +
    "\000\030\013\100\014\042\022\151\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\030\013\100\014\042\022\150\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\030\013\100\014\042\022\147\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\030\013\100\014\042\022\146\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\002\001\001\000\030\013\100\014\042\022\110\026" +
    "\073\027\076\030\074\032\075\044\071\045\101\046\066" +
    "\047\064\001\001\000\030\013\100\014\042\022\107\026" +
    "\073\027\076\030\074\032\075\044\071\045\101\046\066" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\100\014\042\022\117\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\004\031\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\130\023\126\024\127\025\125\001\001" +
    "\000\002\001\001\000\004\005\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\130\024\133\001\001\000" +
    "\002\001\001\000\012\014\130\023\141\024\127\025\125" +
    "\001\001\000\012\014\130\023\140\024\127\025\125\001" +
    "\001\000\012\014\130\023\137\024\127\025\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\265\001\001" +
    "\000\012\036\255\037\215\041\206\043\214\001\001\000" +
    "\004\020\202\001\001\000\004\020\236\001\001\000\002" +
    "\001\001\000\012\036\213\037\215\041\206\043\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\036" +
    "\225\037\215\041\206\043\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\222" +
    "\001\001\000\002\001\001\000\004\042\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\233\043\214\001\001\000\002\001\001\000\004\040\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\243\037\215\041\206\043\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\100\014\042\022\270\026\073\027\076" +
    "\030\074\032\075\044\071\045\101\046\066\047\064\001" +
    "\001\000\004\033\272\001\001\000\012\014\130\023\301" +
    "\024\127\025\125\001\001\000\004\034\274\001\001\000" +
    "\030\013\100\014\042\022\300\026\073\027\076\030\074" +
    "\032\075\044\071\045\101\046\066\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\013" +
    "\100\014\042\022\303\026\073\027\076\030\074\032\075" +
    "\044\071\045\101\046\066\047\064\001\001\000\004\033" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\100\014\042\022\321\026\073\027\076" +
    "\030\074\032\075\044\071\045\101\046\066\047\064\001" +
    "\001\000\004\031\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\142" +
    "\001\001\000\002\001\001\000\004\015\376\001\001\000" +
    "\004\020\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\356\020\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\363\020\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\373\020\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0105\001" +
    "\001\000\002\001\001\000\004\020\u0107\001\001\000\002" +
    "\001\001\000\022\010\u010a\011\043\012\047\013\045\014" +
    "\042\015\056\016\051\035\046\001\001\000\030\013\100" +
    "\014\042\022\u0110\026\073\027\076\030\074\032\075\044" +
    "\071\045\101\046\066\047\064\001\001\000\002\001\001" +
    "\000\030\013\100\014\042\022\u010c\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\376\044\265\001" +
    "\001\000\004\020\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0116\001\001\000\002\001\001\000" +
    "\030\013\100\014\042\022\u011b\026\073\027\076\030\074" +
    "\032\075\044\071\045\101\046\066\047\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0123\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\u0126\011\043\012\047\013\045\014" +
    "\042\015\056\016\051\035\046\001\001\000\002\001\001" +
    "\000\030\013\100\014\042\022\u0128\026\073\027\076\030" +
    "\074\032\075\044\071\045\101\046\066\047\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u012f\001\001\000\002\001\001\000\026\004\u0131\010" +
    "\057\011\043\012\047\013\045\014\042\015\056\016\051" +
    "\035\046\044\050\001\001\000\002\001\001\000\026\004" +
    "\u0133\010\057\011\043\012\047\013\045\014\042\015\056" +
    "\016\051\035\046\044\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo padre;
    public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();
    public int cont = 0;
    public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.out.println("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("Inicio");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Se añaden el hijo*/
        nodo.AddHijo((Nodo) child1);

        /*Solamente en el cuerpo inicial se le asigna el nodo principal al padre.*/
        parser.padre = (Nodo) nodo;

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_principal ::= PROCEDURE ID parametros IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(nodoProcedure.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_principal ::= PROCEDURE ID IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoProcedure = new Nodo();
                    nodoProcedure.setTag("PROCEDURE");
                    nodoProcedure.setValue(nodoProcedure.toString());
                    nodoProcedure.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoProcedure);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_principal ::= FUNCTION ID parametros RETURN tipo_variable IS comienza_cuerpo_principal 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("cuerpo_principal");
                    nodo.setId(parser.cont);
                    parser.cont++;
                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;
                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comienza_cuerpo_principal ::= tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(nodoBegin.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(nodoEnd.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(nodoId.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(nodoSemicolon.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child2);
                            nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comienza_cuerpo_principal ::= asignacion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(nodoBegin.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(nodoEnd.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(nodoId.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(nodoSemicolon.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child2);
                            nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comienza_cuerpo_principal ::= BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("comienza_cuerpo_principal");
                            nodo.setId(parser.cont);
                            parser.cont++;
                            
                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoBegin = new Nodo();
                            nodoBegin.setTag("BEGIN");
                            nodoBegin.setValue(nodoBegin.toString());
                            nodoBegin.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoEnd = new Nodo();
                            nodoEnd.setTag("END");
                            nodoEnd.setValue(nodoEnd.toString());
                            nodoEnd.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoId = new Nodo();
                            nodoId.setTag("ID");
                            nodoId.setValue(nodoId.toString());
                            nodoId.setId(parser.cont);
                            parser.cont++;

                            /*Nuevo Nodo: TERMINAL*/
                            Nodo nodoSemicolon = new Nodo();
                            nodoSemicolon.setTag("SEMICOLON");
                            nodoSemicolon.setValue(nodoSemicolon.toString());
                            nodoSemicolon.setId(parser.cont);
                            parser.cont++;
                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo(nodoBegin);
                            nodo.AddHijo((Nodo) child1);
                            nodo.AddHijo(nodoEnd);
                            nodo.AddHijo(nodoId);                   
                            nodo.AddHijo(nodoSemicolon);

                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienza_cuerpo_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigo ::= ciclo_for codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= ciclo_for 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= ciclo_while codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= ciclo_while 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= ciclo_loop codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= ciclo_loop 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= bloque_if codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigo ::= bloque_if 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigo ::= get codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigo ::= get 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);


        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigo ::= put codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigo ::= put 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigo ::= put_line codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigo ::= put_line 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codigo ::= asignacion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // codigo ::= asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // codigo ::= llamar_funcion codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // codigo ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("codigo");
        nodo.setId(parser.cont);
        parser.cont++;
 
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros ::= PARIZQ datos_parametros PARDER 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(nodoParizq.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(nodoParder.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= PARIZQ PARDER 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("parametros");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParizq = new Nodo();
            nodoParizq.setTag("PARIZQ");
            nodoParizq.setValue(nodoParizq.toString());
            nodoParizq.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoParder = new Nodo();
            nodoParder.setTag("PARDER");
            nodoParder.setValue(nodoParder.toString());
            nodoParder.setId(parser.cont);
            parser.cont++;
    
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoParizq);
            nodo.AddHijo(nodoParder);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable SEMICOLON datos_parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(nodoDeclaracion.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo(nodoSemicolon);
                    nodo.AddHijo((Nodo) child4);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // datos_parametros ::= listar_ids DECLARACION tipo_parametro tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("datos_parametros");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(nodoDeclaracion.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo((Nodo) child3);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos_parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_parametro ::= IN 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue("in");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_parametro ::= OUT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue("out");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_parametro ::= IN OUT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIn = new Nodo();
                nodoIn.setTag("IN");
                nodoIn.setValue(nodoIn.toString());
                nodoIn.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoOut = new Nodo();
                nodoOut.setTag("OUT");
                nodoOut.setValue(nodoOut.toString());
                nodoOut.setId(parser.cont);
                parser.cont++;

                /*Se añaden los hijos*/
                nodo.AddHijo(nodoIn);
                nodo.AddHijo(nodoOut);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_parametro ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_parametro");
                nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listar_ids ::= ID COMA listar_ids 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(nodoComa.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listar_ids ::= ID 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("listar_ids");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;


            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listar_ids",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_declaracion ::= declarar_variable tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_declaracion ::= declarar_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_declaracion ::= declarar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_declaracion ::= declarar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_declaracion ::= declarar_procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_declaracion ::= declarar_procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_declaracion ::= llamar_funcion tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_declaracion ::= llamar_funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_declaracion ::= procedimiento tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo_declaracion ::= procedimiento 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_declaracion ::= declaracion_arreglo tipo_declaracion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_declaracion ::= declaracion_arreglo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("tipo_declaracion");
                    nodo.setId(parser.cont);
                    parser.cont++;
            
                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declarar_procedimiento ::= PROCEDURE ID parametros SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /*Se crea el nodo prinicipal*/
                        Nodo nodo = new Nodo();
                        nodo.setTag("declarar_procedimiento");
                        nodo.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoProcedure = new Nodo();
                        nodoProcedure.setTag("PROCEDURE");
                        nodoProcedure.setValue(nodoProcedure.toString());
                        nodoProcedure.setId(parser.cont);
                        parser.cont++;

                        /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoId = new Nodo();
                        nodoId.setTag("ID");
                        nodoId.setValue(nodoId.toString());
                        nodoId.setId(parser.cont);
                        parser.cont++;

                         /*Nuevo Nodo: TERMINAL*/
                        Nodo nodoSemicolon = new Nodo();
                        nodoSemicolon.setTag("SEMICOLON");
                        nodoSemicolon.setValue(nodoSemicolon.toString());
                        nodoSemicolon.setId(parser.cont);
                        parser.cont++;


                        /*Se añaden los hijos*/
                        nodo.AddHijo(nodoProcedure);
                        nodo.AddHijo(nodoId);
                        nodo.AddHijo((Nodo) child1);
                        nodo.AddHijo(nodoSemicolon);

                        /*Asignar el nodo al RESULT para continuar el recorrido*/
                        RESULT = nodo;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_procedimiento",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procedimiento ::= PROCEDURE ID parametros IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("procedimiento");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoProcedure = new Nodo();
                nodoProcedure.setTag("PROCEDURE");
                nodoProcedure.setValue(nodoProcedure.toString());
                nodoProcedure.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId = new Nodo();
                nodoId.setTag("ID");
                nodoId.setValue(nodoId.toString());
                nodoId.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoId2 = new Nodo();
                nodoId2.setTag("ID");
                nodoId2.setValue(nodoId2.toString());
                nodoId2.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoIs = new Nodo();
                nodoIs.setTag("IS");
                nodoIs.setValue(nodoIs.toString());
                nodoIs.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoBegin = new Nodo();
                nodoBegin.setTag("BEGIN");
                nodoBegin.setValue(nodoBegin.toString());
                nodoBegin.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoEnd = new Nodo();
                nodoEnd.setTag("END");
                nodoEnd.setValue(nodoEnd.toString());
                nodoEnd.setId(parser.cont);
                parser.cont++;
                

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;


                /*Se añaden los hijos*/
                nodo.AddHijo(nodoProcedure);
                nodo.AddHijo(nodoId);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo(nodoIs);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo(nodoBegin);
                nodo.AddHijo((Nodo) child3);
                nodo.AddHijo(nodoEnd);
                nodo.AddHijo(nodoId2);
                nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS tipo_declaracion BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(nodoId2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo(nodoIs);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child4);
                    nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declarar_funcion ::= FUNCTION ID parametros RETURN tipo_variable IS BEGIN codigo END ID SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_funcion");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoFunction = new Nodo();
                    nodoFunction.setTag("FUNCTION");
                    nodoFunction.setValue(nodoFunction.toString());
                    nodoFunction.setId(parser.cont);
                    parser.cont++;
                   

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId2 = new Nodo();
                    nodoId2.setTag("ID");
                    nodoId2.setValue(nodoId2.toString());
                    nodoId2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoReturn = new Nodo();
                    nodoReturn.setTag("RETURN");
                    nodoReturn.setValue(nodoReturn.toString());
                    nodoReturn.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoIs = new Nodo();
                    nodoIs.setTag("IS");
                    nodoIs.setValue(nodoIs.toString());
                    nodoIs.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoBegin = new Nodo();
                    nodoBegin.setTag("BEGIN");
                    nodoBegin.setValue(nodoBegin.toString());
                    nodoBegin.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoEnd = new Nodo();
                    nodoEnd.setTag("END");
                    nodoEnd.setValue(nodoEnd.toString());
                    nodoEnd.setId(parser.cont);
                    parser.cont++;
                    

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoFunction);
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoReturn);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo(nodoIs);
                    nodo.AddHijo(nodoBegin);
                    nodo.AddHijo((Nodo) child3);
                    nodo.AddHijo(nodoEnd);
                    nodo.AddHijo(nodoId2);
                    nodo.AddHijo(nodoSemicolon);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_funcion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamar_funcion ::= funcion SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("llamar_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoSemicolon = new Nodo();
                nodoSemicolon.setTag("SEMICOLON");
                nodoSemicolon.setValue(nodoSemicolon.toString());
                nodoSemicolon.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo(nodoSemicolon);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion ::= ID parametros 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("funcion");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoId = new Nodo();
        nodoId.setTag("ID");
        nodoId.setValue(nodoId.toString());
        nodoId.setId(parser.cont);
        parser.cont++;

        
        /*Se añaden los hijos*/
        nodo.AddHijo(nodoId);
        nodo.AddHijo((Nodo) child1);
        

        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declarar_variable ::= ID COMA declarar_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(nodoComa.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarar_variable ::= ID DECLARACION tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declarar_variable");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(nodoDeclaracion.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                   

                    
                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoSemicolon);

                    

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacion ::= ID COMA asignacion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoComa = new Nodo();
            nodoComa.setTag("COMA");
            nodoComa.setValue(nodoComa.toString());
            nodoComa.setId(parser.cont);
            parser.cont++;

            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoComa);
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(nodoTrue.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(nodoFalse.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(nodoString.toString());
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= ID DECLARACION tipo_variable ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(nodoChar.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;


            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= ID ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= ID ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(nodoTrue.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= ID ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(nodoFalse.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion ::= ID ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(nodoString.toString());
            nodoString.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion ::= ID ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(nodoChar.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION expresion_aritmetica SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(nodoConstant.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION TRUE SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(nodoConstant.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoTrue = new Nodo();
            nodoTrue.setTag("TRUE");
            nodoTrue.setValue(nodoTrue.toString());
            nodoTrue.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoTrue);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION FALSE SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(nodoConstant.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFalse = new Nodo();
            nodoFalse.setTag("FALSE");
            nodoFalse.setValue(nodoFalse.toString());
            nodoFalse.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoFalse);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION STRING SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(nodoConstant.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoString = new Nodo();
            nodoString.setTag("STRING");
            nodoString.setValue(nodoString.toString());
            nodoString.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoString);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion ::= ID DECLARACION CONSTANT tipo_variable ASIGNACION CHAR SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("asignacion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDeclaracion = new Nodo();
            nodoDeclaracion.setTag("DECLARACION");
            nodoDeclaracion.setValue(nodoDeclaracion.toString());
            nodoDeclaracion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoConstant = new Nodo();
            nodoConstant.setTag("CONSTANT");
            nodoConstant.setValue(nodoConstant.toString());
            nodoConstant.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAsignacion = new Nodo();
            nodoAsignacion.setTag("ASIGNACION");
            nodoAsignacion.setValue(nodoAsignacion.toString());
            nodoAsignacion.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoChar = new Nodo();
            nodoChar.setTag("CHAR");
            nodoChar.setValue(nodoChar.toString());
            nodoChar.setId(parser.cont);
            parser.cont++;

             /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoDeclaracion);
            nodo.AddHijo(nodoConstant);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAsignacion);
            nodo.AddHijo(nodoChar);
            nodo.AddHijo(nodoSemicolon);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_aritmetica ::= E 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            /*Se crea el nodo prinicipal*/
                            Nodo nodo = new Nodo();
                            nodo.setTag("expresion_aritmetica");
                            nodo.setId(parser.cont);
                            parser.cont++;

                            
                            /*Se añaden los hijos*/
                            nodo.AddHijo((Nodo) child1);
                            
                            /*Asignar el nodo al RESULT para continuar el recorrido*/
                            RESULT = nodo;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= T E_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("E");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E_prima ::= OPSUMA T E_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo();
            nodo.setTag("E_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoOPSUMA = new Nodo();
            nodoOPSUMA.setTag("OPSUMA");
            nodoOPSUMA.setValue(nodoOPSUMA.toString());
            nodoOPSUMA.setId(parser.cont);
            parser.cont++;

            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo();
            nodo.setTag("E_prima");
            nodo.setId(parser.cont);
            parser.cont++;

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E_prima",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= F T_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("T");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Se añaden los hijos*/
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo((Nodo) child2);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T_prima ::= OPMULTIPLICACION F T_prima 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo();
            nodo.setTag("T_prima");
            nodo.setId(parser.cont);
            parser.cont++;
            
            Nodo nodoOPSUMA = new Nodo();
            nodoOPSUMA.setTag("OPMULTIPLICACION");
            nodoOPSUMA.setValue(nodoOPSUMA.toString());
            nodoOPSUMA.setId(parser.cont);
            parser.cont++;

            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T_prima ::= 
            {
              Object RESULT =null;
		
            Nodo nodo = new Nodo();
            nodo.setTag("T_prima");
            nodo.setId(parser.cont);
            parser.cont++;

            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T_prima",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= ID 
            {
              Object RESULT =null;
		
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setValue("ID");
        nodo.setId(parser.cont);
        parser.cont++;

        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // F ::= NUM 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setValue("NUM");
        nodo.setId(parser.cont);
        parser.cont++;
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // F ::= PARIZQ expresion_aritmetica PARDER 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("F");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo((Nodo) child1);
        nodo.AddHijo(nodoParder);
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_variable ::= INTEGER 
            {
              Object RESULT =null;
		 
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("FLOAT");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_variable ::= BOOLEAN 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("BOOLEAN");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_variable ::= STRINGTYPE 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("STRINGTYPE");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_variable ::= CHARACTER 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("tipo_variable");
                nodo.setValue("CHARACTER");
                nodo.setId(parser.cont);
                parser.cont++;
                
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_if");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf = new Nodo();
            nodoIf.setTag("IF");
            nodoIf.setValue(nodoIf.toString());
            nodoIf.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIf2 = new Nodo();
            nodoIf2.setTag("IF");
            nodoIf2.setValue(nodoIf2.toString());
            nodoIf2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoThen = new Nodo();
            nodoThen.setTag("THEN");
            nodoThen.setValue(nodoThen.toString());
            nodoThen.setId(parser.cont);
            parser.cont++;


            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoIf);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoThen);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo((Nodo) child4);
            nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoIf2);
            nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= expresion_booleana OR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoOr = new Nodo();
            nodoOr.setTag("OR");
            nodoOr.setValue(nodoOr.toString());
            nodoOr.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoOr);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= expresion_booleana AND condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoAnd = new Nodo();
            nodoAnd.setTag("AND");
            nodoAnd.setValue(nodoAnd.toString());
            nodoAnd.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoAnd);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= expresion_booleana XOR condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoXor = new Nodo();
            nodoXor.setTag("XOR");
            nodoXor.setValue(nodoXor.toString());
            nodoXor.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoXor);
            nodo.AddHijo((Nodo) child2);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= expresion_booleana 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("condicion");
            nodo.setId(parser.cont);
            parser.cont++;     

            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);
            

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_booleana ::= operando OPREL operando 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("expresion_booleana");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOPREL = new Nodo();
                    nodoOPREL.setTag("OPREL");
                    nodoOPREL.setValue(nodoOPREL.toString());
                    nodoOPREL.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoOPREL);
                    nodo.AddHijo((Nodo) child2);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operando ::= NUM 
            {
              Object RESULT =null;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setValue("NUM");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operando ::= ID 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setValue("ID");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operando ::= funcion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Se añaden los hijos*/
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operando ::= NULL 
            {
              Object RESULT =null;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("operando");
            nodo.setValue("NULL");
            nodo.setId(parser.cont);
            parser.cont++;
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("bloque_elsif");
                nodo.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoElsif = new Nodo();
                nodoElsif.setTag("ELSIF");
                nodoElsif.setValue(nodoElsif.toString());
                nodoElsif.setId(parser.cont);
                parser.cont++;

                /*Nuevo Nodo: TERMINAL*/
                Nodo nodoThen = new Nodo();
                nodoThen.setTag("THEN");
                nodoThen.setValue(nodoThen.toString());
                nodoThen.setId(parser.cont);
                parser.cont++;

                
                /*Se añaden los hijos*/
                nodo.AddHijo(nodoElsif);
                nodo.AddHijo((Nodo) child1);
                nodo.AddHijo(nodoThen);
                nodo.AddHijo((Nodo) child2);
                nodo.AddHijo((Nodo) child3);

                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bloque_elsif ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("bloque_elsif");
                nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque_else ::= ELSE codigo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("bloque_else");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoElse = new Nodo();
            nodoElse.setTag("ELSE");
            nodoElse.setValue(nodoElse.toString());
            nodoElse.setId(parser.cont);
            parser.cont++;

            

            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoElse);
            nodo.AddHijo((Nodo) child1);

            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloque_else ::= 
            {
              Object RESULT =null;
		
                /*Se crea el nodo prinicipal*/
                Nodo nodo = new Nodo();
                nodo.setTag("bloque_else");
                nodo.setValue("VACIO");
                nodo.setId(parser.cont);
                parser.cont++;
                /*Asignar el nodo al RESULT para continuar el recorrido*/
                RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ciclo_loop ::= LOOP codigo salir_ciclo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_loop");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoLoop2);
            nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_loop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ciclo_while ::= WHILE condicion LOOP codigo salir_ciclo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_while");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhile = new Nodo();
            nodoWhile.setTag("WHILE");
            nodoWhile.setValue(nodoWhile.toString());
            nodoWhile.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoWhile);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo((Nodo) child3);
            nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoLoop2);
            nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ciclo_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("ciclo_for");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoFor = new Nodo();
            nodoFor.setTag("FOR");
            nodoFor.setValue(nodoFor.toString());
            nodoFor.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoId = new Nodo();
            nodoId.setTag("ID");
            nodoId.setValue(nodoId.toString());
            nodoId.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoIn = new Nodo();
            nodoIn.setTag("IN");
            nodoIn.setValue(nodoIn.toString());
            nodoIn.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum = new Nodo();
            nodoNum.setTag("NUM");
            nodoNum.setValue(nodoNum.toString());
            nodoNum.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoNum2 = new Nodo();
            nodoNum2.setTag("NUM");
            nodoNum2.setValue(nodoNum2.toString());
            nodoNum2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoDosPuntos = new Nodo();
            nodoDosPuntos.setTag("DOSPUNTOS");
            nodoDosPuntos.setValue(nodoDosPuntos.toString());
            nodoDosPuntos.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop = new Nodo();
            nodoLoop.setTag("LOOP");
            nodoLoop.setValue(nodoLoop.toString());
            nodoLoop.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoLoop2 = new Nodo();
            nodoLoop2.setTag("LOOP");
            nodoLoop2.setValue(nodoLoop2.toString());
            nodoLoop2.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoEnd = new Nodo();
            nodoEnd.setTag("END");
            nodoEnd.setValue(nodoEnd.toString());
            nodoEnd.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoSemicolon = new Nodo();
            nodoSemicolon.setTag("SEMICOLON");
            nodoSemicolon.setValue(nodoSemicolon.toString());
            nodoSemicolon.setId(parser.cont);
            parser.cont++;


            
            /*Se añaden los hijos*/
            nodo.AddHijo(nodoFor);
            nodo.AddHijo(nodoId);
            nodo.AddHijo(nodoIn);
            nodo.AddHijo(nodoNum);
            nodo.AddHijo(nodoDosPuntos);
            nodo.AddHijo(nodoNum2);
            nodo.AddHijo(nodoLoop);
            nodo.AddHijo((Nodo) child1);
            nodo.AddHijo((Nodo) child2);
            nodo.AddHijo(nodoEnd);
            nodo.AddHijo(nodoLoop2);
            nodo.AddHijo(nodoSemicolon);
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // salir_ciclo ::= EXIT WHEN condicion 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            /*Se crea el nodo prinicipal*/
            Nodo nodo = new Nodo();
            nodo.setTag("salir_ciclo");
            nodo.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoExit = new Nodo();
            nodoExit.setTag("EXIT");
            nodoExit.setValue(nodoExit.toString());
            nodoExit.setId(parser.cont);
            parser.cont++;

            /*Nuevo Nodo: TERMINAL*/
            Nodo nodoWhen = new Nodo();
            nodoWhen.setTag("WHEN");
            nodoWhen.setValue(nodoWhen.toString());
            nodoWhen.setId(parser.cont);
            parser.cont++;

            /*Se añaden los hijos*/
            nodo.AddHijo(nodoExit);
            nodo.AddHijo(nodoWhen);
            nodo.AddHijo((Nodo) child1);
            
            
            /*Asignar el nodo al RESULT para continuar el recorrido*/
            RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // put ::= PUT PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoNum = new Nodo();
    nodoNum.setTag("NUM");
    nodoNum.setValue(nodoNum.toString());
    nodoNum.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoNum);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // put ::= PUT PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoString = new Nodo();
    nodoString.setTag("STRING");
    nodoString.setValue(nodoString.toString());
    nodoString.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoString);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // put ::= PUT PARIZQ CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoChar = new Nodo();
    nodoChar.setTag("CHAR");
    nodoChar.setValue(nodoChar.toString());
    nodoChar.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoChar);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // put ::= PUT PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

     /*Nuevo Nodo: TERMINAL*/
    Nodo nodoTrue = new Nodo();
    nodoTrue.setTag("TRUE");
    nodoTrue.setValue(nodoTrue.toString());
    nodoTrue.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoTrue);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // put ::= PUT PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		
     /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoFalse = new Nodo();
    nodoFalse.setTag("FALSE");
    nodoFalse.setValue(nodoFalse.toString());
    nodoFalse.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoFalse);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // put ::= PUT PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("put");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoPut = new Nodo();
    nodoPut.setTag("PUT");
    nodoPut.setValue(nodoPut.toString());
    nodoPut.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(nodoId.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoPut);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // put_line ::= PUT_LINE PARIZQ NUM PARDER SEMICOLON 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoNum = new Nodo();
        nodoNum.setTag("NUM");
        nodoNum.setValue(nodoNum.toString());
        nodoNum.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoNum);
        nodo.AddHijo(nodoParder);
        nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // put_line ::= PUT_LINE PARIZQ STRING PARDER SEMICOLON 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoString = new Nodo();
        nodoString.setTag("STRING");
        nodoString.setValue(nodoString.toString());
        nodoString.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoString);
        nodo.AddHijo(nodoParder);
        nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // put_line ::= PUT_LINE PARIZQ CHAR PARDER SEMICOLON 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoChar = new Nodo();
        nodoChar.setTag("CHAR");
        nodoChar.setValue(nodoChar.toString());
        nodoChar.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoChar);
        nodo.AddHijo(nodoParder);
        nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // put_line ::= PUT_LINE PARIZQ TRUE PARDER SEMICOLON 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoTrue = new Nodo();
        nodoTrue.setTag("TRUE");
        nodoTrue.setValue(nodoTrue.toString());
        nodoTrue.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoTrue);
        nodo.AddHijo(nodoParder);
        nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // put_line ::= PUT_LINE PARIZQ FALSE PARDER SEMICOLON 
            {
              Object RESULT =null;
		
        /*Se crea el nodo prinicipal*/
        Nodo nodo = new Nodo();
        nodo.setTag("put_line");
        nodo.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoPutLine = new Nodo();
        nodoPutLine.setTag("PUTLINE");
        nodoPutLine.setValue(nodoPutLine.toString());
        nodoPutLine.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParizq = new Nodo();
        nodoParizq.setTag("PARIZQ");
        nodoParizq.setValue(nodoParizq.toString());
        nodoParizq.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoFalse = new Nodo();
        nodoFalse.setTag("FALSE");
        nodoFalse.setValue(nodoFalse.toString());
        nodoFalse.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoParder = new Nodo();
        nodoParder.setTag("PARDER");
        nodoParder.setValue(nodoParder.toString());
        nodoParder.setId(parser.cont);
        parser.cont++;

        /*Nuevo Nodo: TERMINAL*/
        Nodo nodoSemicolon = new Nodo();
        nodoSemicolon.setTag("SEMICOLON");
        nodoSemicolon.setValue(nodoSemicolon.toString());
        nodoSemicolon.setId(parser.cont);
        parser.cont++;

        

        /*Se añaden los hijos*/
        nodo.AddHijo(nodoPutLine);
        nodo.AddHijo(nodoParizq);
        nodo.AddHijo(nodoFalse);
        nodo.AddHijo(nodoParder);
        nodo.AddHijo(nodoSemicolon);
        
        
        /*Asignar el nodo al RESULT para continuar el recorrido*/
        RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_line",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // get ::= GET PARIZQ ID PARDER SEMICOLON 
            {
              Object RESULT =null;
		
    /*Se crea el nodo prinicipal*/
    Nodo nodo = new Nodo();
    nodo.setTag("get");
    nodo.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoGet = new Nodo();
    nodoGet.setTag("GET");
    nodoGet.setValue(nodoGet.toString());
    nodoGet.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParizq = new Nodo();
    nodoParizq.setTag("PARIZQ");
    nodoParizq.setValue(nodoParizq.toString());
    nodoParizq.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoId = new Nodo();
    nodoId.setTag("ID");
    nodoId.setValue(nodoId.toString());
    nodoId.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoParder = new Nodo();
    nodoParder.setTag("PARDER");
    nodoParder.setValue(nodoParder.toString());
    nodoParder.setId(parser.cont);
    parser.cont++;

    /*Nuevo Nodo: TERMINAL*/
    Nodo nodoSemicolon = new Nodo();
    nodoSemicolon.setTag("SEMICOLON");
    nodoSemicolon.setValue(nodoSemicolon.toString());
    nodoSemicolon.setId(parser.cont);
    parser.cont++;

    

    /*Se añaden los hijos*/
    nodo.AddHijo(nodoGet);
    nodo.AddHijo(nodoParizq);
    nodo.AddHijo(nodoId);
    nodo.AddHijo(nodoParder);
    nodo.AddHijo(nodoSemicolon);
    
    
    /*Asignar el nodo al RESULT para continuar el recorrido*/
    RESULT = nodo;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracion_arreglo ::= ID DECLARACION ARRAY PARIZQ dimension_arreglo PARDER OF tipo_variable SEMICOLON 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("declaracion_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoId = new Nodo();
                    nodoId.setTag("ID");
                    nodoId.setValue(nodoId.toString());
                    nodoId.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDeclaracion = new Nodo();
                    nodoDeclaracion.setTag("DECLARACION");
                    nodoDeclaracion.setValue(nodoDeclaracion.toString());
                    nodoDeclaracion.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoArray = new Nodo();
                    nodoArray.setTag("ARRAY");
                    nodoArray.setValue(nodoArray.toString());
                    nodoArray.setId(parser.cont);
                    parser.cont++;

                    
                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParizq = new Nodo();
                    nodoParizq.setTag("PARIZQ");
                    nodoParizq.setValue(nodoParizq.toString());
                    nodoParizq.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoParder = new Nodo();
                    nodoParder.setTag("PARDER");
                    nodoParder.setValue(nodoParder.toString());
                    nodoParder.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoOF = new Nodo();
                    nodoOF.setTag("OF");
                    nodoOF.setValue(nodoOF.toString());
                    nodoOF.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoSemicolon = new Nodo();
                    nodoSemicolon.setTag("SEMICOLON");
                    nodoSemicolon.setValue(nodoSemicolon.toString());
                    nodoSemicolon.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoId);
                    nodo.AddHijo(nodoDeclaracion);
                    nodo.AddHijo(nodoArray);
                    nodo.AddHijo(nodoParizq);
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoParder);
                    nodo.AddHijo(nodoOF);
                    nodo.AddHijo((Nodo) child2);
                    nodo.AddHijo(nodoSemicolon);
                    
                    
                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dimension_arreglo ::= tipo_variable COMA dimension_arreglo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int child2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(nodoComa.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dimension_arreglo ::= tipo_variable 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;


                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dimension_arreglo ::= NUM DOSPUNTOS NUM COMA dimension_arreglo 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(nodoNum.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(nodoNum2.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(nodoDosPuntos.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoComa = new Nodo();
                    nodoComa.setTag("COMA");
                    nodoComa.setValue(nodoComa.toString());
                    nodoComa.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);
                    nodo.AddHijo(nodoComa);
                    nodo.AddHijo((Nodo) child1);
                    


                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dimension_arreglo ::= NUM DOSPUNTOS NUM 
            {
              Object RESULT =null;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum = new Nodo();
                    nodoNum.setTag("NUM");
                    nodoNum.setValue(nodoNum.toString());
                    nodoNum.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoNum2 = new Nodo();
                    nodoNum2.setTag("NUM");
                    nodoNum2.setValue(nodoNum2.toString());
                    nodoNum2.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoDosPuntos = new Nodo();
                    nodoDosPuntos.setTag("DOSPUNTOS");
                    nodoDosPuntos.setValue(nodoDosPuntos.toString());
                    nodoDosPuntos.setId(parser.cont);
                    parser.cont++;

                    

                    /*Se añaden los hijos*/
                    nodo.AddHijo(nodoNum);
                    nodo.AddHijo(nodoDosPuntos);
                    nodo.AddHijo(nodoNum2);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // dimension_arreglo ::= tipo_variable RANGE CAJA 
            {
              Object RESULT =null;
		int child1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int child1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object child1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    /*Se crea el nodo prinicipal*/
                    Nodo nodo = new Nodo();
                    nodo.setTag("dimension_arreglo");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoRange = new Nodo();
                    nodoRange.setTag("RANGE");
                    nodoRange.setValue(nodoRange.toString());
                    nodoRange.setId(parser.cont);
                    parser.cont++;


                    /*Nuevo Nodo: TERMINAL*/
                    Nodo nodoCaja = new Nodo();
                    nodoCaja.setTag("CAJA");
                    nodoCaja.setValue(nodoCaja.toString());
                    nodoCaja.setId(parser.cont);
                    parser.cont++;

                    /*Se añaden los hijos*/
                    nodo.AddHijo((Nodo) child1);
                    nodo.AddHijo(nodoRange);
                    nodo.AddHijo(nodoCaja);

                    /*Asignar el nodo al RESULT para continuar el recorrido*/
                    RESULT = nodo;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
